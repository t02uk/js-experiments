// Generated by CoffeeScript 1.6.3
(function() {
  window.onload = function() {
    var Branch, Tree, d, main, trees;
    d = new DCore();
    Branch = (function() {
      function Branch() {
        var _ref;
        _ref = $A(arguments), this.p = _ref[0], this.rad = _ref[1], this.size = _ref[2];
        this.s = [this.size, 0].rotate(this.rad);
        this.sp = this.s.mul(0.4);
        this.hue = $R(0, 0.3).randf();
        this.pe = this.p.add(this.sp.mul(5));
        this.life = 10;
        if (this.size * Math.random() > 0.016) {
          this.setChildren();
        }
      }

      Branch.prototype.act = function() {
        this.life--;
        this.p = this.p.add(this.sp);
        this.sp = this.sp.add([0.0, 0.0002]);
        this.sp = this.sp.mul(0.9);
        return this.pe = this.p.add(this.sp.mul(5).add(this.s.mul(0.1)));
      };

      Branch.prototype.draw = function() {
        return d.hsv(this.hue, 0.9, 1.0).blend("lighter").alpha($R(0, 0.3).randf()).quads([this.p, this.pe]).lineWidth(0.003).stroke();
      };

      Branch.prototype.setChildren = function() {
        var _this = this;
        return this.children = $R(0, $R(0, 3).randf() + $R(0, 3).rand()).map(function() {
          return new Branch(_this.pe, _this.rad + $R(0, 10).randf(), _this.size * $R(0.1, 0.8).randf());
        });
      };

      return Branch;

    })();
    Tree = (function() {
      function Tree() {
        this.p = [$R(0.0, 0.01).randf(), 0].rotate($R(0, 100).randf()).add([0.5, 0.7]);
        this.root = new Branch(this.p, $R(0, 100).randf(), $R(0.01, 0.1).randf());
      }

      Tree.prototype.act = function() {
        this.root.act();
        return this.flatMap(function(x) {
          return x.act();
        });
      };

      Tree.prototype.draw = function() {
        this.root.draw();
        return this.flatMap(function(x) {
          return x.draw();
        });
      };

      Tree.prototype.flatMap = function(func, x) {
        var _ref,
          _this = this;
        if (x == null) {
          x = this.root;
        }
        return (_ref = x.children) != null ? _ref.map(function(y) {
          func(x);
          if (y) {
            return _this.flatMap(func, y);
          }
        }) : void 0;
      };

      return Tree;

    })();
    trees = new Array(16).fill();
    main = function(cnt) {
      if (cnt == null) {
        cnt = 0;
      }
      d.blend("source-over").alpha(1.0).rgb(0x11, 0x11, 0x22).fillBack();
      d.quads([[0.5, 0.0], [0.5, 0.7]]).blend("source-over").alpha(0.9).rgb(0x77, 0x55, 0x55).lineWidth(0.008).stroke();
      3.0.times(function(i) {
        var p;
        p = [Math.sin(cnt * i) * 0.7, Math.cos(cnt * i)].mul(0.003);
        return d.blend("lighter").alpha(1.0).luminous([0.5, 0.7].add(p), 0.01, $R(0.015, 0.02).randf(), [[0.0, [$R(0, 0.3).randf(), 0.2, 0.9].hsv()], [0.7, [$R(0, 0.3).randf(), 0.7, 0.4].hsv()], [1.0, [0.0, 0.0, 0.0].hsv()]]).fill();
      });
      d.blend("lighter").alpha(1.0).luminous([0.5, 0.7], 0.1, 0.3 + $R(0, 4).randf() * 0.003, [[0.0, [0.1, 0.1, 0.1].hsv()], [0.2, [0.2, 0.1, 0.1].hsv()], [0.7, [0.3, 0.1, 0.1].hsv()], [1.0, [0.0, 0.0, 0.0].hsv()]]).fill();
      4.0.times(function() {
        trees.push(new Tree());
        return trees.shift();
      });
      trees.select(function(x) {
        return x;
      }).each(function(x) {
        x.act();
        return x.draw();
      });
      return window.setTimeout(arguments.callee.curry(cnt + 1), 33);
    };
    return main();
  };

}).call(this);

/*
//@ sourceMappingURL=index.map
*/
