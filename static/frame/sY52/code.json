{"source":{"css":"","html":"","lisence":"MIT","js":"(function() {\n\n\t// 配列 -> base64変換\n\t(function() {\n\t\t// 参考 http://github.com/dankogai/js-base64\n\t\tvar base64Table = (function() {\n\t\t\tvar raw = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\t\t\treturn $R(0, raw.length - 1).map(function(i) {\n\t\t\t\treturn raw.charAt(i);\n\t\t\t});\n\t\t})();\n\n\t\tArray.prototype.toBase64 = function() {\n\t\t\tvar bt = base64Table;\n\t\t\tvar bin = this;\n\t\t\tvar padlen = 0;\n\t\t\twhile(bin.length % 3) {\n\t\t\t\tbin.push(0);\n\t\t\t\tpadlen++;\n\t\t\t}\n\n\t\t\tvar b64 = [];\n\t\t\tfor(var i = 0, l = bin.length; i < l; i += 3) {\n\t\t\t\tvar c = (bin[i + 0] << 16)\n\t\t\t\t\t  | (bin[i + 1] <<  8)\n\t\t\t\t\t  | (bin[i + 2] <<  0)\n\t\t\t\t;\n\t\t\t\tb64.push(\n\t\t\t\t\tbt[(c >>> 18) & 63],\n\t\t\t\t\tbt[(c >>> 12) & 63],\n\t\t\t\t\tbt[(c >>>  6) & 63],\n\t\t\t\t\tbt[(c >>>  0) & 63]\n\t\t\t\t);\n\t\t\t}\n\n\t\t\twhile(padlen--) b64[b64.length - padlen - 1] = '=';\n\t\t\treturn b64.join(\"\");\n\t\t};\n\t\tString.prototype.charCodes = function() {\n\t\t\tvar result = new Array(this.length);\n\t\t\tfor(var i = 0, l = this.length; i < l; i++) {\n\t\t\t\tresult[i] = this.charCodeAt(i);\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\t\tNumber.prototype.toBytes = function(size) {\n\t\t\tvar size = size || 4;\n\t\t\tvar result = new Array(size);\n\t\t\tfor(var i = 0; i < size; i++) {\n\t\t\t\tresult[i] = (this >>> (i << 3) & 0xff);\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\t})();\n\n\n\t// Wave Data-Scheme生成用\n\t//   参考 http://hooktail.org/computer/index.php?Wave%A5%D5%A5%A1%A5%A4%A5%EB%A4%F2%C6%FE%BD%D0%CE%CF%A4%B7%A4%C6%A4%DF%A4%EB\n\t(function() {\n\t\tfunction Wave(data, seconds) {\n\t\t\tvar header = [];\n\n\t\t\t// サンプリングレート\n\t\t\tvar samplingRate = this.samplingRate;\n\t\t\t// チャンネル数\n\t\t\tvar chunnels = 1;\n\t\t\t// 量子化ビット数\n\t\t\tvar quanizationBits = 8;\n\t\t\t// 再生秒数\n\t\t\tthis.seconds = seconds;\n\t\t\t// dataチャンクのサイズ\n\t\t\tvar dataSize = this.chunkSize(seconds);\n\n\t\t\t// RIFFヘッダ\n\n\t\t\t// ファイルタイプ (0)\n\t\t\theader.push(\"RIFF\".charCodes());\n\t\t\t// ファイルサイズ - 8 (4 - )\n\t\t\theader.push((44 + dataSize - 8).toBytes(4));\n\t\t\t// RIFFのタイプ (8)\n\t\t\theader.push(\"WAVE\".charCodes());\n\n\t\t\t// fmtチャンク\n\n\t\t\t// FormatチャンクID　(12)\n\t\t\theader.push(\"fmt \".charCodes());\n\t\t\t// fmtチャンクのサイズ (16)\n\t\t\theader.push((16).toBytes(4));\n\t\t\t// フォーマットID (20)\n\t\t\theader.push((1).toBytes(2));\n\t\t\t// チャンネル数 (22)\n\t\t\theader.push(chunnels.toBytes(2));\n\t\t\t// サンプリング周波数 (24)\n\t\t\theader.push(this.samplingRate.toBytes(4));\n\t\t\t// データ速度 (28)\n\t\t\theader.push((samplingRate * chunnels * quanizationBits / 8).toBytes(4));\n\t\t\t// ブロックサイズ (32)\n\t\t\theader.push((chunnels * quanizationBits / 8).toBytes(2));\n\t\t\t// 量子化ビット数 (34)\n\t\t\theader.push(quanizationBits.toBytes(2));\n\n\n\t\t\t// dataチャンク\n\n\t\t\t// dataチャンクID (36)\n\t\t\theader.push(\"data\".charCodes());\n\t\t\t// dataチャンクのサイズ (40)\n\t\t\theader.push(dataSize.toBytes(4));\n\n\t\t\t// ヘッダセット\n\t\t\tthis.header = header.flatten();\n\n\t\t\t// 周波数データセット (44)\n\t\t\tthis.data = data;\n\n\t\t\treturn this;\n\n\t\t}\n\t\tWave.prototype = {\n\t\t\tsamplingRate: 22050,\n\t\t\tchunnels: 1,\n\t\t\tquanizationBits: 8,\n\t\t\tchunkSize: function(seconds) {\n\t\t\t\treturn ~~((seconds || this.seconds) * (this.samplingRate * this.chunnels * this.quanizationBits / 8));\n\t\t\t},\n\t\t\tbuild: function() {\n\t\t\t\tthis.base64 = \"data:audio/wav;base64,\" + this.header.concat(this.data).toBase64();\n\t\t\t\tthis.audio = new Audio(this.base64);\n\t\t\t\tthis.audio.load();\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tplay: function(volume) {\n\t\t\t\tif(!this.audio) this.build();\n\t\t\t\tif(volume) this.audio.volume = volume;\n\t\t\t\tthis.audio.play();\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tstop: function() {\n\t\t\t\tif(this.audio && this.audio.currentTime) {\n\t\t\t\t\tthis.audio.pause();\n\t\t\t\t\tthis.audio.currentTime = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\twindow.Wave = Wave;\n\n\t\t// 波形生成クラス\n\t\tfunction WaveGenerator() {\n\t\t\tthis.clean();\n\t\t\treturn this;\n\t\t};\n\t\twindow.WaveGenerator = WaveGenerator;\n\n\t\tWaveGenerator.prototype = {\n\t\t\tsamplingRate: Wave.prototype.samplingRate,\n\t\t\tminSeconds: 0.033  * 18,    // 最低でも保証する再生秒数(Firefoxなどであまりに短いWAVEファイルは再生されないため)\n\t\t\tclean: function() {\n\t\t\t\tthis.data = [];\n\t\t\t\tthis.phase = 0.0;\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tbuild: function(echo) {\n\t\t\t\tvar data = this.data.flatten();\n\t\t\t\tfor(var i = 0, l = data.length; i < l; i++) {\n\t\t\t\t\tdata[i] = data[i] * 24 + 128;\n\t\t\t\t}\n\t\t\t\t// あまったチャンクも無音で埋める\n\t\t\t\tfor(var i = data.length, l = Wave.prototype.chunkSize(this.minSeconds); i < l; i++) {\n\t\t\t\t\tdata[i] = 128;\n\t\t\t\t}\n\n\t\t\t\tvar realSeconds = data.length / this.samplingRate;\n\t\t\t\tvar logicalSeconds = [realSeconds, this.minSeconds].max();\n\t\t\t\treturn new Wave(data, logicalSeconds);\n\t\t\t},\n\t\t\tflat: function() {\n\t\t\t\treturn 1;\n\t\t\t},\n\t\t\tflatdown: function(x) {\n\t\t\t\treturn 1 - x;\n\t\t\t},\n\t\t\tflatup: function(x) {\n\t\t\t\treturn x;\n\t\t\t},\n\t\t\tcos: function(x) {\n\t\t\t\treturn Math.cos(Math.PI / 2.0 * x);\n\t\t\t},\n\t\t\t// freq: 周波数\n\t\t\t// secodns: 秒数\n\t\t\tsin: function(freq, seconds, envelove) {\n\t\t\t\tenvelove = envelove || WaveGenerator.prototype.flat;\n\t\t\t\tvar dataSize = Wave.prototype.chunkSize(seconds);\n\t\t\t\tvar data = new Array(dataSize);\n\t\t\t\tvar phase = this.phase;\n\n\t\t\t\tvar f = 2.0 * Math.PI / this.samplingRate * freq;\n\t\t\t\tvar d = 1 / dataSize;\n\t\t\t\tvar t = 0;\n\n\t\t\t\tvar c = 0;\n\t\t\t\tfor(var i = 0; i < dataSize; i++) {\n\t\t\t\t\tdata[i] = Math.sin(phase) * envelove(d);\n\t\t\t\t\tphase += f;\n\t\t\t\t\tt += d;\n\t\t\t\t}\n\n\t\t\t\tthis.data.push(data);\n\t\t\t\tthis.phase = phase;\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// freq: 周波数\n\t\t\t// secodns: 秒数\n\t\t\tsquare: function(freq, seconds, envelove) {\n\t\t\t\tenvelove = envelove || WaveGenerator.prototype.flat;\n\t\t\t\tvar dataSize = Wave.prototype.chunkSize(seconds);\n\t\t\t\tvar data = new Array(dataSize);\n\t\t\t\tvar phase = this.phase;\n\n\t\t\t\tvar f = 2.0 * Math.PI / this.samplingRate * freq;\n\t\t\t\tvar d = 1 / dataSize;\n\t\t\t\tvar t = 0;\n\n\t\t\t\tvar c = 0;\n\t\t\t\tfor(var i = 0; i < dataSize; i++) {\n\t\t\t\t\tdata[i] = (Math.sin(phase) < 0 ? -1 : 1) * envelove(d);\n\t\t\t\t\tphase += f;\n\t\t\t\t\tt += d;\n\t\t\t\t}\n\n\t\t\t\tthis.data.push(data);\n\t\t\t\tthis.phase = phase;\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// freq: 周波数\n\t\t\t// secodns: 秒数\n\t\t\tsaw: function(freq, seconds, envelove) {\n\t\t\t\tenvelove = envelove || WaveGenerator.prototype.flat;\n\t\t\t\tvar dataSize = Wave.prototype.chunkSize(seconds);\n\t\t\t\tvar data = new Array(dataSize);\n\t\t\t\tvar phase = this.phase;\n\n\t\t\t\tvar f = 2.0 * Math.PI / this.samplingRate * freq;\n\t\t\t\tvar d = 1 / dataSize;\n\t\t\t\tvar t = 0;\n\n\t\t\t\tvar c = 0;\n\t\t\t\tfor(var i = 0; i < dataSize; i++) {\n\t\t\t\t\tdata[i] = ((phase % (Math.PI * 2)) / (Math.PI * 2)) * envelove(d) - 0.5;\n\t\t\t\t\tphase += f;\n\t\t\t\t\tt += d;\n\t\t\t\t}\n\n\t\t\t\tthis.data.push(data);\n\t\t\t\tthis.phase = phase;\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// freq: 周波数\n\t\t\t// secodns: 秒数\n\t\t\ttriangle: function(freq, seconds, envelove) {\n\t\t\t\tenvelove = envelove || WaveGenerator.prototype.flat;\n\t\t\t\tvar dataSize = Wave.prototype.chunkSize(seconds);\n\t\t\t\tvar data = new Array(dataSize);\n\t\t\t\tvar phase = this.phase;\n\n\t\t\t\tvar f = 2.0 * Math.PI / this.samplingRate * freq;\n\t\t\t\tvar d = 1 / dataSize;\n\t\t\t\tvar t = 0;\n\n\t\t\t\tvar c = 0;\n\t\t\t\tfor(var i = 0; i < dataSize; i++) {\n\t\t\t\t\tvar m = (phase % (Math.PI * 2)) / (Math.PI * 2);\n\t\t\t\t\tdata[i] = (m < 0.5 ? m * 2 : 1 - m * 2) * envelove(d) - 0.5;\n\t\t\t\t\tphase += f;\n\t\t\t\t\tt += d;\n\t\t\t\t}\n\n\t\t\t\tthis.data.push(data);\n\t\t\t\tthis.phase = phase;\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tnoise: function(freq, seconds, envelove) {\n\t\t\t\tenvelove = envelove || WaveGenerator.prototype.flat;\n\t\t\t\tvar dataSize = Wave.prototype.chunkSize(seconds);\n\t\t\t\tvar data = new Array(dataSize);\n\t\t\t\tvar phase = this.phase;\n\n\t\t\t\tvar f = 2.0 * Math.PI / this.samplingRate * freq;\n\t\t\t\tvar d = 1 / dataSize;\n\t\t\t\tvar t = 0;\n\n\t\t\t\tvar c = 0;\n\t\t\t\tfor(var i = 0; i < dataSize; i++) {\n\t\t\t\t\tdata[i] = (Math.random() * 2 - 1) * envelove(d) - 0.5;\n\t\t\t\t\tphase += f;\n\t\t\t\t\tt += d;\n\t\t\t\t}\n\n\t\t\t\tthis.data.push(data);\n\t\t\t\tthis.phase = phase;\n\t\t\t\treturn this;\n\t\t\t}\n\t\t};\n\t})();\n\n\n\t// マウス操作をイベントドリブンじゃないかのように振舞わせる\n\tfunction Mouse(d) {\n\t\tvar self = this;\n\t\tself._lbdown = false;\n\t\tself.__lbdown = false;\n\t\tself._px = 0;\n\t\tself._py = 0;\n\t\tself.p = [0, 0];\n\t\tself.op = [0, 0];\n\t\tdocument.addEventListener(\"mouseup\", function(e) {\n\t\t\tself._lbdown = false;\n\t\t\tself._count = 0;\n\t\t}, false);\n\t\tdocument.addEventListener(\"mousemove\", function(e) {\n\t\t\tself._px = e.clientX / d.width - d.left2d;\n\t\t\tself._py = e.clientY / d.height - d.top2d;\n\t\t}, false);\n\t\tdocument.addEventListener(\"mousedown\", function(e) {\n\t\t\tself._lbdown = true;\n\t\t\tself._count = 0;\n\t\t}, false);\n\t}\n\tMouse.prototype = {\n\t\tflush: function() {\n\t\t\tthis.lbdown = this._lbdown;\n\t\t\tthis.p = [this._px, this._py];\n\t\t\tthis.sp = this.op.sub(this.p);\n\t\t\tthis.op = this.p.clone();\n\t\t\tif(this.lbdown) {\n\t\t\t\tthis._count++;\n\t\t\t}\n\t\t\tthis.lbdowned = this._count == 1;\n\t\t\tthis.lbupped = this.__lbdown && !this._lbdown;\n\t\t\tthis.__lbdown = this._lbdown;\n\t\t}\n\t}\n\twindow.Mouse = Mouse;\n\n\tfunction Key(code) {\n\t\tthis.code = code;\n\t}\n\tKey.prototype = {\n\t\tflush: function() {\n\t\t\tthis.upped = this._upped;\n\t\t\tthis.downed = this._downed;\n\t\t\tthis.pressing = this._pressing;\n\n\t\t\tthis._upped = false;\n\t\t\tthis._downed = false;\n\t\t},\n\t\tenablePrevent: function() {\n\t\t\tthis.prevent = true;\n\t\t},\n\t\tdisablePrevent: function() {\n\t\t\tthis.prevent = false;\n\t\t},\n\t\tkeyup: function() {\n\t\t\tthis._upped = true;\n\t\t\tthis._pressing = false;\n\t\t},\n\t\tkeydown: function() {\n\t\t\tthis._downed = true;\n\t\t\tthis._pressing = true;\n\t\t},\n\t};\n\n\tfunction Keyboard() {\n\t\tthis.keys = $R(1, 255).map(function(x) {\n\t\t\treturn new Key(x);\n\t\t});\n\n\t\tvar self = this;\n\t\tdocument.addEventListener(\"keyup\", function(e) {\n\t\t\tkey = self.keys[e.keyCode];\n\t\t\tkey.keyup();\n\t\t\tif(key.prevent) {\n\t\t\t\te.preventDefault();\n\t\t\t\te.returnValue = false;\n\t\t\t}\n\t\t}, false);\n\t\tdocument.addEventListener(\"keydown\", function(e) {\n\t\t\tkey = self.keys[e.keyCode];\n\t\t\tkey.keydown();\n\t\t\tif(key.prevent) {\n\t\t\t\te.preventDefault();\n\t\t\t\te.returnValue = false;\n\t\t\t}\n\t\t}, false);\n\t}\n\tKeyboard.prototype = {\n\t\tflush: function() {\n\t\t\tthis.keys.invoke(\"flush\");\n\t\t},\n\t\tat: function(key) {\n\t\t\tif(!/\\d+/.match(key)) {\n\t\t\t\treturn this.keys[key.charCodeAt(0)];\n\t\t\t} else {\n\t\t\t\treturn this.keys[key];\n\t\t\t}\n\t\t},\n\t};\n\twindow.Keyboard = Keyboard;\n\n\t// メモ化\n\tObject.extend(Function.prototype, {\n\t\tmemoize: function() {\n\t\t\tvar memo = [];\n\t\t\tvar fn = this;\n\t\t\treturn function() {\n\t\t\t\tvar key = Array.prototype.join.apply(arguments, [\",\"]);\n\t\t\t\tif(memo[key] === undefined) {\n\t\t\t\t\tmemo[key] = fn.apply(fn, arguments);\n\t\t\t\t}\n\t\t\t\treturn memo[key];\n\t\t\t}\n\t\t},\n\t});\n\n\n\t// 再現性のある乱数生成\n\tvar randomGen = function() {\n\t\tvar x = 1;\n\t\treturn function(m) {\n\t\t\tm = m || 1;\n\t\t\tx = (x * 22695477 + 1) & 0xffffffff;\n\t\t\treturn m * (((x >>> 16) & 0x7fff) / 0x7fff);\n\t\t};\n\t};\n\twindow.randomGen = randomGen;\n\n\n\tvar smoothNoise = function(x) {\n\t\treturn Math.random() * x / 2\n\t\t\t+ Math.random() * (x - 1) / 4\n\t\t\t+ Math.random() * (x + 1) / 4\n\t\t\t;\n\t};\n\tvar interpolate = function(a, b, x) {\n\t\tvar ft = x * Math.PI;\n\t\tvar f =  (1 - Math.cos(ft)) * 0.5;\n\n\t\treturn a * (1 - f) + b * f;\n\t}\n\n\tvar interpolatedNoise = function(x) {\n\t\tvar ix = ~~x;\n\t\tvar fx = (x - ix);\n\n\t\tvar v1 = smoothNoise(ix);\n\t\tvar v2 = smoothNoise(ix + 1);\n\n\t\treturn interpolate(v1, v2, fx);\n\t}\n\n\tvar pelinNoise = function(x) {\n\t\tvar total = 0;\n\t\tvar p = 1.8;\n\t\tvar n = 1;\n\n\t\tfor(var i = 0; i < n; i++) {\n\t\t\tvar freq = Math.pow(2.0, i);\n\t\t\tvar amplitude = Math.pow(p, i);\n\n\t\t\ttotal += interpolatedNoise(x * freq) * amplitude * 0.06;\n\t\t}\n\n\t\treturn total;\n\t}\n\twindow.pelinNoise = pelinNoise\n})();\n// vim:sw=4:ts=4\n"},"thumbnail":{"wide":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/s/Y/5/sY52_w.jpg","465":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/s/Y/5/sY52.jpg","100":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/s/Y/5/sY52_100.jpg"},"description_html":"","modified_date":"2012-11-07 23:48:27","uid":"sY52","created_date":"2012-10-08 21:21:07","path":"sY52","description":"","statistic":{"forked":"0","favorite":"0","pageview":"485"},"user":{"icon":"http://jsdo-static-contents.s3.amazonaws.com/images/icon/b/4/2/c/b42cc3dd3312505b680411b3ead08e2dbc4192e4_100.jpg","name":"crispy"},"url":"http://jsdo.it/crispy/sY52","title":"misc-ext"}