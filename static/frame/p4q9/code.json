{"source":{"css":"body { background-color: #000000; margin: 0px; overflow: hidden; }","html":"<canvas id='world'></canvas>","lisence":"MIT","js":"// forked from t02uk's \"water cube\" http://jsdo.it/t02uk/3Ved\n(function() {\n  \n  // 自前ライブラリ擬似3D対応\n  DCore.prototype.org_toScr = DCore.prototype.toScr;\n  DCore.prototype.toScr = function(p) {\n    if(p.length === 3)\n      return this.org_toScr([\n        (p[0] - p[2]       ) * 0.40 + 0.5,\n        (p[0] + p[2] + p[1]) * 0.40 + 0.4\n      ]);\n    else return this.org_toScr(p);\n  };\n  DCore.prototype.toWorld2dParallel = function(ps, f) {\n    return ps;\n  };\n  var d = new DCore().init();\n  \n  // 水のつなぎ部分\n  function Joint(x, y, z) {\n    this.x = x || 0.0;\n    this.y = y || 0.0;\n    this.z = z || 0.0;\n    this.sx = 0.0;\n    this.sy = 0.0;\n    this.sz = 0.0;\n    return this;\n  }\n  \n  // 水\n  function Water() {\n    return this;\n  }\n  Water.prototype = {\n    // 格子密度\n    density: 21,\n    init: function() {\n  \n      // 格子をちりばめ、初期化\n      var joints = [];\n      this.joints = joints;\n      for(var i = 0; i < this.density; i++) {\n        joints[i] = [];\n        for(var j = 0; j < this.density; j++) {\n          joints[i][j] = new Joint(\n            (i - 10) * 0.05,\n            0.0,\n            (j - 10) * 0.05\n          );\n        }\n      }\n            \n      return this;\n    },\n    \n    act: function(clicked, px, py) {\n      var joints = this.joints;\n      var copied = joints.clone();\n      \n      // 移動速度を計算\n      for(var i = 0; i < this.density; i++) {\n        for(var j = 0; j < this.density; j++) {\n          var self =   (copied[i    ] ? copied[i    ][j    ] : null);\n          var left =   (copied[i - 1] ? copied[i - 1][j    ] : null);\n          var right =  (copied[i + 1] ? copied[i + 1][j    ] : null);\n          var top =    (copied[i    ] ? copied[i    ][j - 1] : null);\n          var bottom = (copied[i    ] ? copied[i    ][j + 1] : null);\n          \n          // 前後左右との距離から、速度を計算する(距離が長いほど強く引っ張られる)\n          var sides = [left, right, top, bottom];\n          for(var k = 0, l = sides.length; k < l; k++) {\n            var side = sides[k];\n            if(!side) continue;\n            \n            joints[i][j].sx -= (self.x - side.x) * 0.5;\n            joints[i][j].sy -= (self.y - side.y) * 0.5;\n            joints[i][j].sz -= (self.z - side.z) * 0.5;\n          }\n          \n          joints[i][j].sy -= (self.y - 0.0) * 0.03;\n        }\n      }\n      \n      // 速度を計算\n      for(var i = 0; i < this.density; i++) {\n        for(var j = 0; j < this.density; j++) {\n          \n          var self = joints[i][j];\n          // 摩擦\n          self.sx *= 0.995;\n          self.sy *= 0.980;\n          self.sz *= 0.995;\n          \n          // 位置計算\n          self.y += self.sy;\n          \n          \n          // 壁際\n          if(i === 0 || i === this.density - 1\n             || j === 0 || j === this.density- 1) {\n            self.sy *= 0.997;\n            continue;\n          }\n\n          self.x += self.sx;\n          self.z += self.sz;\n          \n          // マウス座標と描画座標の差異を求め、\n          // 一定未満の距離であれば重力方向のベクトルを加える(クリックされたとき)\n          var p1 = d.toScr([self.x, 0.0, self.z]);\n          var p2 = d.toScr([px, py]);          \n          if(clicked) {\n            if((p1[0] - p2[0]) * (p1[0] - p2[0]) +\n              (p1[1] - p2[1]) * (p1[1] - p2[1]) < 400.0) {\n                self.sy += 0.06;\n            }\n          }\n        }\n      }\n      \n      return this;\n      \n    },\n    \n    draw: function() {\n      \n      var joints = this.joints;\n      var density = this.density;\n      \n      // 水槽部分の柱を描く\n      d.blend(\"lighter\")\n       .alpha(0.03)\n       .rgb(0x55, 0x55, 0x55)\n      ;\n\n      // 向かって左の柱\n      var p = joints[0][density - 1];\n      d.quads([\n        [p.x, p.y, p.z],\n        [p.x, 1.0, p.z],\n        [p.x, 1.0, p.z],\n        [p.x, p.y, p.z]\n      ]).stroke();\n\n      // 真ん中手前\n      p = joints[density - 1][density - 1];\n      d.quads([\n        [p.x, p.y, p.z],\n        [p.x, 1.0, p.z],\n        [p.x, 1.0, p.z],\n        [p.x, p.y, p.z]\n      ]).stroke();\n\n      // 向かって右\n      var p = joints[density - 1][0];\n      d.quads([\n        [p.x, p.y, p.z],\n        [p.x, 1.0, p.z],\n        [p.x, 1.0, p.z],\n        [p.x, p.y, p.z]\n      ]).stroke();\n      \n\n\n      // 地面を描く\n      for(var i = 1; i < this.density; i++) {\n        for(var j = 1; j < this.density; j++) {\n          var p1 = joints[i    ][j    ];\n          var p2 = joints[i - 1][j    ];\n          var p3 = joints[i - 1][j - 1];\n          var p4 = joints[i    ][j - 1];\n          \n          // 水面と視野角の差異を算出・・・できてる？\n          var dx = p3.x - p1.x;\n          var dy = p3.y - p1.y;\n          var dz = p3.z - p1.z;\n          var dxy = Math.sqrt(dx * dx + dz * dz);\n          var theta = Math.atan2(dxy, dy);\n          \n          // 差異を元に、てかり具合を計算\n          var pl = 0.20 * Math.sin(theta - 0.7);\n          \n          // 距離\n          var uv = d.toScr([p1.x, p1.y, p1.z]);\n          \n          // 奥(上)に行くほど、暗めに\n          var el = 0.0006 * uv[1];\n\n          var y = [p1.y, p2.y, p3.y, p4.y].inject(0, function(i, e) { return i + e; } ) / 4;\n          if(y > 0.1) {\n            var h = 0.6;\n            var s = 0.7;\n            var v = pl + el + y * 0.7 + 0.0;\n          } else {\n            var h = -y * 1.5 + 0.24;\n            if(h > 0.6) h = 0.6;\n            var s = 0.7;\n            var v = pl + el - y * 0.7 + 0.1;\n          }\n          d.quads([\n            [p1.x, p1.y, p1.z],\n            [p2.x, p2.y, p2.z],\n            [p3.x, p3.y, p3.z],\n            [p4.x, p4.y, p4.z]\n          ])\n          .hsv(h, s, v)\n          .blend(\"source-over\").alpha(1.0).fill().stroke()\n          ;\n        }\n      }\n    \n \n      // 左側の手前の壁描く\n      var ps = joints.map(function(e) {\n        var joint = e[density - 1];\n        return [joint.x,\n                joint.y,\n                joint.z];\n      });\n      d.quads(\n        ps.concat(\n          ps.map(function(e) {\n            return [e[0], 1.0, e[2]];\n          }).reverse()\n        )\n      )\n      .rgb(0x14, 0x11, 0x11)\n      .blend(\"source-over\").alpha(0.65)\n      .fill()\n      ;\n      \n      // 右側の手前の壁を描く\n      var ps = joints[density - 1].map(function(e) {\n        var joint = e;\n        return [joint.x,\n                joint.y,\n                joint.z];\n      });\n      d.quads(\n        ps.concat(\n          ps.map(function(e) {\n            return [e[0], 1.0, e[2]];\n          }).reverse()\n        )\n      )\n      .rgb(0x00, 0x11, 0x22)\n      .blend(\"source-over\").alpha(0.45)\n      .fill()\n      ;\n\n      \n      return this;\n    }\n  };\n  \n\n\n  \n  var main = function() {\n\n    var water = new Water().init();\n\n    \n    // 各種ハンドラ設定\n    var px, py;\n    var lbdown = false;\n    document.addEventListener(\"mousemove\", function(e) {\n      px = e.clientX / d.width - d.left2d;\n      py = e.clientY / d.height - d.top2d;\n    }, false);\n    document.addEventListener(\"mousedown\", function(e) {\n      lbdown = true;\n    }, false);\n    document.addEventListener(\"mouseup\", function(e) {\n      lbdown = false;\n    }, false);\n    \n    \n    (function() {\n      \n      // 背景を初期化\n      var ctx = d.ctx;\n      var p1 = d.toScr([0.5, 0.0]);\n      var p2 = d.toScr([0.5, 1.0]);\n\n      var grad =ctx.createLinearGradient(\n        p1[0], p1[1],\n        p2[0], p2[1]\n      );\n      grad.addColorStop(0, \"rgb(108, 108, 108)\");\n      grad.addColorStop(1, \"rgb(138, 148, 138)\");\n      \n      ctx.fillStyle = grad;\n      \n      d\n        .blend(\"source-over\")\n        .alpha(1.0)\n        .fillBack();\n      \n      // 水\n      water.act(lbdown, px, py);\n      water.draw();\n      \n      window.setTimeout(arguments.callee, 33);\n    })();\n  };\n \n  main();\n})();"},"thumbnail":{"wide":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/p/4/q/p4q9_w.jpg","465":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/p/4/q/p4q9.jpg","100":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/p/4/q/p4q9_100.jpg"},"description_html":"地形っぽいの<br />\n・マウス対応","parent":{"thumbnail":{"wide":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/3/V/e/3Ved_w.jpg","465":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/3/V/e/3Ved.jpg","100":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/3/V/e/3Ved_100.jpg"},"modified_date":"2010-12-26 20:06:58","uid":"3Ved","created_date":"2010-09-25 16:01:06","path":"3Ved","description":"えせ三次元テスト\n・FireFox対応、Chrome推奨\n・マウス対応","statistic":{"forked":"5","favorite":"9","pageview":"5195"},"user":{"icon":"http://jsdo-static-contents.s3.amazonaws.com/images/icon/b/4/2/c/b42cc3dd3312505b680411b3ead08e2dbc4192e4_100.jpg","name":"crispy"},"url":"http://jsdo.it/crispy/3Ved","title":"water cube"},"modified_date":"2010-12-26 20:07:23","uid":"p4q9","created_date":"2010-12-11 15:57:25","path":"p4q9","description":"地形っぽいの\n・マウス対応","statistic":{"forked":"0","favorite":"1","pageview":"1532"},"url":"http://jsdo.it/crispy/p4q9","user":{"icon":"http://jsdo-static-contents.s3.amazonaws.com/images/icon/b/4/2/c/b42cc3dd3312505b680411b3ead08e2dbc4192e4_100.jpg","name":"crispy"},"title":"land cube forked from: water cube"}