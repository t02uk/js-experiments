{"source":{"css":"body { background-color: #000000; margin: 0px; overflow: hidden; }","html":"<canvas id='world'></canvas>","lisence":"MIT","js":"// forked from Event's \"Instrument\" http://jsdo.it/Event/jam_session4\n/*\n※お題のプログラムで使用している音源の、当イベント以外での使用を禁じます。\nそれ以外の音源の使用は自由ですので、他に使用した音源がありましたら、権利をご確認の上各自ご用意下さい。\nなお、当イベントでは、音源のアップロード場所として、こえ部(http://koebu.com/)のご利用を推奨いたします。\n* mp3 files used in the code are not allowed to use outside wonderfl.net/jsdo.it\nYou're free to use your own sound source for JAM, if you have rights to use it.\nWe recommend soundcloud.com to upload music.\n\n\n* ogg files are available from\n\nhttp://jsrun.it/sounds/event/jam/drop1.ogg\nhttp://jsrun.it/sounds/event/jam/drop2.ogg\nhttp://jsrun.it/sounds/event/jam/drop3.ogg\nhttp://jsrun.it/sounds/event/jam/drop4.ogg\nhttp://jsrun.it/sounds/event/jam/drop5.ogg\nhttp://jsrun.it/sounds/event/jam/drop6.ogg\nhttp://jsrun.it/sounds/event/jam/drop7.ogg\nhttp://jsrun.it/sounds/event/jam/drop8.ogg\nhttp://jsrun.it/sounds/event/jam/drop9.ogg\nhttp://jsrun.it/sounds/event/jam/drop10.ogg\n\n* mp3 files are available from\n\nhttp://jsrun.it/sounds/event/jam/drop1.mp3\nhttp://jsrun.it/sounds/event/jam/drop2.mp3\nhttp://jsrun.it/sounds/event/jam/drop3.mp3\nhttp://jsrun.it/sounds/event/jam/drop4.mp3\nhttp://jsrun.it/sounds/event/jam/drop5.mp3\nhttp://jsrun.it/sounds/event/jam/drop6.mp3\nhttp://jsrun.it/sounds/event/jam/drop7.mp3\nhttp://jsrun.it/sounds/event/jam/drop8.mp3\nhttp://jsrun.it/sounds/event/jam/drop9.mp3\nhttp://jsrun.it/sounds/event/jam/drop10.mp3\n*/\n\n(function() {\n\n  // 配列 -> base64変換\n  (function() {\n    // 参考 http://github.com/dankogai/js-base64\n    var base64Table = (function() {\n      var raw = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n      return $R(0, raw.length - 1).map(function(i) {\n        return raw.charAt(i);\n      });\n    })();\n\n    Array.prototype.toBase64 = function() {\n      var bt = base64Table;\n      var bin = this;\n      var padlen = 0;\n      while(bin.length % 3) {\n        bin.push(0);\n        padlen++;\n      }\n\n      var b64 = [];\n      for(var i = 0, l = bin.length; i < l; i += 3) {\n        var c = (bin[i + 0] << 16)\n              | (bin[i + 1] <<  8)\n              | (bin[i + 2] <<  0)\n              ;\n        b64.push(\n          bt[(c >>> 18) & 63],\n          bt[(c >>> 12) & 63],\n          bt[(c >>>  6) & 63],\n          bt[(c >>>  0) & 63]\n        );\n      }\n\n      while(padlen--) b64[b64.length - padlen - 1] = '=';\n      return b64.join(\"\");\n    };\n    String.prototype.charCodes = function() {\n      var result = new Array(this.length);\n      for(var i = 0, l = this.length; i < l; i++) {\n        result[i] = this.charCodeAt(i);\n      }\n      return result;\n    };\n    Number.prototype.toBytes = function(size) {\n      var size = size || 4;\n      var result = new Array(size);\n      for(var i = 0; i < size; i++) {\n        result[i] = (this >>> (i << 3) & 0xff);\n      }\n      return result;\n    };\n  })();\n\n\n  // Wave Data-Scheme生成用\n  //   参考 http://hooktail.org/computer/index.php?Wave%A5%D5%A5%A1%A5%A4%A5%EB%A4%F2%C6%FE%BD%D0%CE%CF%A4%B7%A4%C6%A4%DF%A4%EB\n  (function() {\n    function Wave(data, seconds) {\n      var header = [];\n\n      // サンプリングレート\n      var samplingRate = this.samplingRate;\n      // チャンネル数\n      var chunnels = 1;\n      // 量子化ビット数\n      var quanizationBits = 8;\n      // 再生秒数\n      this.seconds = seconds;\n      // dataチャンクのサイズ\n      var dataSize = this.chunkSize(seconds);\n\n      // RIFFヘッダ\n\n      // ファイルタイプ (0)\n      header.push(\"RIFF\".charCodes());\n      // ファイルサイズ - 8 (4 - )\n      header.push((44 + dataSize - 8).toBytes(4));\n      // RIFFのタイプ (8)\n      header.push(\"WAVE\".charCodes());\n\n      // fmtチャンク\n\n      // FormatチャンクID　(12)\n      header.push(\"fmt \".charCodes());\n      // fmtチャンクのサイズ (16)\n      header.push((16).toBytes(4));\n      // フォーマットID (20)\n      header.push((1).toBytes(2));\n      // チャンネル数 (22)\n      header.push(chunnels.toBytes(2));\n      // サンプリング周波数 (24)\n      header.push(this.samplingRate.toBytes(4));\n      // データ速度 (28)\n      header.push((samplingRate * chunnels * quanizationBits / 8).toBytes(4));\n      // ブロックサイズ (32)\n      header.push((chunnels * quanizationBits / 8).toBytes(2));\n      // 量子化ビット数 (34)\n      header.push(quanizationBits.toBytes(2));\n\n\n      // dataチャンク\n\n      // dataチャンクID (36)\n      header.push(\"data\".charCodes());\n      // dataチャンクのサイズ (40)\n      header.push(dataSize.toBytes(4));\n\n      // ヘッダセット\n      this.header = header.flatten();\n\n      // 周波数データセット (44)\n      this.data = data;\n\n      return this;\n\n    }\n    Wave.prototype = {\n      samplingRate: 22050,\n      chunnels: 1,\n      quanizationBits: 8,\n      chunkSize: function(seconds) {\n        return ~~((seconds || this.seconds) * (this.samplingRate * this.chunnels * this.quanizationBits / 8));\n      },\n      build: function() {\n        this.base64 = \"data:audio/wav;base64,\" + this.header.concat(this.data).toBase64();\n        this.audio = new Audio(this.base64);\n        this.audio.load();\n        return this;\n      },\n      play: function(volume) {\n        if(!this.audio) this.build();\n        if(volume) this.audio.volume = volume;\n        this.audio.play();\n        return this;\n      }\n    };\n    window.Wave = Wave;\n\n    // 波形生成クラス\n    function WaveGenerator() {\n      return this;\n    };\n    window.WaveGenerator = WaveGenerator;\n\n    WaveGenerator.prototype = {\n      samplingRate: Wave.prototype.samplingRate,\n      minSeconds: 0.033  * 18,    // 最低でも保証する再生秒数(Firefoxなどであまりに短いWAVEファイルは再生されないため)\n      clean: function() {\n        this.data = [];\n        this.phase = 0.0;\n      },\n      build: function() {\n        var data = this.data.flatten();\n        // あまったチャンクも無音で埋める\n        for(var i = data.length, l = Wave.prototype.chunkSize(this.minSeconds); i < l; i++) {\n          data[i] = 128;\n        }\n        return data;\n      },\n      // freq, 周波数\n      // seconds: 秒数\n      // m: モジュレータ周波数(キャリア周波数との比を指定)\n      fmsin: function(freq, seconds, m) {\n        var dataSize = Wave.prototype.chunkSize(seconds);\n        var data = new Array(dataSize);\n        var phase = this.phase;\n\n        var freqStart = freq[0];\n        var freqEnd = freq[1] || freq[1];\n\n        // 計算式怪しい\n        var f =  this.samplingRate * 2.0 * Math.PI / freqStart;\n        var df =  (this.samplingRate * 2.0 * Math.PI / freqEnd - f) / dataSize;\n\n        for(var i = 0; i < dataSize; i++) {\n          // モジューレータの変調指数がなげやり\n          data[i] = Math.sin(phase + Math.sin(phase * m) * 10) * 32;\n          phase += f;\n          f += df;\n          data[i] += 128;\n        }\n\n        this.data.push(data);\n        this.phase = phase;\n        return this;\n      }\n    };\n  })();\n\n\n  var d = new DCore().init();\n\n  // リボン\n  function Ribon() {\n    this.init();\n    this.ps = [];\n    this.dispCount = 0;\n    this.fixed = false;\n    return this;\n  }\n  Ribon.prototype = {\n    init: function(x, y) {\n      this.ps = [];\n      this.life = 4;\n      if(x && y) this.ps.push([x, y]);\n      return this;\n    },\n    countMax: ~~(4.0 / 0.033),\n    append: function(x, y) {\n      if(this.ps.length === 0) this.hue = (x * y * 7) + x + y;\n      this.ps.push([x, y]);\n      return this;\n    },\n    fix: function() {\n      this.fixed = true;\n      return this;\n    },\n    setAudio: function(audio) {\n      this.audio = audio;\n      return this;\n    },\n    isKilled: function() {\n      return (this.life <= 0) && (this.dispCount + 1 >= this.ps.length);\n    },\n    act: function() {\n      if(this.fixed) {\n        if(this.dispCount === 0) {\n          if(this.life !== 0) {\n            this.audio.play(this.life / 4);\n          }\n          this.life--;\n        }\n        if(this.fixed) this.dispCount++;\n        if(this.dispCount > this.countMax) {\n          this.dispCount = 0;\n        }\n      }\n    },\n    draw: function() {\n      var self = this;\n\n      // line\n      ppool.push([0, function(e) {\n        var head = self.life !== 0 ? 0 : self.dispCount;\n\n        d\n         .lineWidth(0.005)\n         .hsl(self.hue, 0.8, 0.6)\n         .line(self.ps.slice(head, self.ps.length))\n         .stroke()\n        ;\n      }]);\n\n      var c = this.dispCount\n      if(this.dispCount < this.ps.length) {\n\n        if(this.fixed) {\n          var r = 0.03 + 0.04 * Math.random();\n          if(this.dispCount == this.ps.length - 1) r *= 2.0;\n          if(this.dispCount == this.ps.length - 2) r *= 2.0;\n\n          var r2 = r * (0.6);\n          if(this.dispCount == this.ps.length - 1) r2 *= 0.5;\n          if(this.dispCount == this.ps.length - 2) r2 *= 0.5;\n\n          // outline -> clear -> inner luminous\n          ppool.push([10, function(e) {\n            d\n             .hsl(self.hue, 0.8, 0.6)\n             .circle(self.ps[c], r)\n             .fill()\n            ;\n          }], [20, function(e) {\n            d\n             .rgb(0xff, 0xff, 0xff)\n             .circle(self.ps[c], r * (0.9))\n             .fill()\n            ;\n          }], [30, function(e) {\n            d\n             .hsl(self.hue, 0.9, 0.9)\n             .circle(self.ps[c], r2)\n             .fill()\n            ;\n          }]);\n        }\n      } else {\n        if(this.fixed) {\n          var r = 0.03 + 0.02;\n          var r2 = r * (0.5);\n\n          var rad = 1.0 - (this.countMax - this.dispCount) / (this.countMax - this.ps.length);\n\n          // outline -> clear -> inner luminous\n          ppool.push([10, function(e) {\n            d\n             .hsl(self.hue, 0.8, 0.6)\n             .circle(self.ps[0], r)\n             .fill()\n            ;\n          }], [20, function(e) {\n            d\n             .rgb(0xff, 0xff, 0xff)\n             .circle(self.ps[0], r * (0.9))\n             .fill()\n           ;\n          }], [30, function(e) {\n            d\n             .hsl(self.hue, 0.8, 0.8)\n             .lineWidth(0.015)\n             .circle(self.ps[0], r2, 0.0, rad.toRadian())\n             .stroke();\n         }]);\n        }\n      }\n\n      return this;\n    }\n  };\n\n  // リボンのマネージャ\n  function Ribons() {\n    this.init();\n    return this;\n  }\n  Ribons.prototype = {\n    init: function() {\n      this.rs = [];\n      return this;\n    },\n    append: function(ribbon) {\n      this.rs.push(ribbon);\n      return this;\n    },\n    act: function() {\n      this.rs = this.rs.select(function(e) {\n        return !e.isKilled();\n      });\n\n      this.rs.each(function(e) {\n        e.act();\n      });\n      return this;\n    },\n    draw: function() {\n      this.rs.each(function(e) {\n        e.draw();\n      });\n      return this;\n    }\n  };\n\n\n  var rs = new Ribons().init();\n\n  var r = null;\n  var wave = null;\n  var ppool = [];\n\n  var main = function() {\n\n    // 各種ハンドラ設定\n    var px = 0, py = 0;\n    var lbdown = false;\n    var lbcount = 0;\n    var nl = new WaveGenerator();\n    var freeHand = false;\n\n    document.addEventListener(\"keydown\", function(e) {\n      if(13 == e.keyCode) freeHand ^= true;\n      return true;\n    }, false);\n    document.addEventListener(\"mousemove\", function(e) {\n      px = e.clientX / d.width - d.left2d;\n      py = e.clientY / d.height - d.top2d;\n      if(!freeHand) {\n        px = Math.round(px * 16) / 16;\n        py = Math.round(py * 16) / 16;\n      }\n    }, false);\n    document.addEventListener(\"mousedown\", function(e) {\n      lbdown = true;\n      r = new Ribon();\n      nl.clean();\n    }, false);\n    document.addEventListener(\"mouseup\", function(e) {\n      lbdown = false;\n      if(r) {\n        var wave = new Wave(nl.build(), [WaveGenerator.prototype.minSeconds, lbcount * 0.033].max());\n        wave.build();\n        r.setAudio(wave);\n\n        rs.append(r.fix());\n      }\n      lbcount = 0;\n\n      r = null;\n      nl.clean();\n    }, false);\n\n\n    var opx, opy;\n    (function() {\n      // back ground\n      d\n       .rgb(0xff, 0xff, 0xff)\n       .fillBack();\n\n      if(!freeHand) {\n        // solid\n        $R(1, 16 - 1).map(function(e) {\n          return e / 16;\n        }).map(function(e) {\n          d.lineWidth(0.001)\n           .rgb(0x88, 0x88, 0x88)\n           .line([[0.0, e], [1.0, e]])\n           .stroke()\n          ;\n          return e;\n        }).map(function(e) {\n          d.lineWidth(0.001)\n           .rgb(0x88, 0x88, 0x88)\n           .line([[e, 0], [e, 1]])\n           .stroke()\n          ;\n          return e;\n        });\n      }\n\n      if(r) {\n        if(lbdown) {\n          r.append(px, py);\n          if(lbcount >= 1) {\n            var pitch = Math.pow(420, (1.0 +  py));\n            var m = Math.pow(2, px * 16 - 8);\n            nl.fmsin([pitch, pitch], 0.033, m);\n          }\n        }\n        r.act();\n        r.draw();\n      }\n      rs.act();\n      rs.draw();\n\n\n      opx = px;\n      opy = py;\n      if(lbdown) lbcount++;\n\n      ppool.sortBy(function(e) {\n        return e[0];\n      }).each(function(e) {\n        return e[1]();\n      });\n      ppool = [];\n\n      window.setTimeout(arguments.callee, 33);\n    })();\n  };\n\n  main();\n})();\n// vim:sw=2:ts=2\n\n"},"thumbnail":{"wide":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/s/B/g/sBge_w.jpg","465":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/s/B/g/sBge.jpg","100":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/s/B/g/sBge_100.jpg"},"description_html":"R2-D2に歌わせるボーカロイド","parent":{"thumbnail":{"wide":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/s/z/J/szJ7_w.jpg","465":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/s/z/J/szJ7.jpg","100":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/s/z/J/szJ7_100.jpg"},"modified_date":"2010-10-08 20:12:55","uid":"szJ7","created_date":"2010-10-08 19:06:10","path":"jam_session4","description":"※お題のプログラムで使用している音源の、当イベント以外での使用を禁じます。\nそれ以外の音源の使用は自由ですので、他に使用した音源がありましたら、権利をご確認の上各自ご用意下さい。\nなお、当イベントでは、音源のアップロード場所として、こえ部(http://koebu.com/)のご利用を推奨いたします。\n* mp3 files used in the code are not allowed to use outside wonderfl.net/jsdo.it\nYou're free to use your own sound source for JAM, if you have rights to use it.\nWe recommend soundcloud.com to upload music.","statistic":{"forked":"14","favorite":"1","pageview":"8475"},"user":{"icon":"http://jsdo-static-contents.s3.amazonaws.com/images/icon/6/7/b/5/67b56e45ea501eedd27eec70435d26553c0eace6_100.jpg","name":"jsdo.it_team"},"url":"http://jsdo.it/jsdo.it_team/jam_session4","title":"Instrument"},"modified_date":"2011-07-17 16:42:19","uid":"sBge","created_date":"2010-10-31 18:26:17","path":"sBge","description":"R2-D2に歌わせるボーカロイド","statistic":{"forked":"2","favorite":"3","pageview":"4128"},"url":"http://jsdo.it/crispy/sBge","user":{"icon":"http://jsdo-static-contents.s3.amazonaws.com/images/icon/b/4/2/c/b42cc3dd3312505b680411b3ead08e2dbc4192e4_100.jpg","name":"crispy"},"title":"r2droid"}