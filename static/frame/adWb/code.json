{"source":{"css":"* {\n  margin: 0px;\n  padding: 0px;\n}\nbody {\n  background: #000;\n}\n\ncanvas {\n  position: relative;\n  left: 0px;\n  top: 0px;\n  width: 100%;\n  height: 95%;\n  /*overflow: hidden;*/\n}\n","html":"<canvas id=\"world\" width=\"465\" height=\"465\"></canvas>\n<div id=\"play\">Loading...</div>","lisence":"MIT","js":"function Player() {\n  var context = new webkitAudioContext();\n\n  var source = context.createBufferSource();\n  var gainNode = context.createGainNode();      //音量変えるノード\n  var analyserNode = context.createAnalyser();\n    \n  gainNode.gain.value = 0.5;\n\n  source.connect(gainNode);\n  gainNode.connect(analyserNode);           //destinationが最終的な出力\n  analyserNode.connect(context.destination);    //RealTimeAnalyserの出力は必要かどうか意見が求められているそう\n\n  var request = new XMLHttpRequest();\n  var url = \"http://jsrun.it/static/assets/svggirl/01/svg_girl_theme.ogg\";\n\n  request.open(\"GET\", url, true);\n  request.responseType = \"arraybuffer\";\n\n  request.onload = function() {\n    $(\"#play\").html(\"<input type='button' onclick='player.play()' value='Play'>\");\n  };\n  request.send();\n    \n  this.timeDomainData = new Uint8Array(analyserNode.frequencyBinCount);\n  this.source = source;\n  this.context = context;\n  this.analyserNode = analyserNode;\n  this.request = request;\n};\n\nPlayer.prototype = {\n  play: function() {\n    var source = this.source;\n    var context = this.context;\n    var analyserNode = this.analyserNode;\n    var request = this.request;\n    var timeDomainData = this.timeDomainData;\n    source.buffer = context.createBuffer(request.response, false);  //ArrayBufferからバッファを作成　第２引数をtrueにするとモノラルに\n    source.noteOn(context.currentTime);   //指定した時間に再生する　もし指定した時間がcontext.currentTimeより小さい場合はすぐ再生される\n    \n    var draw = this.draw();\n    setInterval(function(){\n      analyserNode.getByteTimeDomainData(timeDomainData);\n      draw(timeDomainData);\n    },50);\n  },\n  // 描画関数（初期化後に、描画用のクロージャを返す手抜き)\n  draw: function() {\n    function Particle() {\n      Particle.prototype.initialize.apply(this, arguments);\n    };\n    Particle.prototype = {\n      initialize: function(p, sp, r) {\n        this.p = p || [0.5, 0.5];\n        this.sp = sp || [0, 0.1].rotate($R(0, 100).randf());\n        this.h = $R(0, 1).randf();\n        this.r = r;\n        this.count = 0;\n        this.maxCount = 20;\n      },\n      act: function() {\n        this.p = this.p.translate(this.sp);\n        this.sp = this.sp.mul(0.8);\n        this.count++;\n        this.r *= 0.97;\n        this.r -= 0.005;\n      },\n      draw: function() {\n        if(this.r < 0) return this;\n        var h = this.h;\n        var alpha = (this.maxCount - this.count) / this.maxCount;\n        d\n         .blend(\"lighter\")\n         .alpha(alpha * alpha * 0.8)\n         .luminous(this.p, this.r / 10, this.r, [\n           [0.00,  [h, 0.0, 1.0].hsv()],\n           [0.20,  [h, 0.1, 0.9].hsv()],\n           [0.40,  [h, 0.2, 0.8].hsv()],\n           [0.60,  [h, 0.3, 0.6].hsv()],\n           [0.80,  [h, 0.7, 0.2].hsv()],\n           [1.00,  [h, 0.0, 0.0].hsv()],\n         ])\n         .fill()\n        ;\n      },\n      isTired: function() {\n        return this.count > this.maxCount;// this.sp.square() < 0.0001\n      },\n    };\n\n    var particles = [];\n\n    var d = new DCore();\n\n    var bpm = 128.0;\n\n    var st = +new Date();\n\n    var c = 0;\n    var spl = .0.arize(1024);\n\n    prevData = [];\n      \n    // 初期化ここまで、こっから描画\n    return (function(data) {\n      c++;\n\n      // パーティクル生成\n      var step = 64;\n      for(var i = 0; i < 1024; i += step) {\n        var power = (data[i] - 128) / 128;\n        var radian = (i / 1024).toRadian();\n        var f = c * 0.001;\n        var sp = [$R(-0.001, 0.001).randf(), $R(-0.02, -0.03).randf()];\n        var cp = [(i + step / 2) / 1024, 1.0];\n        var particle = new Particle(cp, sp, power.abs() * 0.6);\n        particles.push(particle);\n\n        var delta = (prevData[i] - data[i]).abs();\n        if(delta > 16) {\n          var particle = new Particle(cp.translate([$R(-0.03, 0.03).randf(), 0]), sp.mul(0.3), delta * 0.003);\n        particles.push(particle);\n        }\n      }\n\n      // 疲れた人ははじく\n      particles = particles.select(function(e) {\n        return !e.isTired();\n      });\n\n      // 背景初期化\n      d\n       .blend(\"source-over\")\n       .alpha(0.6)\n       .rgb(0x00, 0x00, 0x00)\n       .fillBack();\n      ;\n\n      particles.invoke(\"act\");\n      particles.invoke(\"draw\");\n\n      d\n       .blend(\"lighter\")\n       .alpha(0.4)\n       .drawImage(d, [0, 0.1], [1, 0.9], [0, 0], [1, 1])\n      ;\n\n      prevData = data.clone();\n\n    });\n  }\n};\nvar player = new Player();\n\n"},"thumbnail":{"wide":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/a/d/W/adWb_w.jpg","465":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/a/d/W/adWb.jpg","100":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/a/d/W/adWb_100.jpg"},"description_html":"ぼつ","parent":{"thumbnail":{"wide":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/t/k/3/tk3X_w.jpg","465":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/t/k/3/tk3X.jpg","100":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/t/k/3/tk3X_100.jpg"},"parent":{"thumbnail":{"wide":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/3/A/Y/3AY7_w.jpg","465":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/3/A/Y/3AY7.jpg","100":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/3/A/Y/3AY7_100.jpg"},"modified_date":"2011-08-14 10:58:41","uid":"3AY7","created_date":"2011-08-14 09:44:19","path":"3AY7","description":"Google Chromeでアドレスバーにabout:flags\nウェブ オーディオを有効にする\n\nChrome 13.0.782.112で確認","statistic":{"forked":"5","favorite":"1","pageview":"3201"},"user":{"icon":"http://jsdo-static-contents.s3.amazonaws.com/images/icon/f/f/0/0/ff00b9b087e2dce83fd40d4fed6646943de50edf_100.jpg","name":"ryoheycc"},"url":"http://jsdo.it/ryoheycc/3AY7","title":"Web Audio API Test+GainNode"},"modified_date":"2011-08-17 16:24:52","uid":"tk3X","created_date":"2011-08-16 21:58:22","path":"tk3X","description":"Google Chromeでアドレスバーにabout:flags\nウェブ オーディオを有効にする\n\nChrome 13.0.782.112で確認\n\nRealTimeAnalyser.getByteTimeDomainData()で波形を表示する\n\nボリュームを下げると波形が小さくなるのが一番の見所","statistic":{"forked":"17","favorite":"18","pageview":"10220"},"url":"http://jsdo.it/ryoheycc/tk3X","user":{"icon":"http://jsdo-static-contents.s3.amazonaws.com/images/icon/f/f/0/0/ff00b9b087e2dce83fd40d4fed6646943de50edf_100.jpg","name":"ryoheycc"},"title":" Web Audio APIで音楽のリアルタイム波形表示"},"modified_date":"2012-04-08 16:42:42","uid":"adWb","created_date":"2012-04-08 16:27:50","path":"adWb","description":"ぼつ","statistic":{"forked":"0","favorite":"0","pageview":"1426"},"url":"http://jsdo.it/crispy/adWb","user":{"icon":"http://jsdo-static-contents.s3.amazonaws.com/images/icon/b/4/2/c/b42cc3dd3312505b680411b3ead08e2dbc4192e4_100.jpg","name":"crispy"},"title":"Particle Visualizer:  Web Audio APIで音楽のリアルタイム波形表示"}