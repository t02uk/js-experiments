{"source":{"css":"body { background-color: #000000; margin: 0px; overflow: hidden; }","html":"<canvas id='world'></canvas>","lisence":"MIT","js":"//\n// ＊参考\n//\n// ABA Games > fukuro - 袋叩きの行動モデル \n//   http://www.asahi-net.or.jp/~cs8k-cyu/piece/fukuro.html\n// \n//\n\n\nwindow.onload = function() {\n  var d = new DCore();\n\n  // 優先順位付、アクタークラス\n  Actors = {\n    init: function() {\n      this.acts = [];\n    },\n    invoke: function() {\n      this.acts.sortBy(\n        function(a){return a[0];}\n      ).each(\n        function(a){a[1]();}\n      );\n      this.acts = [];\n    },\n    registor: function(priority, act) {\n      this.acts.push([priority, act]);\n    }\n  }\n  Actors.init();\n\n  // 鳥などマネージャクラス\n  function God() {\n    this.birds = $R(0, 16).map(function(e) {\n      var bird = new Bird(e);\n      bird.pos = [$R(-10, 10).rand(), $R(-20, 0).rand(), $R(-10, 10).rand()];\n      bird.rotatez($R(0, 100).randf());\n      bird.rotatex($R(0, 100).randf());\n      return bird;\n    });\n\n    this.stars = $R(0, 127).map(function(e) {\n      return new Star();\n    });\n  }\n  God.prototype = {\n    act: function() {\n      this.birds.invoke(\"act\");\n      this.stars.invoke(\"act\");\n    },\n    draw: function() {\n      this.birds.invoke(\"draw\", true);\n      this.birds.invoke(\"draw\", false);\n      this.stars.invoke(\"draw\");\n    }\n  }\n\n  // とり\n  function Bird(sid) {\n    // 座標\n    this.pos = [0.1, 0, 0];\n    // 速度\n    this.speed = [0, 0, 0];\n\n    // 姿勢制御用位置ベクトル (前、横、上)\n    this.eye = [0, 0, 1];\n    this.arm = [1, 0, 0];\n    this.head = [0, 1, 0];\n\n    // サイズ\n    this.size = 1;\n\n    // 回転モーメント x, y, z\n    this.mx = 0;\n    this.my = 0;\n    this.mz = 0;\n\n    // アニメーションカウンタ\n    this.wc = 0;\n    this.cc = 0;\n\n    // 色\n    this.hsv = [$R(0, 1).randf(), $R(0.5, 0.8).randf(), $R(0.7, 0.8).randf()];\n\n    // シリアルID\n    this.sid = sid;\n\n    // 可視範囲\n    this.visibleDist = $R(10, 20).randf();\n    this.init();\n  }\n  Bird.prototype = {\n    init: function() {\n    },\n    act: function() {\n      var self = this;\n\n      var birds = god.birds;\n      // 視野範囲\n      var visibleDist = self.visibleDist;\n      \n      // 進みたい進行方向へベクトル\n      var intension = [0, 0, 0];\n\n      // 一番近い鳥を探す(自分自身はのぞく)\n      var nearestBird = birds.sortBy(function(that) {\n        var square = self.pos.sub(that.pos).square();\n        if(self.sid === that.sid) return 10000;\n        else return square;\n      }).first();\n\n      // 範囲内の鳥を求める\n      // (自分自身は除く→一定距離以上は除く→視野角270度くらいに収まってなければのぞく)\n      var visibleBirds = birds.select(function(that) {\n        var square = self.pos.sub(that.pos).square();\n        if(self.sid === that.sid) return false;\n        if(square >= visibleDist * visibleDist) return false;\n        if(self.eye.dot(that.pos.sub(self.pos) < -0.7)) return false;\n        return true;\n      });\n\n      // 引き離し(理想距離内より近ければ逆方向、遠ければ近くへ)\n      // 実際距離\n      var realDist = self.pos.sub(nearestBird.pos).abs();\n      // 理想距離\n      var idealDist = 4;\n      if(realDist < idealDist * 2) {\n        var intension1 = (realDist - idealDist) / idealDist * 1;\n        // 加算する > 目標方向へのベクトル(一番近い鳥 - 自分自身) * 係数\n        intension = intension.add(nearestBird.pos.sub(self.pos).mul(intension1));\n      }\n\n      // 整列\n      if(visibleBirds.length) {\n        // 可視範囲のBoidの向き(平均値)を算出\n        var intension2 = visibleBirds.inject([0, 0, 0], function(i, e) {\n          return i.add(e.eye);\n        }).normalize();\n        intension = intension.add(intension2.mul(1.5));\n      }\n\n      // 結合\n      if(visibleBirds.length) {\n        // 可視範囲の中心座標を算出\n        var center = visibleBirds.inject([0, 0, 0], function(i, e) {\n          return i.add(e.pos);\n        }).mul(visibleBirds.length);\n        var intension3 = center.sub(self.pos).normalize();\n        intension = intension.add(intension3.mul(0.8));\n      }\n\n\n\n      // 変数を\n      var eye = this.eye;\n      var head = this.head;\n      var arm = this.arm;\n      var pos = this.pos;\n\n      // 目標座標へのベクトル(\n      var vi = [0, 0, 0];\n      var vi = target.pos.sub(this.pos).mul(0.03);\n      var vi = vi.add(intension.normalize(2)).normalize();\n\n      // 各内積\n      var dtEye = eye.dot(vi);\n      var dtHead = head.dot(vi);\n      var dtArm = arm.dot(vi);\n\n      // 制御用の回転モーメント力\n      var vr = 0.10;\n\n      // 変数とか\n      var mx = this.mx;\n      var my = this.mx;\n      var mz = this.mz;\n\n      // 姿勢制御開始\n\n      // だいたい前方\n      if(dtEye > 0) {\n\n        // だいたい前まっすぐ\n        if(dtEye > 0.95) {\n          // 姿勢制御なし\n\n        } else {\n          // 姿勢制御\n\n          // ヨコ方向にあり\n          if(dtArm.abs() > 0.5) {\n            my += dtArm * vr;\n          // 垂直方向にあり\n          } else if(dtHead.abs() < 0.5) {\n            mx += -dtHead * vr;\n          } else {\n            mz += -dtHead * vr;\n          }\n        }\n      } else {\n        if(dtArm.abs() > 0.5) {\n          my += dtArm * vr;\n        } else if(dtHead.abs() > 0.5) {\n          mx -= dtHead * vr;\n        } else {\n          if(dtEye.abs() > 0.5) {\n            mx -= vr;\n          } else if(dtHead < 0) {\n            mz += dtHead * vr;\n          }\n        }\n      }\n\n\n      // メンバ変数へ戻す\n      this.mx = mx;\n      this.my = my;\n      this.mz = mz;\n\n      // 回転モーメント計算\n      this.rotatez(mz);\n      this.rotatex(mx);\n      this.rotatey(my);\n\n      // 回転モーメントの減退\n      this.mx *= 0.6;\n      this.my *= 0.6;\n      this.mz *= 0.6;\n\n      // 行きたい方向へ近い向きを向いているほど激しく羽ばたくように計算する\n      this.wc += dtEye * 0.25 + 0.45;\n      this.wc *= 0.5;\n      this.cc += this.wc;\n\n      // 速度計算\n      this.speed = this.speed.add(this.eye.mul(0.05));\n      this.speed = this.speed.mul(0.75);\n\n\n      // 距離計算\n      this.pos = this.pos.add(this.speed);\n\n      // 地面にあたったら上へワープ\n      if(this.pos[1] < 0) {\n        this.pos = this.pos.add([0, 60, 0]);\n      }\n    },\n    draw: function(shadow) {\n      var self = this;\n\n      var size = this.size;\n\n      var model = [];\n\n      var ah = -Math.sin(this.cc) * 0.5 * size;\n\n      model.push([\n        this.eye.mul(size)\n      , this.eye.mul(size*0.3)\n      , this.arm.mul(size*0.5).add(this.head.mul(size*0.2)).add(this.head.mul(ah))\n      ]);\n      model.push([\n        this.eye.mul(size)\n      , this.eye.mul(size*0.3)\n      , this.arm.mul(-size*0.5).add(this.head.mul(size*0.2)).add(this.head.mul(ah))\n      ]);\n\n      if(shadow) {\n        model.each(function(e) {\n          e = e.translate(self.pos).scale([1, 0, 1]);\n          var ee = d.toWorld2dParallel(e, true);\n          if(!ee) return;\n          var orz = ee.inject(0, function(i, e) { return i + e[2]; }) / 3;\n\n          Actors.registor(-orz, function() {\n            d\n             .alpha(0.25)\n             .rgb(0x66, 0x66, 0x66)\n             .quads(e)\n             .fill()\n            ;\n          });\n        });\n      } else {\n        model.each(function(e) {\n          e = e.translate(self.pos);\n          var ee = d.toWorld2dParallel(e, true);\n          if(!ee) return;\n          var orz = ee.inject(0, function(i, e) { return i + e[2]; }) / 3;\n\n          Actors.registor(-orz, function() {\n            d\n             .alpha(0.7)\n             .hsv(self.hsv)\n             .quads(e)\n             .fill()\n            ;\n          })\n        });\n      }\n\n      return this;\n    },\n    rotatey: function(t) {\n      var self = this;\n      this.arm = this.arm.rotatea(t, self.head).normalize();\n      this.eye = this.eye.rotatea(t, self.head).normalize();\n      this.head = this.eye.cross(self.arm).normalize();\n    },\n    rotatex: function(t) {\n      var self = this;\n      this.eye = this.eye.rotatea(t, self.arm).normalize();\n      this.head = this.head.rotatea(t, self.arm).normalize();\n      this.arm = this.head.cross(self.eye).normalize();\n    },\n    rotatez: function(t) {\n      var self = this;\n      this.arm = this.arm.rotatea(t, self.eye).normalize();\n      this.head = this.head.rotatea(t, self.eye).normalize();\n      this.eye = this.arm.cross(self.head).normalize();\n    },\n  }\n\n\n  function Target() {\n    this.pos = [0, 10, 0];\n  }\n\n\n  function Star() {\n    this.init();\n  }\n  Star.prototype = {\n    init: function() {\n      var self = this;\n      this.fixedModel = (function() {\n        var model = Star.prototype.model;\n        var size = $R(200, 600).randf();\n        model = model.scale([size, size, size]);\n        model = model.invoke(\"rotatex\", $R(0, 100).randf());\n        model = model.translate([40000, size * $R(50, 75).randf() / 100, 0]);\n        if($R(0, 1).rand()) {\n          self.rz = $R(0, (1 / 2)).randf() * $R(0, (1 / 2)).randf() + 0.03;\n        } else {\n          self.rz = 0;\n        }\n        model = model.invoke(\"rotatez\", self.rz.toRadian());\n        model = model.invoke(\"rotatey\", $R(0, 100).randf());\n        return model;\n      })();\n\n      this.hsv = [\n        $R(0.5, 0.8).randf(),\n        $R(0.15, 0.2).randf(),\n        $R(0.85, 0.9).randf()\n      ];\n      return this;\n    },\n    model: (function() {\n      return $R(0, 5, true).map(function(x) {\n        return [0, 0, 1].rotatex((x * 2 / 5).toRadian());\n      });\n    })(),\n    act: function() {\n      this.count++;\n    },\n    draw: function() {\n      var self = this;\n      Actors.registor(-10000, function() {\n        d\n         .alpha(0.9)\n         .hsv(self.hsv)\n         .quads(self.fixedModel)\n         .fill()\n        ;\n\n        if(self.rz < 0.03) {\n          d\n           .alpha(0.3)\n           .hsv(self.hsv)\n           .quads(self.fixedModel.scale([1, -1, 1]))\n           .fill()\n          ;\n        }\n      });\n    }\n  }\n\n\n  var god = new God();\n  var target = new Target();\n  target.pos = [$R(-20, 20).rand(), $R(-20, 20).rand(), $R(-20, 20).rand()];\n\n  // メイン部\n  (function() {\n\n    // 各種ハンドラ設定\n    var px, py;\n    var lbdown = false;\n    var wdelta = 0;\n    window.addEventListener(\"mousemove\", function(e) {\n      px = e.clientX / d.width - d.left2d;\n      py = e.clientY / d.height - d.top2d;\n    }, false);\n    window.addEventListener(\"mousedown\", function(e) {\n      lbdown = true;\n    }, false);\n    window.addEventListener(\"mouseup\", function(e) {\n      lbdown = false;\n    }, false);\n    window.addEventListener(\"mousewheel\", function(e) {\n      if(e.wheelDelta) {\n        wdelta = -e.wheelDelta / 120;\n      }\n      if(e.preventDefault) e.preventDefault();\n      e.returnValue = false;\n    }, false);\n    window.addEventListener(\"keydown\", function(e) {\n      if(e.keyCode === 32) {\n        camera.changeMode();\n        if(e.preventDefault) e.preventDefault();\n        e.returnValue = false;\n      }\n      if(e.keyCode === 13) {\n        camera.target = god.birds[$R(0, god.birds.length - 1).rand()];\n        if(e.preventDefault) e.preventDefault();\n        e.returnValue = false;\n      }\n    }, false);\n      \n\n    function Camera() {\n      this.crad = 0.5;\n      this.crad2 = 0.5;\n      this.cz = 15.0;\n      this.mode = 0;\n      this.pos = [10, 100, 10];\n    }\n    Camera.prototype = {\n      act: function() {\n        if(wdelta) {\n          this.cz += wdelta * 2;\n        }\n        this.cameraWorks[this.mode].call(this);\n      },\n      cameraWorks: [\n        // 追尾\n        function() {\n          var idealDist = this.cz;\n          var realDist = this.pos.sub(this.target.pos).abs();\n          if(realDist > idealDist) {\n            var t = this.target.pos.sub(this.pos).mul(1 - idealDist / realDist);\n            this.pos = this.pos.add(t);\n          }\n          d.gazeFrom(\n            this.pos,\n            this.target.pos,\n            [0, 1, 0]\n          );\n        },\n        // ぐるぐる\n        function() {\n          if(lbdown) {\n            this.crad  = px.toRadian();\n            this.crad2 = (py / 2 + 0.25).toRadian();\n            this.crad -= 0.01;\n          } else {\n            this.crad += 0.007;\n            this.crad2 += 0.005;\n          }\n\n          this.pos = [this.cz, Math.sin(this.crad2) * 40 + 40, 0].rotatey(this.crad);\n          this.head = this.target.pos.sub(this.pos).normalize().cross([this.cz, 0, 0]);\n\n          d.gazeFrom(\n            this.pos,\n            [0, 40, 0],\n            [0, 1, 0]\n          );\n        },\n      ],\n      changeMode: function() {\n        this.mode += 1;\n        this.mode %= this.cameraWorks.length;\n      }\n    }\n    var camera = new Camera();\n    camera.target = god.birds[0];\n\n\n    window.setInterval(function() {\n\n\n      camera.act();\n\n      // 背景\n      d\n       .blend(\"source-over\")\n       .alpha(1.0)\n       .rgb(0xee, 0xef, 0xf4)\n       .fillBack()\n      ;\n\n      god.act();\n      god.draw();\n      Actors.invoke();\n\n      if($R(0, 200).rand() === 0) {\n        target.pos = [$R(-20, 20).rand(), $R(10, 30).rand(), $R(-20, 20).rand()];\n      }\n\n      wdelta = 0;\n\n    }, 33);\n  })();\n\n};\n// vim:sw=2:ts=2\n\n"},"thumbnail":{"wide":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/H/x/A/HxAC_w.jpg","465":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/H/x/A/HxAC.jpg","100":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/H/x/A/HxAC_100.jpg"},"description_html":"3D空間での鳥の群れのシミュレータ<br />\n＊操作　スペースキー、エンターキー、マウス<br />\n　・スペースキー：カメラモード変更(追尾↔巡回)<br />\n　・エンターキー：追尾モードにて、ターゲット変更<br />\n　・マウス：巡回モードにて、カメラ位置変更<br />\n＊その他<br />\n　・重めなのでChrome推奨→(追記)高速化した。Enumerable#zip重すぎ","modified_date":"2010-12-30 18:39:39","uid":"HxAC","created_date":"2010-12-26 20:07:33","path":"HxAC","description":"3D空間での鳥の群れのシミュレータ\n＊操作　スペースキー、エンターキー、マウス\n　・スペースキー：カメラモード変更(追尾↔巡回)\n　・エンターキー：追尾モードにて、ターゲット変更\n　・マウス：巡回モードにて、カメラ位置変更\n＊その他\n　・重めなのでChrome推奨→(追記)高速化した。Enumerable#zip重すぎ","statistic":{"forked":"4","favorite":"16","pageview":"5145"},"user":{"icon":"http://jsdo-static-contents.s3.amazonaws.com/images/icon/b/4/2/c/b42cc3dd3312505b680411b3ead08e2dbc4192e4_100.jpg","name":"crispy"},"url":"http://jsdo.it/crispy/HxAC","title":"3D birdoid"}