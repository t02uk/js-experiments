{"source":{"css":"body { background-color: #DDDDDD; font: 30px sans-serif; }","html":"<canvas id='world'></canvas>","lisence":"MIT","js":"(function() {\n\n\t// util\n\tvar util = {\n\t\t// if small value is given, return zero. otherwise not edited value\n\t\tfx: function(x) {\n\t\t\tif(Math.abs(x) < 0.00001) return 0;\n\t\t\telse return x;\n\t\t},\n\t\tinvert33: function(m) {\n\t\t\tvar repdet = 0;\n\t\t\trepdet += m[0][0] * m[1][1] * m[2][2];\n\t\t\trepdet += m[1][0] * m[2][1] * m[0][2];\n\t\t\trepdet += m[2][0] * m[0][1] * m[1][2];\n\t\t\trepdet -= m[0][0] * m[2][1] * m[1][2];\n\t\t\trepdet -= m[2][0] * m[1][1] * m[0][2];\n\t\t\trepdet -= m[1][0] * m[0][1] * m[2][2];\n\n\n\t\t\tif(repdet === 0) {\n\t\t\t  return undefined;\n\t\t\t}\n\t\t\tvar det = 1 / repdet;\n\n\t\t\treturn [\n\t\t\t  [\n\t\t\t  (m[1][1] * m[2][2] - m[1][2] * m[2][1]) * det,\n\t\t\t  (m[0][2] * m[2][1] - m[0][1] * m[2][2]) * det,\n\t\t\t  (m[0][1] * m[1][2] - m[0][2] * m[1][1]) * det,\n\t\t\t  ],[\n\t\t\t  (m[1][2] * m[2][0] - m[1][0] * m[2][2]) * det,\n\t\t\t  (m[0][0] * m[2][2] - m[0][2] * m[2][0]) * det,\n\t\t\t  (m[0][2] * m[1][0] - m[0][0] * m[1][2]) * det,\n\t\t\t  ],[\n\t\t\t  (m[1][0] * m[2][1] - m[1][1] * m[2][0]) * det,\n\t\t\t  (m[0][1] * m[2][0] - m[0][0] * m[2][1]) * det,\n\t\t\t  (m[0][0] * m[1][1] - m[0][1] * m[1][0]) * det,\n\t\t\t  ]\n\t\t\t];\n\t\t},\n\t\tmulMatrix33: function(lhs, rhs) {\n\t\t\t// it must be promised below condition\n\t\t\t//   lhs.length === rhs.length === lhs[n].length === rhs[n].length\n\t\t\tvar n = 3;\n\t\t\tvar r = new Array(n);\n\t\t\tfor(var i = 0; i < n; i++) {\n\t\t\t\tr[i] = new Array(n);\n\t\t\t\tfor(var j = 0; j < n; j++) {\n\t\t\t\t\tr[i][j] = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor(var i = 0; i < n; i++) {\n\t\t\t\tfor(var j = 0; j < n; j++) {\n\t\t\t\t\tfor(var k = 0; k < n; k++) {\n\t\t\t\t\t\tr[i][j] += lhs[i][k] * rhs[k][j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn r;\n\t\t},\n\t\tmulMatrix44: function(lhs, rhs) {\n\t\t\t// it must be promised below condition\n\t\t\t//   lhs.length === rhs.length === lhs[n].length === rhs[n].length\n\t\t\tvar n = 4;\n\t\t\tvar r = new Array(n);\n\t\t\tfor(var i = 0; i < n; i++) {\n\t\t\t\tr[i] = new Array(n);\n\t\t\t\tfor(var j = 0; j < n; j++) {\n\t\t\t\t\tr[i][j] = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor(var i = 0; i < n; i++) {\n\t\t\t\tfor(var j = 0; j < n; j++) {\n\t\t\t\t\tfor(var k = 0; k < n; k++) {\n\t\t\t\t\t\tr[i][j] += lhs[i][k] * rhs[k][j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn r;\n\t\t},\n\t\t// imitate Option in Scala, Maybe in Haskell,\n\t\topt: function(x) {\n\t\t\tif(x === undefined) return [];\n\t\t\telse return x;\n\t\t},\n\t};\n\n\n\t// Key-frames Builder, supply us easy way for building @-vendor-key frames in Java Script.\n\t// NOTE: It's might be criminally implementation to initialize prototype on instance method.\n\tfunction KeyframesBuilder(keyframeName) {\n\t\tthis.keyframeName = keyframeName;\n\t\tthis.keyframeNames = $A(arguments);\n\n\t\tvar This = KeyframesBuilder;\n\t\tvar initializeTask = {};\n\t\tvar evaluateTask = {};\n\t\tvar evaluateTaskName = [];\n\t\tthis.dirtyPlugin = [];\n\n\t\t// install plug-in\n\t\t// and on same time, rewrite this of plug-ins -> oneself\n\t\tvar plugins = This.prototype.plugins;\n\t\tvar self = this;\n\t\tplugins.each(function(e) {\n\t\t\tvar methods = e['methods'];\n\t\t\tvar name = e['name'];\n\t\t\tfor(var method in methods) {\n\t\t\t\tvar nfn = self.wrapNormalFn(self, name, methods, method);\n\n\t\t\t\tvar sfn = methods[method];\n\n\t\t\t\t// push common task\n\t\t\t\t//  initialize -> called on self#initialize\n\t\t\t\t//  evaluate -> called for building animation statement\n\t\t\t\t//  others -> extends prototype\n\t\t\t\tif(\"initialize\" === method) {\n\t\t\t\t\tinitializeTask[name] = sfn;\n\t\t\t\t} else if(\"evaluate\" === method) {\n\t\t\t\t\tevaluateTask[name] = sfn;\n\t\t\t\t\tevaluateTaskName.push(name);\n\t\t\t\t} else {\n\t\t\t\t\tThis.prototype[method] = nfn;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//\n\t\t\tself.dirtyPlugin[name] = false;\n\t\t});\n\n\n\t\t// extends prototype\n\t\tThis.prototype.initializeTask = initializeTask;\n\t\tThis.prototype.evaluateTask = evaluateTask;\n\t\tThis.prototype.evaluateTaskName = evaluateTaskName;\n\n\t\t// initialize oneself\n\t\tthis.initialize();\n\t}\n\n\t\n\t// prototype\n\tKeyframesBuilder.prototype = {\n\t\t// call plug-ins initialize\n\t\tinitialize: function(name) {\n\t\t\tthis.seek_ = 0;\n\t\t\tvar self = this;\n\t\t\tfor(var name in this.initializeTask) {\n\t\t\t\tif(!this.initializeTask.hasOwnProperty(name)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tvar method = this.initializeTask[name];\n\t\t\t\tmethod.apply(self, undefined);\n\t\t\t}\n\t\t\tthis.frames = [];\n\t\t\tthis.dirty = false;\n\t\t\treturn this;\n\t\t},\n\t\t// wrap normal fn (such as translate, scale etc..)\n\t\twrapNormalFn: function(caller, name, methods, method) {\n\t\t\treturn function() {\n\t\t\t\tcaller.dirty = true;\n\t\t\t\tcaller.dirtyPlugin[name] = true;\n\t\t\t\tvar result = methods[method].apply(caller, arguments);\n\t\t\t\treturn result || caller;\n\t\t\t};\n\t\t},\n\t\t// flush pooled frame text\n\t\tflush: function() {\n\t\t\tif(this.dirty) {\n\t\t\t\tvar frame = {seek: this.seek_, frame: this.fixedState()};\n\t\t\t\tthis.frames.push(frame);\n\t\t\t}\n\t\t\tthis.dirty = false;\n\t\t},\n\t\t// seek (parameter is absolute)\n\t\tseek: function(seek_) {\n\t\t\tthis.flush();\n\t\t\tthis.seek_ = seek_;\n\t\t\treturn this;\n\t\t},\n\t\t// seek (parameter is relative)\n\t\tafter: function(time) {\n\t\t\treturn this.seek(this.seek_ + time);\n\t\t},\n\t\t// build current text for animation\n\t\tfixedState: function() {\n\t\t\tvar self = this;\n\t\t\tvar animation = [];\n\t\t\tthis.evaluateTaskName.each(function(name) {\n\t\t\t\tif(!self.dirtyPlugin[name]) return;\n\t\t\t\tvar method = self.evaluateTask[name];\n\t\t\t\tvar work = method.apply(self, undefined);\n\t\t\t\tif(work !== undefined) animation.push(work);\n\t\t\t});\n\t\t\treturn animation.transpose().invoke(\"join\", \"\\n\");\n\t\t},\n\t\t// build all text for animation\n\t\tbuild: function() {\n\t\t\tthis.flush();\n\t\t\tif(!this.frames.length) return;\n\t\t\tvar frames = this.frames.sortBy(function(e) {\n\t\t\t\treturn e.seek;\n\t\t\t});\n\t\t\tvar playTime = frames.last().seek;\n\t\t\tthis.playTime = playTime;\n\t\t\tvar result = frames.map(function(e) {\n\t\t\t\tvar percent = ((e.seek / playTime) * 100) + \"%\";\n\t\t\t\treturn e.frame.map(function(f) {\n\t\t\t\t\treturn percent + \" {\\n\" + f + \"}\";\n\t\t\t\t});\n\t\t\t}).transpose().invoke(\"join\", \"\\n\");\n\t\t\treturn result;\n\t\t},\n\t\t// change frame behavior and over ride it\n\t\thook: function(name, methods) {\n\t\t\tvar This = KeyframesBuilder;\n\n\t\t\tfor(method in methods) {\n\t\t\t\tvar fn = methods[method];\n\t\t\t\tif(method === \"initialize\") {\n\t\t\t\t\tif(!this.hasOwnProperty(\"initialize\")) {\n\t\t\t\t\t\tthis.initializeTask = $A(This.prototype.initializeTask);\n\t\t\t\t\t}\n\t\t\t\t\tthis.initializeTask[name] = fn;\n\t\t\t\t} else if(method === \"evaluate\") {\n\t\t\t\t\tif(!this.hasOwnProperty(\"evaluate\")) {\n\t\t\t\t\t\tthis.evaluateTask = $A(This.prototype.evaluateTask);\n\t\t\t\t\t}\n\t\t\t\t\tthis.evaluateTask[name] = fn;\n\t\t\t\t} else {\n\t\t\t\t\tthis[method] = this.wrapNormalFn(this, name, methods, method);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t// apply animation\n\t\tapply: function(selector, duration, timingFunction, delay, iterationCount, direction) {\n\t\t\tvar all = this.build();\n\t\t\tif(!all) return this;\n\n\t\t\tvar self = this;\n\n\t\t\tvar _selector = selector;\n\n\t\t\tthis.keyframeNames.zipWithIndex(function(keyframeName, i) {\n\n\t\t\t\tvar st = all[i];\n\t\t\t\t// default set\n\t\t\t\tselector = _selector || (\".\" + keyframeName);\n\t\t\t\tduration = duration || (self.playTime + \"ms\");\n\t\t\t\ttimingFunction = timingFunction || \"linear\";\n\t\t\t\titerationCount = iterationCount || \"infinite\";\n\t\t\t\tdirection = direction || \"\";\n\t\t\t\tdelay = delay || \"0s\";\n\n\t\t\t\tvar x = [\n\t\t\t\t  \"@-webkit-keyframes \" + keyframeName + \" {\",\n\t\t\t\t  st,\n\t\t\t\t  \"}\",\n\t\t\t\t  selector + \" {\",\n\t\t\t\t  \"-webkit-animation:\" + [keyframeName, duration, timingFunction, delay, iterationCount].join(\" \") + \";\",\n\t\t\t\t  \"}\",\n\t\t\t\t].join(\"\\n\");\n\n\t\t\t\tif(self.style) {\n\t\t\t\t\tvar style = self.style;\n\t\t\t\t\tstyle.html([style.html(), x].join(\"\\n\"));\n\t\t\t\t} else {\n\t\t\t\t\tvar style = $(\"<style>\", {type: \"text/css\"});\n\t\t\t\t\tstyle.html(x);\n\t\t\t\t\tstyle.appendTo($(\"head\"));\n\t\t\t\t\tself.style = style;\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tfixStyle: function(elem) {\n\t\t\tvar all = this.build();\n\t\t\tif(!all) return this;\n\n\t\t\tvar style = this.fixedState();\n\t\t\tif(!style) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\telem.setAttribute(\"style\", style.join(\":\"));\n\t\t},\n\t};\n\tKeyframesBuilder.prototype.plugins = [];\n\n\t// install (for add plug-in)\n\t// adding method for prototype are called in initialization method\n\tKeyframesBuilder.install = function(name, methods) {\n\t\tvar This = KeyframesBuilder;\n\t\tThis.prototype.plugins.push({name: name, methods: methods});\n\t};\n\n\t/// install (for add plug-in. It's very suitable method for lazy man)\n\tKeyframesBuilder.EazyInstall = function(name) {\n\t\tvar This = KeyframesBuilder;\n\t\tvar prop = name + \"_\";\n\t\tvar func = {};\n\t\tfunc['initialize'] = function() {\n\t\t\tthis[prop] = undefined;\n\t\t};\n\t\tfunc[name] = function(val) {\n\t\t\tthis[prop] = val;\n\t\t};\n\t\tfunc['evaluate'] = function() {\n\t\t\tif(this[prop] === undefined) return undefined;\n\t\t\telse return [name + \":\" + this[prop] + \";\"];\n\t\t};\n\t\tThis.install(name, func);\n\t};\n\n\n\t// transform wrapper (2d)\n\tKeyframesBuilder.install('transform', {\n\t\tinitialize: function() {\n\t\t\tthis.transform_ = [\n\t\t\t\t[1, 0, 0],\n\t\t\t\t[0, 1, 0],\n\t\t\t\t[0, 0, 1],\n\t\t\t];\n\t\t},\n\t\tevaluate: function() {\n\t\t\tvar t = this.transform_;\n\t\t\tvar fx = util.fx;\n\t\t\treturn [\"-webkit-transform: matrix(\" + [fx(t[0][0]), fx(t[1][0]), fx(t[0][1]), fx(t[1][1]), fx(t[0][2]), fx(t[1][2])].join(\",\") + \");\"];\n\t\t},\n\t\ttranslate: function(a) {\n\t\t\tif(!(a instanceof Array)) a = $A(arguments);\n\t\t\ta[0] = a[0] || 0;\n\t\t\ta[1] = a[1] || 0;\n\t\t\tvar t = this.transform_;\n\t\t\tthis.transform_ = util.mulMatrix33(this.transform_, [\n\t\t\t\t[1, 0, a[0]],\n\t\t\t\t[0, 1, a[1]],\n\t\t\t\t[0, 0, 1   ]\n\t\t\t]);\n\t\t},\n\t\trotate: function(a) {\n\t\t\tvar t = this.transform_;\n\t\t\ta = a || 0;\n\t\t\tvar sin = Math.sin(a / 360 * Math.PI * 2.0);\n\t\t\tvar cos = Math.cos(a / 360 * Math.PI * 2.0);\n\n\t\t\tthis.transform_ = util.mulMatrix33(this.transform_, [\n\t\t\t\t[cos,-sin, 0],\n\t\t\t\t[sin, cos, 0],\n\t\t\t\t[0,   0,   1],\n\t\t\t]);\n\t\t},\n\t\tscale: function(a) {\n\t\t\tif(!(a instanceof Array)) a = $A(arguments);\n\t\t\ta[0] = a[0] || 1;\n\t\t\ta[1] = a[1] || 1;\n\t\t\tthis.transform_ = util.mulMatrix33(this.transform_, [\n\t\t\t\t[a[0],   0, 0],\n\t\t\t\t[   0,a[1], 0],\n\t\t\t\t[   0,   0, 1],\n\t\t\t]);\n\t\t},\n\t});\n\n\n\t// transform wrapper (3d)\n\tKeyframesBuilder.install('transform3d', {\n\t\tinitialize: function() {\n\t\t\tthis.transform3d_ = [\n\t\t\t\t[1, 0, 0, 0],\n\t\t\t\t[0, 1, 0, 0],\n\t\t\t\t[0, 0, 1, 0],\n\t\t\t\t[0, 0, 0, 1],\n\t\t\t];\n\t\t},\n\t\tevaluate: function() {\n\t\t\tvar fx = util.fx;\n\t\t\tvar t = this.transform3d_.map(function(xy) {\n\t\t\t\treturn xy.map(function(x) {\n\t\t\t\t\treturn fx(x);\n\t\t\t\t});\n\t\t\t});\n\t\t\treturn [\"-webkit-transform: matrix3d(\" + [\n\t\t\t\t[t[0][0], t[1][0], t[2][0], t[3][0]].join(\", \"),\n\t\t\t\t[t[0][1], t[1][1], t[2][1], t[3][1]].join(\", \"),\n\t\t\t\t[t[0][2], t[1][2], t[2][2], t[3][2]].join(\", \"),\n\t\t\t\t[t[0][3], t[1][3], t[2][3], t[3][3]].join(\", \"),\n\t\t\t].join(\",   \")+ \")\"];\n\t\t},\n\t\ttranslate3d: function(a) {\n\t\t\tif(!(a instanceof Array)) a = $A(arguments);\n\t\t\ta[0] = a[0] || 0;\n\t\t\ta[1] = a[1] || 0;\n\t\t\ta[2] = a[2] || 0;\n\t\t\tvar t = this.transform3d_;\n\t\t\tthis.transform3d_ = util.mulMatrix44(this.transform3d_, [\n\t\t\t\t[1, 0, 0, a[0]],\n\t\t\t\t[0, 1, 0, a[1]],\n\t\t\t\t[0, 0, 1, a[2]],\n\t\t\t\t[0, 0, 0, 1   ]\n\t\t\t]);\n\t\t},\n\t\trotatex3d: function(a) {\n\t\t\tvar t = this.transform3d_;\n\t\t\ta = a || 0;\n\t\t\tvar sin = Math.sin(a / 360 * Math.PI * 2.0);\n\t\t\tvar cos = Math.cos(a / 360 * Math.PI * 2.0);\n\n\t\t\tthis.transform3d_ = util.mulMatrix44(this.transform3d_, [\n\t\t\t\t[   1,   0,   0,   0],\n\t\t\t\t[   0, cos,-sin,   0],\n\t\t\t\t[   0, sin, cos,   0],\n\t\t\t\t[   0,   0,   0,   1],\n\t\t\t]);\n\t\t},\n\t\trotatey3d: function(a) {\n\t\t\tvar t = this.transform3d_;\n\t\t\ta = a || 0;\n\t\t\tvar sin = Math.sin(a / 360 * Math.PI * 2.0);\n\t\t\tvar cos = Math.cos(a / 360 * Math.PI * 2.0);\n\n\t\t\tthis.transform3d_ = util.mulMatrix44(this.transform3d_, [\n\t\t\t\t[ cos,   0, sin,   0],\n\t\t\t\t[   0,   1,   0,   0],\n\t\t\t\t[-sin,   0, cos,   0],\n\t\t\t\t[   0,   0,   0,   1],\n\t\t\t]);\n\t\t},\n\t\trotatez3d: function(a) {\n\t\t\tvar t = this.transform3d_;\n\t\t\ta = a || 0;\n\t\t\tvar sin = Math.sin(a / 360 * Math.PI * 2.0);\n\t\t\tvar cos = Math.cos(a / 360 * Math.PI * 2.0);\n\n\t\t\tthis.transform3d_ = util.mulMatrix44(this.transform3d_, [\n\t\t\t\t[ cos,-sin,   0,   0],\n\t\t\t\t[ sin, cos,   0,   0],\n\t\t\t\t[   0,   0,   1,   0],\n\t\t\t\t[   0,   0,   0,   1],\n\t\t\t]);\n\t\t},\n\t\tscale3d: function(a) {\n\t\t\tif(!(a instanceof Array)) a = $A(arguments);\n\t\t\ta[0] = a[0] || 1;\n\t\t\ta[1] = a[1] || 1;\n\t\t\ta[2] = a[2] || 1;\n\t\t\tthis.transform3d_ = util.mulMatrix44(this.transform3d_, [\n\t\t\t\t[a[0],   0,   0, 0],\n\t\t\t\t[   0,a[1],   0, 0],\n\t\t\t\t[   0,   0,a[2], 0],\n\t\t\t\t[   0,   0,   0, 1],\n\t\t\t]);\n\t\t},\n\t\tinitMatrix3d: function(a) {\n\t\t\tthis.transform3d_ = a.clone();\n\t\t},\n\t});\n\tKeyframesUtil = {};\n\n\tKeyframesUtil.CameraWork2DTransform = {\n\t\tevaluate: function(a) {\n\t\t\tvar t = util.invert33(this.transform_);\n\t\t\tvar fx = util.fx;\n\t\t\treturn [\"-webkit-transform: matrix(\" + [fx(t[0][0]), fx(t[1][0]), fx(t[0][1]), fx(t[1][1]), fx(t[0][2]), fx(t[1][2])].join(\",\") + \");\"];\n\t\t},\n\t};\n\n\tKeyframesUtil.CameraWork3DTransform = {\n\t\tgazeFrom: function(p, g, u) {\n\t\t\tif(!this.projMatrix) {\n\t\t\t\tvar self = this;\n\t\t\t\tthis.projMatrix = (function() {\n\t\t\t\t\tvar viewAngle = 1.0;\n\t\t\t\t\tvar far = -1;\n\t\t\t\t\tvar near = -0.001;\n\t\t\t\t\tvar y = 1.0 / Math.tan(viewAngle / 2.0);\n\t\t\t\t\tvar x = y;\n\t\t\t\t\tvar z = far / (far - near);\n\t\t\t\t\tvar w = -z * near;\n\n\t\t\t\t\treturn [\n\t\t\t\t\t  [x, 0, 0, 0],\n\t\t\t\t\t  [0, y, 0, 0],\n\t\t\t\t\t  [0, 0, z, 1],\n\t\t\t\t\t  [0, 0, w, 0]\n\t\t\t\t\t].transpose();\n\t\t\t\t})();\n\t\t\t}\n\n\t\t\tvar pos = (p || [0, 0, 0]);\n\t\t\tvar gazeTo = (g || [0, 0, 0]);\n\t\t\tvar upTo = u || [0, -1, 0];\n\n\t\t\t// multiply -1 to parts of pole (due to right hand coordinate system on css)\n\t\t\tvar z = gazeTo.sub(pos).normalize(1);\n\t\t\tvar x = upTo.cross(z).normalize(1);\n\t\t\tvar y = z.cross(x).normalize(-1);\n\n\t\t\tvar p_x = -p.dot(x);\n\t\t\tvar p_y = -p.dot(y);\n\t\t\tvar p_z = -p.dot(z);\n\n\t\t\tthis.viewMatrix = [\n\t\t\t\t[x[0], y[0], z[0], 0],\n\t\t\t\t[x[1], y[1], z[1], 0],\n\t\t\t\t[x[2], y[2], z[2], 0],\n\t\t\t\t[p_x,  p_y,  p_z, 1]\n\t\t\t];\n\n\t\t\tthis.transform3d_ = util.mulMatrix44(this.viewMatrix, this.projMatrix).transpose();\n\t\t},\n\t};\n\n\twindow.KeyframesBuilder = KeyframesBuilder;\n\n})();\n"},"thumbnail":{"wide":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/y/0/G/y0G3_w.jpg","465":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/y/0/G/y0G3.jpg","100":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/y/0/G/y0G3_100.jpg"},"description_html":"CSS3アニメーション用ライブラリ","modified_date":"2012-12-24 21:34:38","uid":"y0G3","created_date":"2012-12-02 18:39:53","path":"y0G3","description":"CSS3アニメーション用ライブラリ","statistic":{"forked":"0","favorite":"0","pageview":"763"},"user":{"icon":"http://jsdo-static-contents.s3.amazonaws.com/images/icon/b/4/2/c/b42cc3dd3312505b680411b3ead08e2dbc4192e4_100.jpg","name":"crispy"},"url":"http://jsdo.it/crispy/y0G3","title":"animelib"}