{"source":{"css":"body { background-color: #000000; margin: 0px; overflow: hidden; }\n","html":"<input type=\"text\" placeholder=\"画像URL\" size=50 id=\"url\">\n<input type=\"button\" value=\"提供\" onclick=\"main(url.value);\">\n\n<canvas id='world'></canvas>","lisence":"MIT","js":"var d = new DCore;\ninitFaceCom();\n\nvar api = FaceClientAPI;\napi.init(\"bdbd5153f88f23eacadd78cc5d196520\");\nvar img = \"http://t2.gstatic.com/images?q=tbn:ANd9GcShYC4AWv5MxROPthZ3iA6CI0TlLODCAZvbQ9HrCwFmV_k2C2F_\"\n;    \n\nfunction Teikyoulizer() {\n}\nTeikyoulizer.prototype = {\n  gaze: function(gazee) {\n    this.gazee = gazee;\n  },\n  teikyou: function() {\n  \n    api.faces_detect(this.gazee, function(url, data) {\n      var photo = data.photos[0];\n      var tags = photo.tags;\n      var image = new Image();\n      image.src = photo.url;\n      image.width = photo.width;\n      image.height = photo.height;\n      var _ = (function() {\n        return function(p) {\n          return [\n            p[0] / 100,\n            p[1] / 100\n          ];\n        };\n      })(image.width, image.height);\n      var a = function(p) {\n        return _([p.x, p.y]);\n      };\n\n      image.onload = function() {\n        d\n          .rgb(0xff, 0xff, 0xff)\n          .fillBack()\n          .drawImage(image)\n        ;\n\n        tags.each(function(tag) {\n            \n          var eye_left = a(tag.eye_left);\n          var eye_right = a(tag.eye_right);\n          var yaw = tag.yaw.toRadian() / 360;\n          var roll = tag.roll.toRadian() / 360;\n          var pitch = tag.pitch.toRadian() / 360;\n          var size = eye_left.distance(eye_right) * 1.3;\n          var from = [\n            [0.0, 0.0, 0.0],\n            [1.0, 0.0, 0.0],\n            [1.0, 1.0, 0.0],\n            [0.0, 1.0, 0.0],\n          ];\n          var to = from\n              .scale(size.arize(3))\n              .translate([-size / 3, -size / 3, 0])\n              .invoke(\"rotatey\", -yaw)\n            　.invoke(\"rotatez\", roll)\n              .invoke(\"rotate\", pitch)\n             ;\n                                    \n          d\n            .font(\"fantasy\")\n            .transformTo(from, to.translate(eye_left)\n            , function(d) {\n              d\n               .rgb(0x00, 0x00, 0x00)\n               .font(undefined, 1, \"bold\")\n               .fillText(\"提\", [0.0, 0.0])\n               .rgb(0xff, 0xff, 0xff)\n               .font(undefined, 1)\n               .fillText(\"提\", [0.0, 0.0])\n            })\n            .transformTo(from, to.translate(eye_right)\n            , function(d) {\n              d\n               .rgb(0x00, 0x00, 0x00)\n               .font(undefined, 1, \"bold\")\n               .fillText(\"供\", [0.0, 0.0])\n               .rgb(0xff, 0xff, 0xff)\n               .font(undefined, 1)\n               .fillText(\"供\", [0.0, 0.0])\n            })\n          ;\n        })\n      };\n        \n    });\n  },\n};\n\nvar main = function(url) {\n  var t = new Teikyoulizer();\n  t.gaze($(\"#url\").val() || img);\n  t.teikyou();\n};\nwindow.onload = main;\n\n//////////////////////////////////////////////////////////\n// api_client.js\n//////////////////////////////////////////////////////////\nfunction initFaceCom () {\n  /*!\n  * Face.com Rest API JavaScript Library v1.0.2 (alpha) \n  * http://face.com/\n  *\n  * Copyright 2010, \n  * Written By Lior Ben-Kereth\n  *  \n  * v1.0.2 - Add group function. Add detector type param to detection\n  * Date: Sun May 06 14:20:18 2010 +0300\n  */\n  function Face_ClientAPI(_apiKey)\n  {\n    var apiKey = null;\n    var format = 'json';\n    var SUPPORTED_FORMATS = {json: true};\n    \n    var EXCEPTION_ARGUMENT_MISSING    = 'Face_ClientAPI Exception: Argument {0} for function {1} is missing';\n    var EXCEPTION_ARGUMENT_INVALID    = 'Face_ClientAPI Exception: Argument {0} for function {1} is invalid';\n    var EXCEPTION_ARGUMENT_OVER_LIMIT  = 'Face_ClientAPI Exception: Argument {0} for function {1} contains more elements than allowed (got {2}, max is {3})';\n    var EXCEPTION_INIT          = 'Face_ClientAPI Exception: Face_ClientAPI not initialized- call init method with your API key';\n    var EXCEPTION_FORMAT_NOT_SUPPORTED  = 'Face_ClientAPI Exception: Format not supported ({0})';\n    \n    var REST_URL = \"http://api.face.com/\";\n    \n    if (_apiKey != undefined)\n      init(_apiKey);\n    \n    // -------------------------------\n    // Public Functions\n    // -------------------------------\n    this.faces_detect = faces_detect;\n    this.faces_recognize = faces_recognize;\n    this.faces_train = faces_train;\n    this.faces_status = faces_status;\n    \n    this.tags_save = tags_save;\n    this.tags_add = tags_add;\n    this.tags_remove = tags_remove;\n    this.tags_get = tags_get;\n    \n    this.facebook_get = facebook_get;\n    \n    this.account_authenticate = account_authenticate;\n    this.account_limits = account_limits;\n    \n    this.init = init;\n    this.getApiKey = getApiKey;\n    // -------------------------------\n    \n    function account_authenticate(password, callback)\n    {\n      var method = \"account/authenticate\";\n      validateInput(password, 'string', 'password', method);\n      validateInput(callback, 'function', 'callback', method);\n      \n      makeRequest(method, {password: password}, callback);\n      \n      return true;\n    }\n    \n    function account_limits(password, callback)\n    {\n      var method = \"account/limits\";    \n      \n      makeRequest(method, null, callback);\n      \n      return true;\n    }\n    \n    function faces_detect(urls, callback, options)\n    {\n      var method = \"faces/detect\";\n      validateInput(urls, 'url', 'url', method);\n      validateInput(callback, 'function', 'callback', method);\n      \n      var params = { urls: urls };\n      \n      if (typeof options != 'undefined')\n      {\n        if (!empty(options.detector))  params.detector = options.detector;\n      }\n      \n      makeRequest(method, params, callback);\n      return true;\n    }\n    \n    function faces_recognize(urls, options, callback)\n    {\n      var method = \"faces/recognize\";\n      validateInput(urls, 'url', 'url', method);\n      validateInput(callback, 'function', 'callback', method);\n      \n      var params = { urls: urls };\n      \n      if (!empty(options.uids))      params.uids = options.uids;    \n      if (!empty(options.namespace))    params.namespace = options.namespace;    \n      if (!empty(options.owners_ids))    params.namespace = options.owners_ids;\n      if (!empty(options.user_auth))    params.user_auth = options.user_auth;\n      if (!empty(options.callback_url))  params.callback_url = options.callback_url;\n      if (!empty(options.detector))    params.callback_url = options.detector;\n      \n      makeRequest(method, params, callback);\n      \n      return true;\n    }\n    \n    function faces_group(urls, options, callback)\n    {\n      var method = \"faces/group\";\n      validateInput(urls, 'url', 'url', method);\n      validateInput(callback, 'function', 'callback', method);\n      \n      var params = { urls: urls };\n      \n      if (!empty(options.uids))      params.uids = options.uids;    \n      if (!empty(options.namespace))    params.namespace = options.namespace;    \n      if (!empty(options.owners_ids))    params.namespace = options.owners_ids;\n      if (!empty(options.user_auth))    params.user_auth = options.user_auth;\n      if (!empty(options.callback_url))  params.callback_url = options.callback_url;\n      if (!empty(options.detector))    params.callback_url = options.detector;\n      \n      makeRequest(method, params, callback);\n      \n      return true;\n    }\n    \n    function faces_train(options, callback)\n    {\n      var method = \"faces/train\";\n      validateInput(options.uids, 'string', 'uids', method);    \n      \n      var params = {};\n      \n      if (!empty(options.uids))      params.uids = options.uids;          \n      if (!empty(options.namespace))    params.namespace = options.namespace;\n      if (!empty(options.user_auth))    params.user_auth = options.user_auth;\n      if (!empty(options.callback_url))  params.callback_url = options.callback_url;\n      \n      makeRequest(method, params, callback);\n      \n      return true;    \n    }\n    \n    function faces_status(options, callback)\n    {\n      var method = \"faces/status\";\n      validateInput(options.uids, 'string', 'uids', method);    \n      \n      var params = {};\n      \n      if (!empty(options.uids))      params.uids = options.uids;\n      if (!empty(options.namespace))    params.namespace = options.namespace;\n      if (!empty(options.user_auth))    params.user_auth = options.user_auth;        \n      \n      makeRequest(method, params, callback);\n      \n      return true;    \n    }\n    \n    function tags_get(options, callback)\n    {\n      var method = \"tags/get\";\n      validateInput(callback, 'function', 'callback', method);\n      \n      var params = {};      \n      \n      if (!empty(options.urls))        params.urls = options.urls;\n      if (!empty(options.pids))        params.pids = options.pids;\n      if (!empty(options.owner_ids))      params.owner_ids = options.owner_ids;\n      if (!empty(options.uids))        params.uids = options.uids;    \n      if (!empty(options.together))      params.together = options.together;\n      if (!empty(options.filter))        params.filter = options.filter;\n      if (!empty(options.order))        params.order = options.order;\n      if (!empty(options.limit))        params.order = options.limit;    \n      if (!empty(options.namespace))      params.namespace = options.namespace;    \n      if (!empty(options.user_auth))      params.user_auth = options.user_auth;\n      if (!empty(options.callback_url))    params.callback_url = options.callback_url;\n      \n      makeRequest(method, params, callback);\n      \n      return true;\n    }\n    \n    function tags_save(options, callback)\n    {\n      var method = \"tags/save\";\n      validateInput(options.tids, 'string', 'tids', method);\n      \n      var params = { tids: options.tids };\n      \n      if(!empty(options.uid))        params.uid = options.uid;\n      if(!empty(options.label))      params.label = options.label;\n      \n      if(!empty(options.user_auth))    params.user_auth = options.user_auth;\n      if(!empty(options.password))    params.password = options.password;    \n      \n      if ((typeof params.uid == undefined || params.uid == '') && (typeof params.label == undefined || params.label == ''))\n        throw EXCEPTION_ARGUMENT_MISSING.replace('{0}', 'uid or label').replace('{1}', method);\n      \n      makeRequest(method, params, callback);\n    }\n    \n    function tags_add(url, options, callback)\n    {  \n      var method = \"tags/add\";\n      validateInput(url, 'url', 'url', method);\n      validateInput(options.x, 'number', 'x', method);\n      validateInput(options.y, 'number', 'y', method);\n      validateInput(options.width, 'number', 'width', method);\n      validateInput(options.height, 'number', 'height', method);\n      \n      var params = {\n        url: url,\n        x: options.x,\n        y: options.y,\n        width: options.width,\n        height: options.height\n      };\n      \n      if(!empty(options.uid))        params.uid = options.uid;\n      if(!empty(options.pid))        params.pid = options.pid;\n      if(!empty(options.label))      params.label = options.label;\n      if(!empty(options.owner_id))    params.owner_id = options.owner_id;\n      if(!empty(options.tagger_id))    params.tagger_id = options.tagger_id;    \n      \n      if(!empty(options.user_auth))    params.user_auth = options.user_auth;    \n      \n      if(!empty(options.password))    params.password = options.password;\n      \n      if ((typeof params.uid == undefined || params.uid == '') && (typeof params.label == undefined || params.label == ''))\n        throw EXCEPTION_ARGUMENT_MISSING.replace('{0}', 'uid or label').replace('{1}', method);\n      \n      makeRequest(method, params, callback);\n    }\n    \n    function tags_remove(options, callback)\n    {\n      var method = \"tags/remove\";\n      validateInput(options.tids, 'string', 'tids', method);\n      \n      var params = { tids: options.tids };\n      \n      if (!empty(options.tagger_id))      params.tagger_id = options.tagger_id;    \n      if(!empty(options.password))      params.password = options.password;\n      if (!empty(options.user_auth))      params.user_auth = options.user_auth;\n      \n      makeRequest(method, params, callback);\n    }\n    \n    function facebook_get(options, callback)\n    {\n      var method = \"facebook/get\";\n      validateInput(callback, 'function', 'callback', method);\n      \n      var params = {};      \n      \n      if (!empty(options.uids))        params.uids = options.uids;    \n      if (!empty(options.limit))        params.limit = options.limit;\n      if (!empty(options.together))      params.together = options.together;\n      if (!empty(options.filter))        params.filter = options.filter;\n      if (!empty(options.order))        params.order = options.order;      \n      if (!empty(options.user_auth))      params.user_auth = options.user_auth;  \n      \n      makeRequest(method, params, callback);\n      \n      return true;\n    }\n    \n    function init(_apiKey)\n    {\n      validateInput(_apiKey, 'string', 'apiKey', 'init');\n      apiKey = _apiKey;\n    }\n    \n    function getApiKey()\n    {\n      return apiKey;\n    }\n    // -------------------------------\n    \n    \n    // -------------------------------\n    // Private Functions\n    // -------------------------------\n    function makeRequest(method, params, callback)\n    {\n      if (!apiKey) throw EXCEPTION_INIT;\n      \n      var sUrl = REST_URL + method + \".\" + format + \"?api_key=\" + encodeURIComponent(apiKey);\n      \n      if (params != null)\n      {\n        for (param in params)\n          sUrl += \"&\" + param + \"=\" + encodeURIComponent(params[param]);\n      }\n      \n      var iRequest = Math.round(Math.random()*10000000);\n      \n      var sCallback = \"jsonp\" + iRequest;\n      window[sCallback] = function(data){\n        document.getElementById(\"fapir\" + iRequest).parentNode.removeChild(document.getElementById(\"fapir\" + iRequest));\n        if (typeof callback == \"function\")\n        {\n          if (params.urls != undefined)\n            callback(params.urls, data);\n          else\n            callback(data);\n        }\n      };\n      sUrl += \"&callback=\" + sCallback + \"&\" + new Date().getTime().toString();        \n      \n      var script = document.createElement(\"script\");        \n      script.setAttribute(\"src\", sUrl);\n      script.setAttribute(\"type\",\"text/javascript\");                \n      script.setAttribute(\"id\",\"fapir\"+iRequest);\n      document.body.appendChild(script);\n    }\n    \n    function validateInput(input, type, sInputName, sMethodName)\n    {\n      var b = true;\n      \n      if (empty(input))\n      {\n        throw EXCEPTION_ARGUMENT_MISSING.replace('{0}', sInputName).replace('{1}', sMethodName);\n      }\n      else\n      {\n        switch(type)\n        {\n          case 'string':\n            b = !(input.length <= 0)\n              break;\n          case 'number':\n            b = !(input*1 != input || input < 0);\n            break;\n              case 'url':\n              b = !(input.length <= 0);\n            break\n              case 'function':\n              b = !(typeof input != 'function');\n            break;\n              }\n              }\n              \n              if (!b)\n              throw EXCEPTION_ARGUMENT_INVALID.replace('{0}', sInputName).replace('{1}', sMethodName);\n            \n            return b;\n        }\n        \n        \n        function validateNumberOfParams(input, max, sInputName, sMethodName)\n        {\n          var num = input.split(\",\").length;\n          if (num > max)\n            throw EXCEPTION_ARGUMENT_OVER_LIMIT.replace('{0}', sInputName).replace('{1}', sMethodName).replace('{2}', num).replace('{3}', max);\n          return true;\n        }\n        \n        \n        function defined(s){ return (typeof s != \"undefined\" && s != undefined); }\n        function empty(s) { return (!defined(s) || s == null || s == ''); }\n      }\n      \n      window.FaceClientAPI = new Face_ClientAPI();\n}"},"thumbnail":{"wide":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/5/G/w/5GwY_w.jpg","465":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/5/G/w/5GwY.jpg","100":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/5/G/w/5GwY_100.jpg"},"description_html":"画像認識APIは下記のサイトの提供です<br />\n・<a  href=\"http://face.com/\">http://face.com/</a>","modified_date":"2011-05-15 01:05:42","uid":"5GwY","created_date":"2011-05-15 00:56:23","path":"5GwY","description":"画像認識APIは下記のサイトの提供です\n・http://face.com/","statistic":{"forked":"4","favorite":"5","pageview":"4110"},"user":{"icon":"http://jsdo-static-contents.s3.amazonaws.com/images/icon/b/4/2/c/b42cc3dd3312505b680411b3ead08e2dbc4192e4_100.jpg","name":"crispy"},"url":"http://jsdo.it/crispy/5GwY","title":"提供目"}