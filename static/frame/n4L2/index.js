// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.onload = function() {
    var Material, MaterialA, MaterialB, MaterialC, MaterialManager, Note, Score, d, instruments, loadAudio, main, measure, mm, score, _ref, _ref1, _ref2;
    (function() {
      var lastTime, org_setTimeout;
      lastTime = 0;
      org_setTimeout = window.setTimeout;
      return window.setTimeout = function(func, wait) {
        var realWait;
        realWait = lastTime ? wait : wait - (new Date() - lastTime);
        if (realWait <= 0) {
          realWait = 1;
        }
        lastTime = +new Date();
        return org_setTimeout(func, realWait);
      };
    })();
    loadAudio = function() {
      var checkSupportFor, instruments, sacrifice, supports_mp3, supports_ogg;
      sacrifice = document.createElement('audio');
      if (!sacrifice) {
        alert('Your browser does not support <audio>!');
        return;
      }
      checkSupportFor = function(type) {
        var cpt;
        cpt = sacrifice.canPlayType(type);
        return (cpt !== "no") && (cpt !== "");
      };
      supports_mp3 = checkSupportFor("audio/mp3");
      supports_ogg = checkSupportFor("audio/ogg");
      if (!(supports_mp3 || supports_ogg)) {
        alert('Your browser supports neither mp3 nor ogg!');
        return;
      }
      instruments = ["hat", "snare", "bass"].map(function(e) {
        return new Audio("../se/" + e + (supports_ogg ? ".ogg" : ".mp3"));
      });
      instruments.each(function(e) {
        e.addEventListener("canplay", function() {
          return e.playable = true;
        }, true);
        return e.load();
      });
      return instruments;
    };
    d = new DCore();
    measure = 32;
    Material = (function() {
      function Material() {
        this.p = $A(arguments)[0];
        this.count = 0;
      }

      Material.prototype.act = function() {
        return this.count++;
      };

      Material.prototype.draw = function() {};

      return Material;

    })();
    MaterialA = (function(_super) {
      __extends(MaterialA, _super);

      function MaterialA() {
        _ref = MaterialA.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      MaterialA.prototype.draw = function() {
        var size;
        if (this.count < 4) {
          this.model = $R(0, 5).map(function(e) {
            return [0, 1].rotate(100.0.randf());
          });
        }
        size = this.count > 4 ? 0.1 : 0.1 + 0.1 * (0.5 - this.count / 4).randf();
        return d.rgb(0x00, 0x00, 0x00).lineWidth(0.01).line(this.model.scale(size.arize(2)).translate(this.p)).stroke();
      };

      return MaterialA;

    })(Material);
    MaterialB = (function(_super) {
      __extends(MaterialB, _super);

      function MaterialB() {
        _ref1 = MaterialB.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      MaterialB.prototype.draw = function() {
        var size;
        if (this.count < 4) {
          this.model = $R(0, 2).map(function(e) {
            return [0, 1].rotate(e.toRadian() / 3 + 2.0.randf());
          });
        }
        size = this.count > 4 ? 0.1 : 0.1 + 0.1 * (0.5 - this.count / 4).randf();
        return d.rgb(0x00, 0x00, 0x00).quads(this.model.scale(size.arize(2)).translate(this.p)).fill();
      };

      return MaterialB;

    })(Material);
    MaterialC = (function(_super) {
      __extends(MaterialC, _super);

      function MaterialC() {
        _ref2 = MaterialC.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      MaterialC.prototype.draw = function() {
        var size;
        size = this.count > 4 ? 0.1 : 0.1 + 0.1 * (0.5 - this.count / 4).randf();
        return d.rgb(0x00, 0x00, 0x00).circle(this.p, size).fill();
      };

      return MaterialC;

    })(Material);
    MaterialManager = (function() {
      function MaterialManager() {
        this.ms = [];
      }

      MaterialManager.prototype.registor = function(e) {
        return this.ms.push(e);
      };

      MaterialManager.prototype.act = function() {
        this.ms.invoke("act");
        return this.ms = this.ms.select(function(e) {
          return e.count < 18;
        });
      };

      MaterialManager.prototype.draw = function() {
        return this.ms.invoke("draw");
      };

      return MaterialManager;

    })();
    Note = (function() {
      function Note() {
        var _ref3;
        this.active = false;
        _ref3 = $A(arguments), this.ps = _ref3[0], this.xy = _ref3[1];
      }

      Note.prototype.act = function() {};

      Note.prototype.draw = function() {
        return d.quads(this.ps).rgb((this.active ? 0x99 : 0xcc).arize(3)).fill().rgb(0xff.arize(3)).lineWidth(0.003);
      };

      Note.prototype.isInBound = function(p) {
        var _ref3, _ref4;
        return (this.ps[0][0] <= (_ref3 = p[0]) && _ref3 <= this.ps[1][0]) && (this.ps[1][1] <= (_ref4 = p[1]) && _ref4 <= this.ps[2][1]);
      };

      Note.prototype.flipFlop = function() {
        return this.active = !this.active;
      };

      Note.prototype.invoke = function() {
        var cstr, inst;
        if (this.active) {
          inst = instruments[this.xy[0] % 4][this.xy[1]];
          if (inst.playable) {
            inst.play();
          }
          cstr = [MaterialA, MaterialB, MaterialC][this.xy[1]];
          return mm.registor(new cstr([1.0.randf(), 0.8.randf()]));
        }
      };

      return Note;

    })();
    Score = (function() {
      var FineSeekMax, NoteHeight, NoteTypes;

      FineSeekMax = 128;

      NoteHeight = 0.03;

      NoteTypes = 3;

      function Score() {
        var margin, size;
        margin = 0.02;
        size = (1 - margin * 2) / measure;
        this.notes = $R(0, NoteTypes, true).map(function(y) {
          return $R(0, measure, true).map(function(x) {
            var note;
            note = new Note(Geo.rect().scale([size * 0.8, NoteHeight]).translate([margin + size * x, 0.87 + NoteHeight * y * 1.5]), [x, y]);
            if ((x + y * 2) % 4 === 0 && y) {
              note.flipFlop();
            }
            return note;
          });
        });
      }

      Score.prototype.act = function() {
        var _this = this;
        if (this.cnt == null) {
          this.cnt = 0;
        }
        this.cnt++;
        if (this.fineSeek == null) {
          this.fineSeek = 0;
        }
        this.fineSeek++;
        this.fineSeek %= FineSeekMax;
        this.seek = ~~(this.fineSeek * measure / FineSeekMax);
        if (this.fineSeek % (FineSeekMax / measure) === 0) {
          return this.notes.zipWithIndex(function(e, i) {
            return e[_this.seek].invoke();
          });
        }
      };

      Score.prototype.draw = function() {
        var h;
        h = 0.84;
        d.blend("source-over").alpha(0.7).rgb(0xee, 0xee, 0xee).quads([[0, h], [1, h], [1, 1], [0, 1]]).fill();
        d.alpha(1).rgb(0x99, 0x99, 0x99).lineWidth(0.005).line([[0, h], [1, h]]).stroke().line([[0, h + 0.01], [1, h + 0.01]]).stroke();
        d.rgb(0x00, 0x00, 0x00).quads(Geo.rect().scale([0.01, 0.01]).translate([0.02 + this.fineSeek / FineSeekMax * 0.96, h])).fill();
        return this.notes.flatten().each(function(e) {
          return e.draw();
        });
      };

      Score.prototype.click = function(p) {
        return this.notes.flatten().select(function(e) {
          return e.isInBound(p);
        }).each(function(e) {
          return e.flipFlop();
        });
      };

      return Score;

    })();
    mm = new MaterialManager();
    score = new Score();
    instruments = [];
    instruments[0] = loadAudio();
    instruments[1] = loadAudio();
    instruments[2] = loadAudio();
    instruments[3] = loadAudio();
    document.addEventListener("click", function(e) {
      var px, py;
      px = e.clientX / d.width - d.left2d;
      py = e.clientY / d.height - d.top2d;
      return score.click([px, py]);
    }, true);
    main = function(c) {
      if (c == null) {
        c = 0;
      }
      d.rgb(0xff, 0xff, 0xff).fillBack();
      score.act();
      mm.act();
      mm.draw();
      return score.draw();
    };
    return setInterval(main, 33);
  };

}).call(this);

/*
//@ sourceMappingURL=index.map
*/
