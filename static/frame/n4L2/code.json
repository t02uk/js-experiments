{"source":{"css":"* {\r\n    margin:0px; padding: 0px;\r\n}\r\nbody {\r\n    background-color: #fff;\r\n    overflow: hidden;\r\n}\r\n\r\n","html":"<!--\r\njsdo.itでCoffeeScriptを試す場合のデモです\r\nJavaScript領域に前後を/*と*/でくくってCoffeeScriptを記述してください\r\njQueryが使用できます（他に必要なライブラリがあれば「＋」から読みこめば実行できます）\r\n-->\r\n<script src=\"http://coffeescript.org/extras/coffee-script.js\"></script>\r\n<script src=\"http://jsrun.it/lib/prototype-1.6.1/js\"></script>\r\n<script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.5.1/jquery.min.js\"></script>\r\n<script>\r\n$(function () {\r\n  var js = CoffeeScript.compile(jQuery('script:last').text().replace(/^[\\s\\S]*?\\/\\*/, '').replace(/\\*\\/\\s*$/, ''));\r\n  eval(js)\r\n});\r\n</script>\r\n<canvas id='world'></canvas>","lisence":"MIT","js":"/*\r\nwindow.onload = ->\r\n\r\n  # pseude fps control\r\n  (() ->\r\n    lastTime = 0\r\n    org_setTimeout = window.setTimeout\r\n    window.setTimeout = (func, wait) ->\r\n      realWait = if lastTime then wait else wait - (new Date() - lastTime)\r\n      realWait = 1 if realWait <= 0\r\n      lastTime = +new Date()\r\n      org_setTimeout(func, realWait)\r\n  )()\r\n\r\n  # audio loader\r\n  loadAudio = () ->\r\n    sacrifice = document.createElement('audio')\r\n    if not sacrifice\r\n      alert('Your browser does not support <audio>!')\r\n      return\r\n\r\n    checkSupportFor = (type) ->\r\n      cpt = sacrifice.canPlayType(type)\r\n      return (cpt isnt \"no\") && (cpt isnt \"\")\r\n\r\n    supports_mp3 = checkSupportFor(\"audio/mp3\")\r\n    supports_ogg = checkSupportFor(\"audio/ogg\")\r\n    \r\n    if not (supports_mp3 or supports_ogg)\r\n      alert('Your browser supports neither mp3 nor ogg!')\r\n      return\r\n        \r\n    # load audio\r\n    instruments =\r\n      [\"hat\", \"snare\", \"bass\"].map (e) ->\r\n        return new Audio(\"http://dl.dropbox.com/u/3589634/resource/se/\" + e + (if supports_ogg then \".ogg\" else \".mp3\"))\r\n\r\n    instruments.each (e) ->\r\n      e.addEventListener \"canplay\", () ->\r\n        e.playable = true\r\n      , true\r\n      e.load()\r\n\r\n    return instruments\r\n\r\n\r\n  # create instance of my lib\r\n  d = new DCore()\r\n\r\n  measure = 32\r\n\r\n\r\n  # material \r\n  class Material\r\n    constructor: ->\r\n      [@p] = $A(arguments)\r\n      @count = 0\r\n    act: ->\r\n      @count++\r\n      #@p[1] -= 0.001 + @count * 0.0001\r\n    draw: ->\r\n\r\n  # circle type\r\n  class MaterialA extends Material\r\n    draw: ->\r\n      if @count < 4\r\n        @model = $R(0, 5).map (e) -> \r\n          [0, 1].rotate((100.0).randf())\r\n      size = if @count > 4 then 0.1\r\n      else 0.1 + 0.1 * (0.5 - @count / 4).randf()\r\n      d\r\n       .rgb(0x00, 0x00, 0x00)\r\n       .lineWidth(0.01)\r\n       .line(@model.scale(size.arize(2)).translate(@p))\r\n       .stroke()\r\n\r\n  # triangle \r\n  class MaterialB extends Material\r\n    draw: ->\r\n      if @count < 4\r\n        @model = $R(0, 2).map (e) -> \r\n          [0, 1].rotate(e.toRadian() / 3 + (2.0).randf())\r\n      size = if @count > 4 then 0.1\r\n      else 0.1 + 0.1 * (0.5 - @count / 4).randf()\r\n\r\n      d\r\n       .rgb(0x00, 0x00, 0x00)\r\n       .quads(@model.scale(size.arize(2)).translate(@p))\r\n       .fill()\r\n\r\n  # mojamoja type\r\n  class MaterialC extends Material\r\n    draw: ->\r\n      size = if @count > 4 then 0.1\r\n      else 0.1 + 0.1 * (0.5 - @count / 4).randf()\r\n      d\r\n       .rgb(0x00, 0x00, 0x00)\r\n       .circle(@p, size)\r\n       .fill()\r\n\r\n  # manager of material\r\n  class MaterialManager\r\n    constructor: ->\r\n      @ms = []\r\n    registor: (e) ->\r\n      @ms.push(e)\r\n    act: ->\r\n      @ms.invoke(\"act\")\r\n      @ms = @ms.select (e) ->\r\n        e.count < 18\r\n    draw: ->\r\n      @ms.invoke(\"draw\")\r\n\r\n\r\n  # note\r\n  class Note\r\n    constructor: ->\r\n      @active = false\r\n      [@ps, @xy] = $A(arguments)\r\n    act: ->\r\n    draw: ->\r\n      d\r\n       .quads(@ps)\r\n       .rgb((if @active then 0x99 else 0xcc).arize(3))\r\n       .fill()\r\n       .rgb(0xff.arize(3))\r\n       .lineWidth(0.003)\r\n       #.stroke()\r\n    isInBound: (p) ->\r\n      @ps[0][0] <= p[0] <= @ps[1][0] and\r\n      @ps[1][1] <= p[1] <= @ps[2][1]\r\n    flipFlop: ->\r\n      @active = not @active\r\n    invoke: ->\r\n      if @active\r\n        inst = instruments[@xy[0] % 4][@xy[1]]\r\n        if inst.playable\r\n          inst.play()\r\n        cstr = [MaterialA, MaterialB, MaterialC][@xy[1]]\r\n        mm.registor(new cstr([(1.0).randf(), (0.8).randf()]))\r\n\r\n\r\n  # score\r\n  class Score\r\n    FineSeekMax = 128\r\n    NoteHeight = 0.03\r\n    NoteTypes = 3\r\n    constructor: ->\r\n      # for notes\r\n      margin = 0.02\r\n      size = (1 - margin * 2) / measure\r\n      @notes = $R(0, NoteTypes, true).map (y) ->\r\n        $R(0, measure, true).map (x) ->\r\n          note = new Note(Geo.rect().scale([size * 0.8, NoteHeight]).translate([margin + size * x, 0.87 + NoteHeight * y * 1.5]), [x, y])\r\n          if (x + y * 2) % 4 is 0 and y\r\n            note.flipFlop()\r\n          note\r\n    act: ->\r\n      @cnt ?= 0\r\n      @cnt++\r\n      @fineSeek ?= 0\r\n      @fineSeek++\r\n      @fineSeek %= FineSeekMax\r\n      @seek = ~~(@fineSeek * measure / FineSeekMax)\r\n      if @fineSeek % (FineSeekMax / measure) is 0\r\n        @notes.zipWithIndex (e, i) =>\r\n          e[@seek].invoke()\r\n    draw: ->\r\n      h = 0.84\r\n      # fill back\r\n      d\r\n       .blend(\"source-over\")\r\n       .alpha(0.7)\r\n       .rgb(0xee, 0xee, 0xee)\r\n       .quads([[0, h], [1, h], [1, 1], [0, 1]])\r\n       .fill()\r\n\r\n      # separator\r\n      d\r\n       .alpha(1)\r\n       .rgb(0x99, 0x99, 0x99)\r\n       .lineWidth(0.005)\r\n       .line([[0, h], [1, h]])\r\n       .stroke()\r\n       .line([[0, h + 0.01], [1, h + 0.01]])\r\n       .stroke()\r\n\r\n      # seek bar\r\n      d\r\n       .rgb(0x00, 0x00, 0x00)\r\n       .quads(Geo.rect().scale([0.01, 0.01]).translate([0.02 + @fineSeek / FineSeekMax * 0.96, h]))\r\n       .fill()\r\n\r\n      # notes\r\n      @notes.flatten().each (e) ->\r\n        e.draw()\r\n    click: (p) ->\r\n      # notes control\r\n      @notes.flatten().select (e) ->\r\n        e.isInBound(p)\r\n      .each (e) ->\r\n        e.flipFlop()\r\n\r\n\r\n\r\n  mm = new MaterialManager()\r\n  score = new Score()\r\n\r\n  instruments = []\r\n  instruments[0] = loadAudio()\r\n  instruments[1] = loadAudio()\r\n  instruments[2] = loadAudio()\r\n  instruments[3] = loadAudio()\r\n\r\n  # ovserve mouse\r\n  document.addEventListener \"click\", (e) ->\r\n    px = e.clientX / d.width - d.left2d\r\n    py = e.clientY / d.height - d.top2d\r\n    score.click([px, py])\r\n  , true\r\n\r\n  # main loop\r\n  main = (c = 0) ->\r\n\r\n    # init background\r\n    d\r\n     .rgb(0xff, 0xff, 0xff)\r\n     .fillBack()\r\n\r\n    # act\r\n    score.act()\r\n    mm.act()\r\n\r\n    # score control\r\n    mm.draw()\r\n    score.draw()\r\n\r\n  setInterval(main, 33)\r\n\r\n# vim:sw=2:ts=2\r\n*/"},"thumbnail":{"wide":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/n/4/L/n4L2_w.jpg","465":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/n/4/L/n4L2.jpg","100":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/n/4/L/n4L2_100.jpg"},"description_html":"音の可視化テス","modified_date":"2016-01-17 21:24:56","uid":"n4L2","created_date":"2011-07-18 00:28:04","path":"n4L2","description":"音の可視化テス","statistic":{"forked":"0","favorite":"4","pageview":"2159"},"user":{"icon":"http://jsdo-static-contents.s3.amazonaws.com/images/icon/b/4/2/c/b42cc3dd3312505b680411b3ead08e2dbc4192e4_100.jpg","name":"crispy"},"url":"http://jsdo.it/crispy/n4L2","title":"visualized drum machine"}