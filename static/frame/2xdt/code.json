{"source":{"css":"* {\r\n    margin: 0px;\r\n    padding: 0px;\r\n}\r\n\r\nbody {\r\n  overflow: hidden;\r\n}\r\n\r\ncanbas {\r\n    width: 465px;\r\n    height: 465px;\r\n}\r\n\r\nvideo {\r\n    display: hidden;\r\n    width: 128px;\r\n    height: 128px;\r\n}","html":"<canvas id=\"world\"></canvas>\r\n<video id=\"video\"></video>","lisence":"MIT","js":"// Generated by CoffeeScript 1.4.0\n(function() {\n  var __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n  window.onload = function() {\n    var Note, Score, VFX, VFXColorShift, VFXFlash, VFXHorizontalSlice, VFXManager, VFXSwapColor, VFXTile, VFXTileSlice, VFXVerticalSlice, d, getUserMedia, instruments, loadAudio, main, measure, score, video, vm, withVendorPrefix;\n    video = document.getElementById(\"video\");\n    withVendorPrefix = function(obj, member) {\n      return obj[member] || [\"webkit\", \"moz\", \"ms\"].inject(void 0, function(i, e) {\n        return i || obj[e + member.replace(/^\\w/, function(x) {\n          return x.toUpperCase();\n        })];\n      });\n    };\n    getUserMedia = withVendorPrefix(navigator, \"getUserMedia\");\n    if (!getUserMedia) {\n      alert(\"video is not supported\");\n      return;\n    }\n    getUserMedia.call(navigator, {\n      video: true,\n      toString: function() {\n        return \"video\";\n      }\n    }, function(stream) {\n      var URL, url;\n      URL = withVendorPrefix(window, \"URL\");\n      url = URL.createObjectURL(stream) || stream;\n      video.src = url;\n      video.width = 465;\n      video.height = 465;\n      video.style.display = \"hidden\";\n      return video.play();\n    }, function() {\n      alert(\"stream is not available\");\n    });\n    (function() {\n      var lastTime, org_setTimeout;\n      lastTime = 0;\n      org_setTimeout = window.setTimeout;\n      return window.setTimeout = function(func, wait) {\n        var realWait;\n        realWait = lastTime ? wait : wait - (new Date() - lastTime);\n        if (realWait <= 0) {\n          realWait = 1;\n        }\n        lastTime = +new Date();\n        return org_setTimeout(func, realWait);\n      };\n    })();\n    loadAudio = function() {\n      var checkSupportFor, instruments, sacrifice, supports_mp3;\n      sacrifice = document.createElement('audio');\n      if (!sacrifice) {\n        alert('audio not supported');\n        return;\n      }\n      checkSupportFor = function(type) {\n        var cpt;\n        cpt = sacrifice.canPlayType(type);\n        return (cpt !== \"no\") && (cpt !== \"\");\n      };\n      supports_mp3 = checkSupportFor(\"audio/mp3\");\n      if (!supports_mp3) {\n        alert('audio not supported');\n        return;\n      }\n      instruments = [\"resource/se/se_maoudamashii_instruments_drum1_cymbal.mp3\", \"resource/se/se_maoudamashii_instruments_drum1_snare.mp3\", \"resource/se/se_maoudamashii_instruments_drum1_bassdrum1.mp3\", \"resource/se/se_maoudamashii_instruments_drum1_hat.mp3\", \"resource/se/se_maoudamashii_instruments_drum1_tom1.mp3\", \"resource/se/se_maoudamashii_instruments_drum1_tom2.mp3\", \"resource/se/se_maoudamashii_instruments_drum1_tom3.mp3\"].map(function(x) {\n        return new Audio(\"https://dl.dropboxusercontent.com/u/3589634/\" + x);\n      });\n      instruments.each(function(e) {\n        e.addEventListener(\"canplay\", function() {\n          return e.playable = true;\n        }, true);\n        return e.load();\n      });\n      return instruments;\n    };\n    d = new DCore();\n    measure = 32;\n    VFX = (function() {\n\n      function VFX() {\n        this.p = $A(arguments)[0];\n        this.count = 0;\n      }\n\n      VFX.prototype.act = function() {\n        return this.count++;\n      };\n\n      VFX.prototype.draw = function() {};\n\n      return VFX;\n\n    })();\n    VFXTile = (function(_super) {\n\n      __extends(VFXTile, _super);\n\n      function VFXTile() {\n        return VFXTile.__super__.constructor.apply(this, arguments);\n      }\n\n      VFXTile.prototype.draw = function(sd) {\n        var m,\n          _this = this;\n        this.m = this.m || $R(1, 4).rand();\n        m = this.m;\n        return m.times(function(i) {\n          var w, x;\n          w = 1 / m;\n          x = i * w;\n          return m.times(function(j) {\n            var h, y;\n            h = 1 / m;\n            y = j * h;\n            return sd.drawImage(video, [0, 0], [1, 1], [x, y], [w, h]);\n          });\n        });\n      };\n\n      return VFXTile;\n\n    })(VFX);\n    VFXHorizontalSlice = (function(_super) {\n\n      __extends(VFXHorizontalSlice, _super);\n\n      function VFXHorizontalSlice() {\n        return VFXHorizontalSlice.__super__.constructor.apply(this, arguments);\n      }\n\n      VFXHorizontalSlice.prototype.draw = function(sd) {\n        var fx, h, y, _results;\n        y = 0;\n        _results = [];\n        while (true) {\n          h = $R(0.01, 0.1).randf();\n          fx = $R(-1, 1).randf() * (0.3 / this.count);\n          if (y + h > 1) {\n            h -= (y + h) - 1;\n          }\n          sd.drawImage(sd, [0, y], [1, h], [fx, y], [1 - fx, h]);\n          if (y + h >= 0.9999) {\n            break;\n          }\n          _results.push(y += h);\n        }\n        return _results;\n      };\n\n      return VFXHorizontalSlice;\n\n    })(VFX);\n    VFXVerticalSlice = (function(_super) {\n\n      __extends(VFXVerticalSlice, _super);\n\n      function VFXVerticalSlice() {\n        return VFXVerticalSlice.__super__.constructor.apply(this, arguments);\n      }\n\n      VFXVerticalSlice.prototype.draw = function(sd) {\n        var fy, w, x, _results;\n        x = 0;\n        _results = [];\n        while (true) {\n          w = $R(0.01, 0.1).randf();\n          fy = $R(-1, 1).randf() * (0.3 / this.count);\n          if (x + w > 1) {\n            w -= (x + w) - 1;\n          }\n          sd.drawImage(sd, [x, 0], [w, 1], [x, fy], [w, 1 - fy]);\n          if (x + w >= 0.9999) {\n            break;\n          }\n          _results.push(x += w);\n        }\n        return _results;\n      };\n\n      return VFXVerticalSlice;\n\n    })(VFX);\n    VFXTileSlice = (function(_super) {\n\n      __extends(VFXTileSlice, _super);\n\n      function VFXTileSlice() {\n        return VFXTileSlice.__super__.constructor.apply(this, arguments);\n      }\n\n      VFXTileSlice.prototype.draw = function(sd) {\n        var _this = this;\n        return 10..times(function(i) {\n          var h, h2, w, w2, x, x2, y, y2;\n          x = $R(0.0, 0.9).randf();\n          y = $R(0.0, 0.9).randf();\n          w = $R(0.3, 0.6).randf();\n          h = $R(0.3, 0.6).randf();\n          x2 = $R(-0.05, 0.05).randf() + x;\n          y2 = $R(-0.05, 0.05).randf() + y;\n          w2 = $R(-0.01, 0.01).randf() * _this.count + w;\n          h2 = $R(-0.01, 0.01).randf() * _this.count + h;\n          return sd.drawImage(sd, [x2, y2], [w2, h2], [x, y], [w, h]);\n        });\n      };\n\n      return VFXTileSlice;\n\n    })(VFX);\n    VFXFlash = (function(_super) {\n\n      __extends(VFXFlash, _super);\n\n      function VFXFlash() {\n        return VFXFlash.__super__.constructor.apply(this, arguments);\n      }\n\n      VFXFlash.prototype.draw = function(sd) {\n        sd.hsv(1..randf(), 0.5, 0.5).blend(\"lighter\").alpha($R(0.2, 0.9).randf()).fillBack();\n        return sd.blend(\"source-over\").alpha(1);\n      };\n\n      return VFXFlash;\n\n    })(VFX);\n    VFXSwapColor = (function(_super) {\n\n      __extends(VFXSwapColor, _super);\n\n      function VFXSwapColor() {\n        return VFXSwapColor.__super__.constructor.apply(this, arguments);\n      }\n\n      VFXSwapColor.prototype.draw = function(sd) {\n        var i, img, len, p, work;\n        p = sd.getNativeImageData();\n        img = p.data;\n        len = img.length;\n        i = 0;\n        while (i < len) {\n          work = img[0];\n          img[i + 0] += img[i + 1] * this.count >> 2;\n          img[i + 1] += img[i + 2] * this.count >> 2;\n          img[i + 2] += work * this.count >> 2;\n          i += 4;\n        }\n        return sd.ctx.putImageData(p, 0, 0);\n      };\n\n      return VFXSwapColor;\n\n    })(VFX);\n    VFXColorShift = (function(_super) {\n\n      __extends(VFXColorShift, _super);\n\n      function VFXColorShift() {\n        return VFXColorShift.__super__.constructor.apply(this, arguments);\n      }\n\n      VFXColorShift.prototype.draw = function(sd) {\n        var bd, bi, gd, gi, i, img, len, p, rd, ri, t, th;\n        p = sd.getNativeImageData();\n        img = p.data;\n        len = img.length;\n        i = 0;\n        th = this.count * 32 + 64;\n        t = this.count * 6;\n        rd = ($R(-t, t).rand() + $R(-t, t).rand() * 128) * 4 + 0;\n        gd = ($R(-t, t).rand() + $R(-t, t).rand() * 128) * 4 + 1;\n        bd = ($R(-t, t).rand() + $R(-t, t).rand() * 128) * 4 + 2;\n        while (i < len) {\n          ri = i + rd;\n          if (0 <= ri && ri < len) {\n            img[ri] += img[i + 0] >> 1;\n          }\n          gi = i + gd;\n          if (0 <= gi && gi < len) {\n            img[gi] += img[i + 1] >> 1;\n          }\n          bi = i + bd;\n          if (0 <= bi && bi < len) {\n            img[ri] += img[i + 2] >> 1;\n          }\n          i += 4;\n        }\n        return sd.ctx.putImageData(p, 0, 0);\n      };\n\n      return VFXColorShift;\n\n    })(VFX);\n    VFXManager = (function() {\n\n      function VFXManager() {\n        this.ms = [];\n      }\n\n      VFXManager.prototype.registor = function(e) {\n        return this.ms.push(e);\n      };\n\n      VFXManager.prototype.act = function() {\n        this.ms.invoke(\"act\");\n        return this.ms = this.ms.select(function(e) {\n          return e.count < 6;\n        });\n      };\n\n      VFXManager.prototype.draw = function() {\n        this.sd = this.sd || d.subTexture(128, 128);\n        this.sd.drawImage(video);\n        this.ms.invoke(\"draw\", this.sd);\n        return d.blend(\"source-over\").alpha(1).drawImage(this.sd);\n      };\n\n      return VFXManager;\n\n    })();\n    Note = (function() {\n\n      function Note() {\n        var _ref;\n        this.active = false;\n        _ref = $A(arguments), this.ps = _ref[0], this.xy = _ref[1];\n      }\n\n      Note.prototype.act = function() {};\n\n      Note.prototype.draw = function() {\n        return d.quads(this.ps).blend(\"lighter\").alpha(0.5).rgb((this.active ? 0xff : 0x66).arize(3)).fill().rgb(0xff.arize(3)).lineWidth(0.003);\n      };\n\n      Note.prototype.isInBound = function(p) {\n        var _ref, _ref1;\n        return (this.ps[0][0] <= (_ref = p[0]) && _ref <= this.ps[1][0]) && (this.ps[1][1] <= (_ref1 = p[1]) && _ref1 <= this.ps[2][1]);\n      };\n\n      Note.prototype.flipFlop = function() {\n        return this.active = !this.active;\n      };\n\n      Note.prototype.invoke = function() {\n        var cstr, inst;\n        if (this.active) {\n          inst = instruments[this.xy[0] % 4][this.xy[1]];\n          if (inst.playable) {\n            inst.pause();\n            inst.currentTime = 0;\n            inst.play();\n          }\n          cstr = [VFXTile, VFXSwapColor, VFXColorShift, VFXFlash, VFXHorizontalSlice, VFXVerticalSlice, VFXTileSlice][this.xy[1]];\n          if (cstr) {\n            return vm.registor(new cstr([1.0.randf(), 0.8.randf()]));\n          }\n        }\n      };\n\n      return Note;\n\n    })();\n    Score = (function() {\n      var FineSeekMax, NoteHeight, NoteTypes;\n\n      FineSeekMax = 128;\n\n      NoteHeight = 0.03;\n\n      NoteTypes = 7;\n\n      function Score() {\n        var margin, size;\n        margin = 0.02;\n        size = (1 - margin * 2) / measure;\n        this.notes = $R(0, NoteTypes, true).map(function(y) {\n          return $R(0, measure, true).map(function(x) {\n            var note;\n            note = new Note(Geo.rect().scale([size * 0.8, NoteHeight]).translate([margin + size * x, 0.68 + NoteHeight * y * 1.5]), [x, y]);\n            if (y === 4 && x % 2 === 0) {\n              null;\n            }\n            return note;\n          });\n        });\n      }\n\n      Score.prototype.act = function() {\n        var _ref, _ref1,\n          _this = this;\n        if ((_ref = this.cnt) == null) {\n          this.cnt = 0;\n        }\n        this.cnt++;\n        if ((_ref1 = this.fineSeek) == null) {\n          this.fineSeek = 0;\n        }\n        this.fineSeek++;\n        this.fineSeek %= FineSeekMax;\n        this.seek = ~~(this.fineSeek * measure / FineSeekMax);\n        if (this.fineSeek % (FineSeekMax / measure) === 0) {\n          return this.notes.zipWithIndex(function(e, i) {\n            return e[_this.seek].invoke();\n          });\n        }\n      };\n\n      Score.prototype.draw = function() {\n        var h;\n        h = 0.65;\n        d.blend(\"source-over\").alpha(0.3).rgb(0x00, 0x00, 0x00).quads([[0, h], [1, h], [1, 1], [0, 1]]).fill();\n        d.alpha(1).rgb(0x99, 0x99, 0x99).lineWidth(0.005).line([[0, h], [1, h]]).stroke().line([[0, h + 0.01], [1, h + 0.01]]).stroke();\n        d.rgb(0xff, 0xff, 0xff).quads(Geo.rect().scale([0.01, 0.01]).translate([0.02 + this.fineSeek / FineSeekMax * 0.96, h])).fill();\n        return this.notes.flatten().each(function(e) {\n          return e.draw();\n        });\n      };\n\n      Score.prototype.click = function(p) {\n        return this.notes.flatten().select(function(e) {\n          return e.isInBound(p);\n        }).each(function(e) {\n          return e.flipFlop();\n        });\n      };\n\n      return Score;\n\n    })();\n    vm = new VFXManager();\n    score = new Score();\n    instruments = [];\n    instruments[0] = loadAudio();\n    instruments[1] = loadAudio();\n    instruments[2] = loadAudio();\n    instruments[3] = loadAudio();\n    document.addEventListener(\"click\", function(e) {\n      var px, py;\n      px = e.clientX / d.width - d.left2d;\n      py = e.clientY / d.height - d.top2d;\n      return score.click([px, py]);\n    }, true);\n    main = function(c) {\n      if (c == null) {\n        c = 0;\n      }\n      d.blend(\"source-over\").alpha(1).rgb(0x00, 0x00, 0x00).fillBack();\n      score.act();\n      vm.act();\n      vm.draw();\n      return score.draw();\n    };\n    return setInterval(main, 33);\n  };\n\n}).call(this);\n","coffeescript":"window.onload = ->\r\n\r\n  # load video\r\n  video = document.getElementById(\"video\")\r\n\r\n  withVendorPrefix = (obj, member) ->\r\n    obj[member] || [\"webkit\", \"moz\", \"ms\"].inject(undefined, (i, e) ->\r\n      i || obj[e + member.replace(/^\\w/, (x) -> x.toUpperCase())])\r\n\r\n  getUserMedia = withVendorPrefix(navigator, \"getUserMedia\")\r\n  if not getUserMedia\r\n    alert(\"video is not supported\")\r\n    return\r\n\r\n  getUserMedia.call navigator, {video:true, toString: () -> return \"video\"}, (stream) ->\r\n    URL = withVendorPrefix(window, \"URL\")\r\n    url = URL.createObjectURL(stream) || stream\r\n    video.src = url\r\n    video.width = 465\r\n    video.height = 465\r\n    video.style.display = \"hidden\"\r\n    video.play()\r\n  , () ->\r\n    alert(\"stream is not available\")\r\n    return\r\n\r\n\r\n  # pseude fps control\r\n  (() ->\r\n    lastTime = 0\r\n    org_setTimeout = window.setTimeout\r\n    window.setTimeout = (func, wait) ->\r\n      realWait = if lastTime then wait else wait - (new Date() - lastTime)\r\n      realWait = 1 if realWait <= 0\r\n      lastTime = +new Date()\r\n      org_setTimeout(func, realWait)\r\n  )()\r\n\r\n  # audio loader\r\n  loadAudio = () ->\r\n    sacrifice = document.createElement('audio')\r\n    if not sacrifice\r\n      alert('audio not supported')\r\n      return\r\n\r\n    checkSupportFor = (type) ->\r\n      cpt = sacrifice.canPlayType(type)\r\n      return (cpt isnt \"no\") && (cpt isnt \"\")\r\n\r\n    supports_mp3 = checkSupportFor(\"audio/mp3\")\r\n    if not (supports_mp3)\r\n      alert('audio not supported')\r\n      return\r\n    # load audio\r\n\r\n    instruments =\r\n     [\r\n       \"resource/se/se_maoudamashii_instruments_drum1_cymbal.mp3\",\r\n       \"resource/se/se_maoudamashii_instruments_drum1_snare.mp3\",\r\n       \"resource/se/se_maoudamashii_instruments_drum1_bassdrum1.mp3\",\r\n       \"resource/se/se_maoudamashii_instruments_drum1_hat.mp3\",\r\n       \"resource/se/se_maoudamashii_instruments_drum1_tom1.mp3\",\r\n       \"resource/se/se_maoudamashii_instruments_drum1_tom2.mp3\",\r\n       \"resource/se/se_maoudamashii_instruments_drum1_tom3.mp3\",\r\n      ].map (x) ->\r\n        return new Audio(\"https://dl.dropboxusercontent.com/u/3589634/\" + x)\r\n    instruments.each (e) ->\r\n      e.addEventListener \"canplay\", () ->\r\n        e.playable = true\r\n      , true\r\n      e.load()\r\n\r\n    return instruments\r\n\r\n\r\n  # create instance of my lib\r\n  d = new DCore()\r\n\r\n  measure = 32\r\n\r\n\r\n  # effect \r\n  class VFX\r\n    constructor: ->\r\n      [@p] = $A(arguments)\r\n      @count = 0\r\n    act: ->\r\n      @count++\r\n    draw: ->\r\n\r\n  # tile\r\n  class VFXTile extends VFX\r\n    draw: (sd) ->\r\n      @m = @m or $R(1, 4).rand()\r\n      m = @m\r\n\r\n      m.times (i) =>\r\n        w = 1 / m\r\n        x = i * w\r\n        m.times (j) =>\r\n          h = 1 / m\r\n          y = j * h\r\n          sd\r\n           .drawImage(video, [0, 0], [1, 1], [x, y], [w, h])\r\n\r\n  # horizontal slice\r\n  class VFXHorizontalSlice extends VFX\r\n    draw: (sd) ->\r\n      y = 0\r\n      while true\r\n        h = $R(0.01, 0.1).randf()\r\n        fx = $R(-1, 1).randf() * (0.3 / @count)\r\n\r\n        if y + h > 1\r\n          h -= (y + h) - 1\r\n\r\n        sd\r\n         .drawImage(sd, [0, y], [1, h], [fx, y], [1 - fx, h])\r\n\r\n        break if y + h >= 0.9999\r\n        y += h\r\n\r\n  # vertical slice\r\n  class VFXVerticalSlice extends VFX\r\n    draw: (sd) ->\r\n      x = 0\r\n      while true\r\n        w = $R(0.01, 0.1).randf()\r\n        fy = $R(-1, 1).randf() * (0.3 / @count)\r\n\r\n        if x + w > 1\r\n          w -= (x + w) - 1\r\n\r\n        sd\r\n         .drawImage(sd, [x, 0], [w, 1], [x, fy], [w, 1 - fy])\r\n\r\n        break if x + w >= 0.9999\r\n        x += w\r\n\r\n  # tile slice\r\n  class VFXTileSlice extends VFX\r\n    draw: (sd) ->\r\n      10.times (i) =>\r\n        x = $R(0.0, 0.9).randf()\r\n        y = $R(0.0, 0.9).randf()\r\n        w = $R(0.3, 0.6).randf()\r\n        h = $R(0.3, 0.6).randf()\r\n        x2 = $R(-0.05, 0.05).randf() + x\r\n        y2 = $R(-0.05, 0.05).randf() + y\r\n        w2 = $R(-0.01, 0.01).randf() * @count + w\r\n        h2 = $R(-0.01, 0.01).randf() * @count + h\r\n        \r\n        sd\r\n         .drawImage(sd, [x2, y2], [w2, h2], [x, y], [w, h])\r\n\r\n  # flash\r\n  class VFXFlash extends VFX\r\n    draw: (sd) ->\r\n      sd\r\n       .hsv((1).randf(), 0.5, 0.5)\r\n       .blend(\"lighter\")\r\n       .alpha($R(0.2, 0.9).randf())\r\n       .fillBack()\r\n\r\n      sd\r\n       .blend(\"source-over\")\r\n       .alpha(1)\r\n\r\n  # swap color\r\n  class VFXSwapColor extends VFX\r\n    draw: (sd) ->\r\n      p = sd.getNativeImageData()\r\n      img = p.data\r\n\r\n      len = img.length\r\n      i = 0\r\n      while i < len\r\n        work = img[0]\r\n        img[i + 0] += img[i + 1] * @count >> 2\r\n        img[i + 1] += img[i + 2] * @count >> 2\r\n        img[i + 2] += work * @count >> 2\r\n        i += 4\r\n\r\n      sd.ctx.putImageData(p, 0, 0)\r\n\r\n  # color shift\r\n  class VFXColorShift extends VFX\r\n    draw: (sd) ->\r\n      p = sd.getNativeImageData()\r\n      img = p.data\r\n\r\n      len = img.length\r\n      i = 0\r\n      th = @count * 32 + 64\r\n      t = @count * 6\r\n      rd = ($R(-t, t).rand() + $R(-t, t).rand() * 128) * 4 + 0\r\n      gd = ($R(-t, t).rand() + $R(-t, t).rand() * 128) * 4 + 1\r\n      bd = ($R(-t, t).rand() + $R(-t, t).rand() * 128) * 4 + 2\r\n      while i < len\r\n        ri = i + rd\r\n        if 0 <= ri and ri < len\r\n          img[ri] += img[i + 0] >> 1\r\n        gi = i + gd\r\n        if 0 <= gi and gi < len\r\n          img[gi] += img[i + 1] >> 1\r\n        bi = i + bd\r\n        if 0 <= bi and bi < len\r\n          img[ri] += img[i + 2] >> 1\r\n        i += 4\r\n\r\n      sd.ctx.putImageData(p, 0, 0)\r\n\r\n  # manager of vfx\r\n  class VFXManager\r\n    constructor: ->\r\n      @ms = []\r\n    registor: (e) ->\r\n      @ms.push(e)\r\n    act: ->\r\n      @ms.invoke(\"act\")\r\n      @ms = @ms.select (e) ->\r\n        e.count < 6\r\n    draw: ->\r\n      @sd = @sd || d.subTexture(128, 128)\r\n      @sd.drawImage(video)\r\n\r\n      @ms.invoke(\"draw\", @sd)\r\n      d\r\n       .blend(\"source-over\")\r\n       .alpha(1)\r\n       .drawImage(@sd)\r\n\r\n\r\n  # note\r\n  class Note\r\n    constructor: ->\r\n      @active = false\r\n      [@ps, @xy] = $A(arguments)\r\n    act: ->\r\n    draw: ->\r\n      d\r\n       .quads(@ps)\r\n       .blend(\"lighter\")\r\n       .alpha(0.5)\r\n       .rgb((if @active then 0xff else 0x66).arize(3))\r\n       .fill()\r\n       .rgb(0xff.arize(3))\r\n       .lineWidth(0.003)\r\n       #.stroke()\r\n    isInBound: (p) ->\r\n      @ps[0][0] <= p[0] <= @ps[1][0] and\r\n      @ps[1][1] <= p[1] <= @ps[2][1]\r\n    flipFlop: ->\r\n      @active = not @active\r\n    invoke: ->\r\n      if @active\r\n        inst = instruments[@xy[0] % 4][@xy[1]]\r\n        if inst.playable\r\n          inst.pause()\r\n          inst.currentTime = 0\r\n          inst.play()\r\n        cstr = [VFXTile, VFXSwapColor, VFXColorShift, VFXFlash, VFXHorizontalSlice, VFXVerticalSlice, VFXTileSlice][@xy[1]]\r\n        if cstr\r\n          vm.registor(new cstr([(1.0).randf(), (0.8).randf()]))\r\n\r\n\r\n  # score\r\n  class Score\r\n    FineSeekMax = 128\r\n    NoteHeight = 0.03\r\n    NoteTypes = 7\r\n    constructor: ->\r\n      # for notes\r\n      margin = 0.02\r\n      size = (1 - margin * 2) / measure\r\n      @notes = $R(0, NoteTypes, true).map (y) ->\r\n        $R(0, measure, true).map (x) ->\r\n          note = new Note(Geo.rect().scale([size * 0.8, NoteHeight]).translate([margin + size * x, 0.68 + NoteHeight * y * 1.5]), [x, y])\r\n          if (y is 4 and x % 2 is 0)\r\n#            note.flipFlop()\r\n            null\r\n          note\r\n    act: ->\r\n      @cnt ?= 0\r\n      @cnt++\r\n      @fineSeek ?= 0\r\n      @fineSeek++\r\n      @fineSeek %= FineSeekMax\r\n      @seek = ~~(@fineSeek * measure / FineSeekMax)\r\n      if @fineSeek % (FineSeekMax / measure) is 0\r\n        @notes.zipWithIndex (e, i) =>\r\n          e[@seek].invoke()\r\n    draw: ->\r\n      h = 0.65\r\n      # fill back\r\n      d\r\n       .blend(\"source-over\")\r\n       .alpha(0.3)\r\n       .rgb(0x00, 0x00, 0x00)\r\n       .quads([[0, h], [1, h], [1, 1], [0, 1]])\r\n       .fill()\r\n\r\n      # separator\r\n      d\r\n       .alpha(1)\r\n       .rgb(0x99, 0x99, 0x99)\r\n       .lineWidth(0.005)\r\n       .line([[0, h], [1, h]])\r\n       .stroke()\r\n       .line([[0, h + 0.01], [1, h + 0.01]])\r\n       .stroke()\r\n\r\n      # seek bar\r\n      d\r\n       .rgb(0xff, 0xff, 0xff)\r\n       .quads(Geo.rect().scale([0.01, 0.01]).translate([0.02 + @fineSeek / FineSeekMax * 0.96, h]))\r\n       .fill()\r\n\r\n      # notes\r\n      @notes.flatten().each (e) ->\r\n        e.draw()\r\n    click: (p) ->\r\n      # notes control\r\n      @notes.flatten().select (e) ->\r\n        e.isInBound(p)\r\n      .each (e) ->\r\n        e.flipFlop()\r\n\r\n\r\n\r\n  vm = new VFXManager()\r\n  score = new Score()\r\n\r\n  instruments = []\r\n  instruments[0] = loadAudio()\r\n  instruments[1] = loadAudio()\r\n  instruments[2] = loadAudio()\r\n  instruments[3] = loadAudio()\r\n\r\n  # ovserve mouse\r\n  document.addEventListener \"click\", (e) ->\r\n    px = e.clientX / d.width - d.left2d\r\n    py = e.clientY / d.height - d.top2d\r\n    score.click([px, py])\r\n  , true\r\n\r\n  # main loop\r\n  main = (c = 0) ->\r\n\r\n    # init background\r\n    d\r\n     .blend(\"source-over\")\r\n     .alpha(1)\r\n     .rgb(0x00, 0x00, 0x00)\r\n     .fillBack()\r\n\r\n    # act\r\n    score.act()\r\n    vm.act()\r\n\r\n    # score control\r\n    vm.draw()\r\n    score.draw()\r\n\r\n\r\n  setInterval(main, 33)\r\n"},"thumbnail":{"wide":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/2/x/d/2xdt_w.jpg","465":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/2/x/d/2xdt.jpg","100":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/2/x/d/2xdt_100.jpg"},"description_html":"カメラあらぶるドラムマシーン<br />\r\n<br />\r\n素材<br />\r\n　魔王魂　<a  href=\"http://maoudamashii.jokersounds.com/\">http://maoudamashii.jokersounds.com/</a><br />\r\n<br />\r\n確認<br />\r\n　Google Chrome Version 28.0.1500.95","modified_date":"2013-08-12 23:54:43","uid":"2xdt","created_date":"2013-08-12 23:40:36","path":"2xdt","description":"カメラあらぶるドラムマシーン\r\n\r\n素材\r\n　魔王魂　http://maoudamashii.jokersounds.com/\r\n\r\n確認\r\n　Google Chrome Version 28.0.1500.95","statistic":{"forked":"1","favorite":"0","pageview":"2443"},"user":{"icon":"http://jsdo-static-contents.s3.amazonaws.com/images/icon/b/4/2/c/b42cc3dd3312505b680411b3ead08e2dbc4192e4_100.jpg","name":"crispy"},"url":"http://jsdo.it/crispy/2xdt","title":"myvfx"}