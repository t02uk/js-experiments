// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.onload = function() {
    var Note, Score, VFX, VFXColorShift, VFXFlash, VFXHorizontalSlice, VFXManager, VFXSwapColor, VFXTile, VFXTileSlice, VFXVerticalSlice, d, getUserMedia, instruments, loadAudio, main, measure, score, video, vm, withVendorPrefix;
    video = document.getElementById("video");
    withVendorPrefix = function(obj, member) {
      return obj[member] || ["webkit", "moz", "ms"].inject(void 0, function(i, e) {
        return i || obj[e + member.replace(/^\w/, function(x) {
          return x.toUpperCase();
        })];
      });
    };
    getUserMedia = withVendorPrefix(navigator, "getUserMedia");
    if (!getUserMedia) {
      alert("video is not supported");
      return;
    }
    getUserMedia.call(navigator, {
      video: true,
      toString: function() {
        return "video";
      }
    }, function(stream) {
      var URL, url;
      URL = withVendorPrefix(window, "URL");
      url = URL.createObjectURL(stream) || stream;
      video.src = url;
      video.width = 465;
      video.height = 465;
      video.style.display = "hidden";
      return video.play();
    }, function() {
      alert("stream is not available");
    });
    (function() {
      var lastTime, org_setTimeout;
      lastTime = 0;
      org_setTimeout = window.setTimeout;
      return window.setTimeout = function(func, wait) {
        var realWait;
        realWait = lastTime ? wait : wait - (new Date() - lastTime);
        if (realWait <= 0) {
          realWait = 1;
        }
        lastTime = +new Date();
        return org_setTimeout(func, realWait);
      };
    })();
    loadAudio = function() {
      var checkSupportFor, instruments, sacrifice, supports_mp3;
      sacrifice = document.createElement('audio');
      if (!sacrifice) {
        alert('audio not supported');
        return;
      }
      checkSupportFor = function(type) {
        var cpt;
        cpt = sacrifice.canPlayType(type);
        return (cpt !== "no") && (cpt !== "");
      };
      supports_mp3 = checkSupportFor("audio/mp3");
      if (!supports_mp3) {
        alert('audio not supported');
        return;
      }
      instruments = ["resource/se/se_maoudamashii_instruments_drum1_cymbal.mp3", "resource/se/se_maoudamashii_instruments_drum1_snare.mp3", "resource/se/se_maoudamashii_instruments_drum1_bassdrum1.mp3", "resource/se/se_maoudamashii_instruments_drum1_hat.mp3", "resource/se/se_maoudamashii_instruments_drum1_tom1.mp3", "resource/se/se_maoudamashii_instruments_drum1_tom2.mp3", "resource/se/se_maoudamashii_instruments_drum1_tom3.mp3"].map(function(x) {
        return new Audio("https://dl.dropboxusercontent.com/u/3589634/" + x);
      });
      instruments.each(function(e) {
        e.addEventListener("canplay", function() {
          return e.playable = true;
        }, true);
        return e.load();
      });
      return instruments;
    };
    d = new DCore();
    measure = 32;
    VFX = (function() {

      function VFX() {
        this.p = $A(arguments)[0];
        this.count = 0;
      }

      VFX.prototype.act = function() {
        return this.count++;
      };

      VFX.prototype.draw = function() {};

      return VFX;

    })();
    VFXTile = (function(_super) {

      __extends(VFXTile, _super);

      function VFXTile() {
        return VFXTile.__super__.constructor.apply(this, arguments);
      }

      VFXTile.prototype.draw = function(sd) {
        var m,
          _this = this;
        this.m = this.m || $R(1, 4).rand();
        m = this.m;
        return m.times(function(i) {
          var w, x;
          w = 1 / m;
          x = i * w;
          return m.times(function(j) {
            var h, y;
            h = 1 / m;
            y = j * h;
            return sd.drawImage(video, [0, 0], [1, 1], [x, y], [w, h]);
          });
        });
      };

      return VFXTile;

    })(VFX);
    VFXHorizontalSlice = (function(_super) {

      __extends(VFXHorizontalSlice, _super);

      function VFXHorizontalSlice() {
        return VFXHorizontalSlice.__super__.constructor.apply(this, arguments);
      }

      VFXHorizontalSlice.prototype.draw = function(sd) {
        var fx, h, y, _results;
        y = 0;
        _results = [];
        while (true) {
          h = $R(0.01, 0.1).randf();
          fx = $R(-1, 1).randf() * (0.3 / this.count);
          if (y + h > 1) {
            h -= (y + h) - 1;
          }
          sd.drawImage(sd, [0, y], [1, h], [fx, y], [1 - fx, h]);
          if (y + h >= 0.9999) {
            break;
          }
          _results.push(y += h);
        }
        return _results;
      };

      return VFXHorizontalSlice;

    })(VFX);
    VFXVerticalSlice = (function(_super) {

      __extends(VFXVerticalSlice, _super);

      function VFXVerticalSlice() {
        return VFXVerticalSlice.__super__.constructor.apply(this, arguments);
      }

      VFXVerticalSlice.prototype.draw = function(sd) {
        var fy, w, x, _results;
        x = 0;
        _results = [];
        while (true) {
          w = $R(0.01, 0.1).randf();
          fy = $R(-1, 1).randf() * (0.3 / this.count);
          if (x + w > 1) {
            w -= (x + w) - 1;
          }
          sd.drawImage(sd, [x, 0], [w, 1], [x, fy], [w, 1 - fy]);
          if (x + w >= 0.9999) {
            break;
          }
          _results.push(x += w);
        }
        return _results;
      };

      return VFXVerticalSlice;

    })(VFX);
    VFXTileSlice = (function(_super) {

      __extends(VFXTileSlice, _super);

      function VFXTileSlice() {
        return VFXTileSlice.__super__.constructor.apply(this, arguments);
      }

      VFXTileSlice.prototype.draw = function(sd) {
        var _this = this;
        return 10..times(function(i) {
          var h, h2, w, w2, x, x2, y, y2;
          x = $R(0.0, 0.9).randf();
          y = $R(0.0, 0.9).randf();
          w = $R(0.3, 0.6).randf();
          h = $R(0.3, 0.6).randf();
          x2 = $R(-0.05, 0.05).randf() + x;
          y2 = $R(-0.05, 0.05).randf() + y;
          w2 = $R(-0.01, 0.01).randf() * _this.count + w;
          h2 = $R(-0.01, 0.01).randf() * _this.count + h;
          return sd.drawImage(sd, [x2, y2], [w2, h2], [x, y], [w, h]);
        });
      };

      return VFXTileSlice;

    })(VFX);
    VFXFlash = (function(_super) {

      __extends(VFXFlash, _super);

      function VFXFlash() {
        return VFXFlash.__super__.constructor.apply(this, arguments);
      }

      VFXFlash.prototype.draw = function(sd) {
        sd.hsv(1..randf(), 0.5, 0.5).blend("lighter").alpha($R(0.2, 0.9).randf()).fillBack();
        return sd.blend("source-over").alpha(1);
      };

      return VFXFlash;

    })(VFX);
    VFXSwapColor = (function(_super) {

      __extends(VFXSwapColor, _super);

      function VFXSwapColor() {
        return VFXSwapColor.__super__.constructor.apply(this, arguments);
      }

      VFXSwapColor.prototype.draw = function(sd) {
        var i, img, len, p, work;
        p = sd.getNativeImageData();
        img = p.data;
        len = img.length;
        i = 0;
        while (i < len) {
          work = img[0];
          img[i + 0] += img[i + 1] * this.count >> 2;
          img[i + 1] += img[i + 2] * this.count >> 2;
          img[i + 2] += work * this.count >> 2;
          i += 4;
        }
        return sd.ctx.putImageData(p, 0, 0);
      };

      return VFXSwapColor;

    })(VFX);
    VFXColorShift = (function(_super) {

      __extends(VFXColorShift, _super);

      function VFXColorShift() {
        return VFXColorShift.__super__.constructor.apply(this, arguments);
      }

      VFXColorShift.prototype.draw = function(sd) {
        var bd, bi, gd, gi, i, img, len, p, rd, ri, t, th;
        p = sd.getNativeImageData();
        img = p.data;
        len = img.length;
        i = 0;
        th = this.count * 32 + 64;
        t = this.count * 6;
        rd = ($R(-t, t).rand() + $R(-t, t).rand() * 128) * 4 + 0;
        gd = ($R(-t, t).rand() + $R(-t, t).rand() * 128) * 4 + 1;
        bd = ($R(-t, t).rand() + $R(-t, t).rand() * 128) * 4 + 2;
        while (i < len) {
          ri = i + rd;
          if (0 <= ri && ri < len) {
            img[ri] += img[i + 0] >> 1;
          }
          gi = i + gd;
          if (0 <= gi && gi < len) {
            img[gi] += img[i + 1] >> 1;
          }
          bi = i + bd;
          if (0 <= bi && bi < len) {
            img[ri] += img[i + 2] >> 1;
          }
          i += 4;
        }
        return sd.ctx.putImageData(p, 0, 0);
      };

      return VFXColorShift;

    })(VFX);
    VFXManager = (function() {

      function VFXManager() {
        this.ms = [];
      }

      VFXManager.prototype.registor = function(e) {
        return this.ms.push(e);
      };

      VFXManager.prototype.act = function() {
        this.ms.invoke("act");
        return this.ms = this.ms.select(function(e) {
          return e.count < 6;
        });
      };

      VFXManager.prototype.draw = function() {
        this.sd = this.sd || d.subTexture(128, 128);
        this.sd.drawImage(video);
        this.ms.invoke("draw", this.sd);
        return d.blend("source-over").alpha(1).drawImage(this.sd);
      };

      return VFXManager;

    })();
    Note = (function() {

      function Note() {
        var _ref;
        this.active = false;
        _ref = $A(arguments), this.ps = _ref[0], this.xy = _ref[1];
      }

      Note.prototype.act = function() {};

      Note.prototype.draw = function() {
        return d.quads(this.ps).blend("lighter").alpha(0.5).rgb((this.active ? 0xff : 0x66).arize(3)).fill().rgb(0xff.arize(3)).lineWidth(0.003);
      };

      Note.prototype.isInBound = function(p) {
        var _ref, _ref1;
        return (this.ps[0][0] <= (_ref = p[0]) && _ref <= this.ps[1][0]) && (this.ps[1][1] <= (_ref1 = p[1]) && _ref1 <= this.ps[2][1]);
      };

      Note.prototype.flipFlop = function() {
        return this.active = !this.active;
      };

      Note.prototype.invoke = function() {
        var cstr, inst;
        if (this.active) {
          inst = instruments[this.xy[0] % 4][this.xy[1]];
          if (inst.playable) {
            inst.pause();
            inst.currentTime = 0;
            inst.play();
          }
          cstr = [VFXTile, VFXSwapColor, VFXColorShift, VFXFlash, VFXHorizontalSlice, VFXVerticalSlice, VFXTileSlice][this.xy[1]];
          if (cstr) {
            return vm.registor(new cstr([1.0.randf(), 0.8.randf()]));
          }
        }
      };

      return Note;

    })();
    Score = (function() {
      var FineSeekMax, NoteHeight, NoteTypes;

      FineSeekMax = 128;

      NoteHeight = 0.03;

      NoteTypes = 7;

      function Score() {
        var margin, size;
        margin = 0.02;
        size = (1 - margin * 2) / measure;
        this.notes = $R(0, NoteTypes, true).map(function(y) {
          return $R(0, measure, true).map(function(x) {
            var note;
            note = new Note(Geo.rect().scale([size * 0.8, NoteHeight]).translate([margin + size * x, 0.68 + NoteHeight * y * 1.5]), [x, y]);
            if (y === 4 && x % 2 === 0) {
              null;
            }
            return note;
          });
        });
      }

      Score.prototype.act = function() {
        var _ref, _ref1,
          _this = this;
        if ((_ref = this.cnt) == null) {
          this.cnt = 0;
        }
        this.cnt++;
        if ((_ref1 = this.fineSeek) == null) {
          this.fineSeek = 0;
        }
        this.fineSeek++;
        this.fineSeek %= FineSeekMax;
        this.seek = ~~(this.fineSeek * measure / FineSeekMax);
        if (this.fineSeek % (FineSeekMax / measure) === 0) {
          return this.notes.zipWithIndex(function(e, i) {
            return e[_this.seek].invoke();
          });
        }
      };

      Score.prototype.draw = function() {
        var h;
        h = 0.65;
        d.blend("source-over").alpha(0.3).rgb(0x00, 0x00, 0x00).quads([[0, h], [1, h], [1, 1], [0, 1]]).fill();
        d.alpha(1).rgb(0x99, 0x99, 0x99).lineWidth(0.005).line([[0, h], [1, h]]).stroke().line([[0, h + 0.01], [1, h + 0.01]]).stroke();
        d.rgb(0xff, 0xff, 0xff).quads(Geo.rect().scale([0.01, 0.01]).translate([0.02 + this.fineSeek / FineSeekMax * 0.96, h])).fill();
        return this.notes.flatten().each(function(e) {
          return e.draw();
        });
      };

      Score.prototype.click = function(p) {
        return this.notes.flatten().select(function(e) {
          return e.isInBound(p);
        }).each(function(e) {
          return e.flipFlop();
        });
      };

      return Score;

    })();
    vm = new VFXManager();
    score = new Score();
    instruments = [];
    instruments[0] = loadAudio();
    instruments[1] = loadAudio();
    instruments[2] = loadAudio();
    instruments[3] = loadAudio();
    document.addEventListener("click", function(e) {
      var px, py;
      px = e.clientX / d.width - d.left2d;
      py = e.clientY / d.height - d.top2d;
      return score.click([px, py]);
    }, true);
    main = function(c) {
      if (c == null) {
        c = 0;
      }
      d.blend("source-over").alpha(1).rgb(0x00, 0x00, 0x00).fillBack();
      score.act();
      vm.act();
      vm.draw();
      return score.draw();
    };
    return setInterval(main, 33);
  };

}).call(this);
