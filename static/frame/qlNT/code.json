{"source":{"css":"body { background-color: #fff; margin: 0px; overflow: hidden; }","html":"<canvas id='world'></canvas>","lisence":"MIT","js":"// forked from mackee's \"forked:  Web Audio APIで音楽のリアルタイム波形表示\" http://jsdo.it/mackee/9WGv\n// forked from warinside's \" Web Audio APIで音楽のリアルタイム波形表示\" http://jsdo.it/warinside/tk3X\n// forked from warinside's \"Web Audio API Test+GainNode\" http://jsdo.it/warinside/3AY7\n//参考\n//http://www.usamimi.info/~ide/programe/tinysynth/doc/audioapi-report.pdf\n//http://epx.com.br/artigos/audioapi.php\n//http://code.google.com/p/chromium/issues/detail?id=88122\n//https://dvcs.w3.org/hg/audio/raw-file/tip/webaudio/specification.html#AudioSourceNode-section\n\nvar context = new webkitAudioContext();\n\nvar source = context.createBufferSource();\nvar gainNode = context.createGainNode();\t\t//音量変えるノード\nvar analyserNode = context.createAnalyser();\n    \ngainNode.gain.value = 0.5;\n\nsource.connect(gainNode);\ngainNode.connect(analyserNode);\t\t//destinationが最終的な出力\nanalyserNode.connect(context.destination);\t//RealTimeAnalyserの出力は必要かどうか意見が求められているそうですよ\n\nvar request = new XMLHttpRequest();\nvar url = \"http://jsrun.it/static/assets/svggirl/01/svg_girl_theme.ogg\";//あてずっぽうでjsrun.it上に発見\n//var url = \"http://jsrun.it/static/assets/sound/01/sound.ogg\";\nrequest.open(\"GET\", url, true);\nrequest.responseType = \"arraybuffer\";\n\nrequest.onload = function() {\n    play();\n};\n\nrequest.send();\n\n/**\n*FFTされたデータをもらう配列。\n*要素数がfrequencyBinCount(FFTのサイズの半分 FFT結果は対称だから半分でいい)より少ないときは\n*余分なデータは切り捨てられる。\n*/\nvar analyzedData = new Uint8Array(analyserNode.frequencyBinCount);\n\n// 音可視化用クラス\nfunction Star(p, sp, v) {\n    this.p = p;\n    this.sp = sp;\n    this.rad = $R(0, 100).randf();\n    this.radp = 0;\n    this.hue = $R(0, 1).randf();\n    this.v = v;\n}\nStar.prototype = {\n    act: function(velocity) {\n\tif(this.prevVelocity) {\n\t    var delta = velocity - this.prevVelocity;\n\t    if(delta > 0) {\n\t\tthis.radp += delta * 2;\n\t    }\n\t}\n\tthis.radp *= 0.8;\n\tif(this.radp > 0.15) {\n\t    this.rad += this.radp;\n\t}\n\t\n\tthis.p = this.p.add(this.sp);\n\tthis.sp = this.sp.add([this.radp * 0.02, 0].rotate($R(0, 100).randf()));\n\tif(this.p[0] < 0 || 1 < this.p[0]) this.p[0] = 0.5;\n\tif(this.p[1] < 0 || 1 < this.p[1]) this.p[1] = 0.5;\n\tthis.sp = this.sp.mul(0.9);\n\n\tthis.prevVelocity = velocity;\n\treturn this;\n    },\n    draw: function(velocity) {\n\td\n\t .blend(\"source-over\")\n\t .alpha(0.3)\n\t .hsv(this.hue, 0.5, this.v)\n\t .quads(\n\t  Geo.polygon(3, 1).rotate(this.rad).scale((velocity / 10 + 0.01).arize(2)).translate(this.p)\n\t ).fill();\n\treturn this;\n    }\n}\n    \nvar d = new DCore();\n\nfunction play(){\n    source.buffer = context.createBuffer(request.response, false);\t//ArrayBufferからバッファを作成　第２引数をtrueにするとモノラルに\n    source.noteOn(context.currentTime);   //指定した時間に再生する　もし指定した時間がcontext.currentTimeより小さい場合はすぐ再生される\n\n    var step = 1 / 25;\n    var stars = $R(0, 25, false).map(function(e) { return new Star([0.5, 0.5], [0.05, 0].rotate(e.toRadian() / 5.2), e / 100 + 0.8); });\n    \n    setInterval(function(){\n\tanalyserNode.getByteFrequencyData(analyzedData);\n\n\td.blend(\"source-over\").alpha(1).rgb(0xff, 0xff, 0xff).fillBack();\n\t\n\tvar resp = analyzedData.length;\n\n\tfor(var freq = 0; freq <= 1; freq += 0.01) {\n\t    var velocity = analyzedData[~~(resp * freq)] / 255;\n\t    d.rgb(0xee, 0xff, 0xff).quads(\n\t      Geo.rect(true).scale([0.01, velocity / 4]).translate([freq, 0.5])\n\t\t).fill().rgb(0xdd, 0xff, 0xff).stroke();\n\t\t\t\t\t\t\t\t\n\t}\n\n\tfor(var freq = 0, i = 0; freq <= 1; freq += step) {\n\t    var velocity = analyzedData[~~(resp * freq)] / 255;\n\t    stars[i++].act(velocity).draw(velocity);\n\t}\n    },16);\n}"},"thumbnail":{"wide":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/q/l/N/qlNT_w.jpg","465":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/q/l/N/qlNT.jpg","100":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/q/l/N/qlNT_100.jpg"},"description_html":"ビジュアライザ難しい","parent":{"thumbnail":{"wide":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/9/W/G/9WGv_w.jpg","465":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/9/W/G/9WGv.jpg","100":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/9/W/G/9WGv_100.jpg"},"parent":{"thumbnail":{"wide":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/t/k/3/tk3X_w.jpg","465":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/t/k/3/tk3X.jpg","100":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/t/k/3/tk3X_100.jpg"},"parent":{"thumbnail":{"wide":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/3/A/Y/3AY7_w.jpg","465":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/3/A/Y/3AY7.jpg","100":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/3/A/Y/3AY7_100.jpg"},"modified_date":"2011-08-14 10:58:41","uid":"3AY7","created_date":"2011-08-14 09:44:19","path":"3AY7","description":"Google Chromeでアドレスバーにabout:flags\nウェブ オーディオを有効にする\n\nChrome 13.0.782.112で確認","statistic":{"forked":"5","favorite":"1","pageview":"3201"},"user":{"icon":"http://jsdo-static-contents.s3.amazonaws.com/images/icon/f/f/0/0/ff00b9b087e2dce83fd40d4fed6646943de50edf_100.jpg","name":"ryoheycc"},"url":"http://jsdo.it/ryoheycc/3AY7","title":"Web Audio API Test+GainNode"},"modified_date":"2011-08-17 16:24:52","uid":"tk3X","created_date":"2011-08-16 21:58:22","path":"tk3X","description":"Google Chromeでアドレスバーにabout:flags\nウェブ オーディオを有効にする\n\nChrome 13.0.782.112で確認\n\nRealTimeAnalyser.getByteTimeDomainData()で波形を表示する\n\nボリュームを下げると波形が小さくなるのが一番の見所","statistic":{"forked":"17","favorite":"18","pageview":"10220"},"url":"http://jsdo.it/ryoheycc/tk3X","user":{"icon":"http://jsdo-static-contents.s3.amazonaws.com/images/icon/f/f/0/0/ff00b9b087e2dce83fd40d4fed6646943de50edf_100.jpg","name":"ryoheycc"},"title":" Web Audio APIで音楽のリアルタイム波形表示"},"modified_date":"2011-09-19 04:26:50","uid":"9WGv","created_date":"2011-09-18 23:38:40","path":"9WGv","description":"Processing.jsを使ってグラフィックイコライザ風に表示してみた。\nこれの劣化バージョン\nhttp://www.htmlfivewow.com/demos/audio-visualizer/index.html","statistic":{"forked":"10","favorite":"8","pageview":"9093"},"url":"http://jsdo.it/mackee/9WGv","user":{"icon":"http://jsdo-static-contents.s3.amazonaws.com/images/icon/7/9/5/a/795a95c83b9f098c9fcfa687e49da385ee04e0d0_100.jpg","name":"mackee"},"title":"forked:  Web Audio APIで音楽のリアルタイム波形表示"},"modified_date":"2011-09-23 21:22:06","uid":"qlNT","created_date":"2011-09-23 17:19:40","path":"qlNT","description":"ビジュアライザ難しい","statistic":{"forked":"5","favorite":"4","pageview":"3496"},"url":"http://jsdo.it/crispy/qlNT","user":{"icon":"http://jsdo-static-contents.s3.amazonaws.com/images/icon/b/4/2/c/b42cc3dd3312505b680411b3ead08e2dbc4192e4_100.jpg","name":"crispy"},"title":"forked:  Web Audio APIで音楽のリアルタイム波形表示"}