{"source":{"css":"body {\n margin: 0;\n padding: 0;\n overflow: hidden;\n}","html":"<canvas id=\"world\" width=\"456\" height=\"456\"></canvas>","lisence":"MIT","js":"window.onload = (function() {\n\n  var d = new DCore();\n    \n  RippleManager = {\n    initialize: function() {\n      var self = RippleManager;\n      self.ripples = [];\n      self.ripplesPool = [];\n    },\n    add: function(ripple) {\n      var self = RippleManager;\n      self.ripplesPool.push(ripple);\n    },\n    flush: function() {\n      var self = RippleManager;\n      self.ripples = self.ripples.concat(self.ripplesPool);\n      self.ripplesPool = [];\n    },\n    act: function() {\n      var self = RippleManager;\n      self.ripples = self.ripples.select(function(e) {\n        return e.alive();\n      });\n      self.ripples.invoke(\"act\");\n    },\n    draw: function(lazy) {\n      var self = RippleManager;\n      self.ripples.invoke(\"draw\", lazy);\n    }\n  };\n  RippleManager.initialize();\n\n\n  function Ripple(p, sp, seedless, pitch){\n    this.p = p.clone();\n    this.sp = sp || 0.05;\n    this.count = 0;\n    this.radius = 0.1;\n    this.asParrent = 0.1;\n    this.seedless = seedless;\n    this.pitch = pitch || $R(1, 12).rand();\n\n    var magicNumber = Math.pow(Math.E, Math.log(2) / 12);\n    var freq = Math.pow(magicNumber, this.pitch) * 1760;\n    var volume = this.sp * 1.0;\n    mixer.addNote(genNote(freq, volume));\n  }\n\n  Ripple.prototype = {\n    act: function() {\n      this.sp *= 0.985;\n      this.radius += this.sp;\n      this.count++;\n      if(!this.seedless) {\n        if(!this.leftHit) {\n          if(this.p[0] - this.radius / 2 < 0) {\n            this.leftHit = true;\n            RippleManager.add(new Ripple([0, this.p[1]], this.sp * 0.5, true, this.pitch));\n          }\n        }\n        if(!this.rightHit) {\n          if(this.p[0] + this.radius / 2 > 1) {\n            this.rightHit = true;\n            RippleManager.add(new Ripple([1, this.p[1]], this.sp * 0.5, true, this.pitch));\n          }\n        }\n        if(!this.topHit) {\n          if(this.p[1] - this.radius / 2 < 0) {\n            this.topHit = true;\n            RippleManager.add(new Ripple([this.p[0], 0], this.sp * 0.5, true, this.pitch));\n          }\n        }\n        if(!this.bottomHit) {\n          if(this.p[1] + this.radius / 2 > 1) {\n            this.bottomHit = true;\n            RippleManager.add(new Ripple([this.p[1], 1], this.sp * 0.5, true, this.pitch));\n          }\n        }\n      }\n    },\n    draw: function(lazy) {\n      var alpha = this.sp * 8 * (this.seedless ? 0.8 : 1);\n      var z = 0.04 / this.radius;\n      if(z > 0.5) z = 0.5;\n      \n      if(lazy) {\n        d\n         .alpha(alpha)\n         .rgb(0x99, 0x99, 0xcc)\n         .lineWidth(0.04)\n         .circle(this.p, this.radius)\n         .stroke()\n        ;\n      } else {\n        d\n         .rgb(0x00, 0x00, 0x00)\n         .luminous(this.p, this.radius * 0.5, this.radius, [\n            [0.00,      [0xff, 0xff, 0xff, 0.0]],\n            [1 - z * 2, [0x99, 0x99, 0xcc, 0.0]],\n            [1 - z,     [0x99, 0x99, 0xcc, alpha]],\n            [1.00,      [0x00, 0x00, 0x00, 0.0]]\n         ])\n         .fill()\n        ;\n      }\n    },\n    alive: function() {\n      return this.count < 100 && this.sp > 0.005;\n    },\n  };\n\n  function MockAudioContext() {}\n  MockAudioContext.prototype = {\n    createJavaScriptNode: function() {\n      return {\n        connect : function(){}\n      }\n    }\n  };\n\n  function Mixer() {\n  }\n  Mixer.prototype = {\n    prepare: function() {\n      this.ctx = new (window.AudioContext || window.webkitAudioContext || MockAudioContext)();\n      this.channel = 1;\n      this.bufferSize = 2 << 11;\n\n      this.node = this.ctx.createJavaScriptNode(this.bufferSize, 1, 1);\n      this.node.connect(this.ctx.destination);\n\n      var self = this;\n\n      var pos = 0;\n      this.notes = [];\n      \n      this.node.onaudioprocess = function(evt) {\n        RippleManager.flush();\n\n        var sampleRate = evt.outputBuffer.sampleRate;\n        var length = evt.outputBuffer.length;\n        var buffer = evt.outputBuffer.getChannelData(0);\n\n        for(var i = 0; i < length; i++) {\n          buffer[i] *= 0.0;\n        }\n\n        for(var i = 0; i < self.notes.length; i++) {\n          var alive = self.notes[i](buffer, sampleRate, length);\n          if(!alive) {\n            self.notes[i] = undefined;\n          }\n        }\n        \n        self.notes = self.notes.compact();\n\n      };\n    },\n    addNote: function(functor) {\n      this.notes.push(functor);\n    },\n    update: function() {\n    }\n  };\n      \n  function genNote(freq, volume) {\n    var seek = 0;\n    var pos = 0;\n    return function(buffer, sampleRate, size) {\n      var step = freq * Math.PI / sampleRate;\n      for(var i = 0; i < size; i++) {\n        pos += step;\n        buffer[i] += Math.sin(pos) * Math.cos(seek / 50000 - 0.1) * volume;\n        seek++;\n      }\n      return seek < 50000;\n    };\n  }\n    \n  function analyzeLocationHash(hash) {\n    var x = hash.split(\"#\");\n    if(!x[1]) return {};\n    return x[1].split(\"&\").inject({}, function(h, x) {\n      var a = x.split(\"=\");\n      h[a[0]] = a[1];\n      return h;\n    });\n  }\n  var conf = analyzeLocationHash(window.location.hash);\n    \n  var mixer = new Mixer();\n  mixer.prepare();\n\n  window.addEventListener(\"keydown\", function(evt) {\n    var a = \"A\".charCodeAt();\n    var z = \"Z\".charCodeAt();\n    if(a <= evt.keyCode && evt.keyCode <= z) {\n      RippleManager.add(new Ripple([$R(0, 1).randf(), $R(0, 1).randf()], null, null, evt.keyCode % 12));\n    }\n  }, false);\n\n  (function(c) {\n    d\n     .blend(\"source-over\")\n     .alpha(0.5)\n     .rgb(0xff, 0xff, 0xff)\n     .fillBack()\n    ;\n\n    if(c % 64 === 0) {\n      RippleManager.add(new Ripple([$R(0, 1).randf(), $R(0, 1).randf()]));\n    }\n    RippleManager.act();\n    RippleManager.draw(!!conf.lazy);\n    setTimeout(arguments.callee.curry(c + 1), 33);\n  })(0);\n\n});\n"},"thumbnail":{"wide":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/r/I/X/rIXj_w.jpg","465":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/r/I/X/rIXj.jpg","100":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/r/I/X/rIXj_100.jpg"},"description_html":"リアルタイムに音を生成しながら波紋を出すソフトシンセ<br />\r\n多分、Chromeの新しいバージョンでないと音がでません<br />\r\n<br />\r\n動作確認　Chrome 21.0.1180.60 m<br />\r\n<br />\r\n(追記)<br />\r\nA～Zキーを押してまどろめるように改良<br />\r\n参考文献：<a  href=\"http://www.echigo-tsumari.jp/artwork/wellenwanne_lfo\">http://www.echigo-tsumari.jp/artwork/wellenwanne_lfo</a> (波紋)","parent":{"thumbnail":{"wide":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/f/r/f/frf8_w.jpg","465":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/f/r/f/frf8.jpg","100":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/f/r/f/frf8_100.jpg"},"modified_date":"2012-07-26 15:01:48","uid":"frf8","created_date":"2012-07-24 12:51:06","path":"frf8","description":"Web Creator's Contest Q the 2nd【vol.1】のエントリー用コードです。このコードをフォークするとコンテストに参加できます。\r\nhttp://jsdo.it/event/q/2nd/vol1\r\n\r\nーーーーー\r\n「夏を涼しくする表現にチャレンジしてください」\r\n気づけば今年も暑い夏の季節がやってきました。HTML5、JavaScript、CSSを駆使して、暑い夏をひんやり涼しくするような演出をつくってください。\r\n本コードのような水が流れる作品や、風を感じる作品、花火などなど、どんな表現でも構いません。あなたの得意分野でチャレンジしてみてください！自由な発想をお待ちしています！","statistic":{"forked":"69","favorite":"3","pageview":"39574"},"user":{"icon":"http://jsdo-static-contents.s3.amazonaws.com/images/icon/6/7/b/5/67b56e45ea501eedd27eec70435d26553c0eace6_100.jpg","name":"jsdo.it_team"},"url":"http://jsdo.it/jsdo.it_team/frf8","title":"Web Creator's Contest Q the 2nd【vol.1】エントリー用コード"},"modified_date":"2012-08-11 13:47:11","uid":"rIXj","created_date":"2012-08-09 20:12:13","path":"rIXj","description":"リアルタイムに音を生成しながら波紋を出すソフトシンセ\r\n多分、Chromeの新しいバージョンでないと音がでません\r\n\r\n動作確認　Chrome 21.0.1180.60 m\r\n\r\n(追記)\r\nA～Zキーを押してまどろめるように改良\r\n参考文献：http://www.echigo-tsumari.jp/artwork/wellenwanne_lfo (波紋)","statistic":{"forked":"1","favorite":"4","pageview":"12015"},"url":"http://jsdo.it/crispy/rIXj","user":{"icon":"http://jsdo-static-contents.s3.amazonaws.com/images/icon/b/4/2/c/b42cc3dd3312505b680411b3ead08e2dbc4192e4_100.jpg","name":"crispy"},"title":"ripple sound"}