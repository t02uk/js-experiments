{"source":{"css":"body { background-color: #000000; margin: 0px; overflow: hidden; }","html":"<canvas id='world'></canvas>","lisence":"MIT","js":"(function() {\n  var d = new DCore().init();\n\n  var keys = [];\n  window.addEventListener(\"keydown\", function(e) {\n    keys[e.keyCode] = true;\n    if(37 <= e.keyCode && e.keyCode <= 40) {\n      e.preventDefault ? e.preventDefault() : e.returnValue = false;\n    }\n  }, false);\n  window.addEventListener(\"keyup\", function(e) {\n    keys[e.keyCode] = false;\n    if(37 <= e.keyCode && e.keyCode <= 40) {\n      e.preventDefault ? e.preventDefault() : e.returnValue = false;\n    }\n  }, false);\n\n\n  function AirPlane() {\n    this.theta1 = 0;\n    this.arm  = [1, 0, 0];\n    this.head = [0, 1, 0];\n    this.eye  = [0, 0, 1];\n    this.pos  = [5, 90, -30];\n\n    this.init();\n\n  }\n  AirPlane.prototype = {\n    model: [\n      // 左翼\n      [   0.0,   0.0,   0.5],\n      [   0.0,   0.0,-  0.4],\n      [-  0.5,  0.04,-  0.5],\n      // 右翼\n      [   0.0,   0.0,   0.5],\n      [   0.0,   0.0,-  0.4],\n      [   0.5,  0.04,-  0.5],\n      // 下のやつ\n      [   0.0,   0.0,   0.5],\n      [   0.0,   0.0,-  0.4],\n      [   0.0,-  0.3,-  0.4],\n      // 垂直尾翼\n      [   0.0,   0.0,-  0.0],\n      [   0.0,   0.0,-  0.3],\n      [   0.0,   0.2,-  0.4],\n    ].inGroupsOf(3),\n    init: function() {\n      this.transformed = this.model;\n    },\n    act: function() {\n      var self = this;\n      $R(0, $R(0, 2).rand()).each(function(e) {\n        var s = $R(0.2, 0.7).randf();\n        var rad = Math.PI.randf() * 2;\n        var t = self.arm.rotatea(rad, self.eye).mul(0.1);\n        fm.registor(self.pos.add(self.arm.mul( 0.3)), self.eye.mul(-0.2 * s).add(t));\n        fm.registor(self.pos.add(self.arm.mul(-0.3)), self.eye.mul(-0.2 * s).add(t));\n      });\n    },\n    draw: function() {\n      this.pos = this.pos.add(this.eye.mul(0.33));\n      var self = this;\n\n      this.transformed\n        .map(function(e) { return e.translate(self.pos) })\n        .each(function(e) {\n        d\n         .blend(\"lighter\")\n         .alpha(0.3)\n         .rgb(0x11, 0xcc, 0xcc)\n         .quads(e)\n         .fill()\n         .alpha(1.0)\n         .stroke()\n        ;\n      });\n\n    },\n    rotatey: function(t) {\n      var self = this;\n      this.transformed = this.transformed.map(function(e) {\n        return e.map(function(e) {\n          return e.rotatea(t, self.head);\n        });\n      })\n      //console.log(\"arm\", this.arm.invoke(\"sign\"));\n      //console.log(\"eye\", this.eye.invoke(\"sign\"));\n      //console.log(\"head\", this.head.invoke(\"sign\"));\n      this.arm = this.arm.rotatea(t, self.head);\n      this.eye = this.eye.rotatea(t, self.head);\n      this.head = this.eye.cross(this.arm).normalize();\n      //console.log(\"arm\", this.arm.invoke(\"sign\"));\n      //console.log(\"eye\", this.eye.invoke(\"sign\"));\n      //console.log(\"head\", this.head.invoke(\"sign\"));\n    },\n    rotatex: function(t) {\n      var self = this;\n      this.transformed = this.transformed.map(function(e) {\n        return e.map(function(e) {\n          return e.rotatea(t, self.arm);\n        });\n      })\n      //console.log(\"arm\", this.arm.invoke(\"sign\"));\n      //console.log(\"eye\", this.eye.invoke(\"sign\"));\n      //console.log(\"head\", this.head.invoke(\"sign\"));\n      this.eye = this.eye.rotatea(t, self.arm);\n      this.head = this.head.rotatea(t, self.arm);\n      this.arm = this.head.cross(this.eye).normalize();\n      //console.log(\"arm\", this.arm.invoke(\"sign\"));\n      //console.log(\"eye\", this.eye.invoke(\"sign\"));\n      //console.log(\"head\", this.head.invoke(\"sign\"));\n    },\n    rotatez: function(t) {\n      var self = this;\n      this.transformed = this.transformed.map(function(e) {\n        return e.map(function(e) {\n          return e.rotatea(t, self.eye);\n        });\n      })\n      //console.log(\"arm\", this.arm.invoke(\"sign\"));\n      //console.log(\"eye\", this.eye.invoke(\"sign\"));\n      //console.log(\"head\", this.head.invoke(\"sign\"));\n      this.arm = this.arm.rotatea(t, self.eye);\n      this.head = this.head.rotatea(t, self.eye);\n      this.eye = this.arm.cross(this.head);\n      //console.log(\"arm\", this.arm.invoke(\"sign\"));\n      //console.log(\"eye\", this.eye.invoke(\"sign\"));\n      //console.log(\"head\", this.head.invoke(\"sign\"));\n    },\n  }\n  var ap = new AirPlane();\n\n  function Camera(target) {\n    this.pos = [0, 100, 0];\n    this.target = target;\n  }\n  Camera.prototype = {\n    act: function() {\n      this.follow();\n    },\n    fix: function() {\n    },\n    follow: function() {\n      var idealDist = 20.0;\n      var realDist = this.pos.sub(this.target.pos).abs();\n      if(realDist > idealDist) {\n        var t = this.target.pos.sub(this.pos).mul(1 - idealDist / realDist);\n        this.pos = this.pos.add(t);\n      }\n    }\n  }\n  var cam = new Camera(ap);\n\n  function Fragment() {\n    this.count = 100;\n    this.pos = [0, 0, 0];\n  }\n  Fragment.prototype = {\n    model: (function() {\n      return $R(0, 2).map(function(e) {\n        var rad = (e / 3).toRadian();\n        return [Math.sin(rad), 0, Math.cos(rad)];\n      });\n    })().scale([0.1, 0.1, 0.1]),\n    init: function(pos, speed) {\n      this.count = 0;\n      this.pos = pos.clone();\n      this.speed = speed.clone();\n      this.rad1 = $R(0, 100).randf();\n      this.rad2 = $R(0, 100).randf();\n      this.rad3 = $R(0, 100).randf();\n    },\n    act: function() {\n      this.pos = this.pos.add(this.speed);\n      this.speed = this.speed.mul(0.97);\n      this.speed = this.speed.add([0, -0.004, 0]);\n      //this.rad1 += 0.1;\n      this.rad2 += 0.1;\n      this.rad3 += 0.1;\n      this.count++;\n    },\n    draw: function() {\n      if(this.count > 100) return;\n      d\n       .alpha(0.3)\n       .quads(\n         this.model\n        .invoke(\"rotatey\", this.rad1)\n        .invoke(\"rotatex\", this.rad2)\n        .translate(this.pos)\n       )\n       .fill()\n      ;\n    }\n  };\n\n  function Fragments() {\n    this.fs = $R(0, 100 - 1).map(function(e) {\n      return new Fragment(); \n    });\n    this.fc = 0;\n  }\n  Fragments.prototype = {\n    registor: function(pos, speed) {\n      var f = this.fs[this.fc];\n      f.init(pos, speed);\n      this.fc++; this.fc %= 64;\n    },\n    act: function() {\n      this.fs.select(function(e) {\n        return e.count < 100;\n      }).each(function(e) {\n        e.act();\n      });\n    },\n    draw: function() {\n      this.fs.select(function(e) {\n        return e.count < 100;\n      }).each(function(e) {\n        e.draw();\n      });\n    }\n  };\n  var fm = new Fragments();\n\n\n\n  (function(i) {\n\n    // key control\n    if(keys[37]) ap.rotatez( 0.08);\n    if(keys[39]) ap.rotatez(-0.08);\n    if(keys[38]) ap.rotatex( 0.03);\n    if(keys[40]) ap.rotatex(-0.03);\n\n    ap.act();\n    fm.act();\n    cam.act();\n    //console.log(cam.pos);\n\n\n    // set camera position\n    with({r: 3, th: i * 0.05}) {\n      d.gazeFrom(\n        cam.pos,\n        ap.pos\n      );\n    }\n\n    // fill background\n    d\n     .blend(\"source-over\")\n     .alpha(1.0)\n     .rgb(0x00, 0x00, 0x00)\n     .fillBack()\n     ;\n\n    // floor\n    $R(-10, 10, false).map(function(e) {\n      return e * 10;\n    }).map(function(e) {\n      d\n       .rgb(0x33, 0x99, 0x99)\n       .line([\n         [e, 0, -100],\n         [e, 0,  100],\n       ])\n       .stroke()\n      ; \n      return e;\n    }).each(function(e) {\n      d\n       .line([\n         [-100, 0,  e],\n         [ 100, 0,  e],\n       ])\n       .stroke()\n      ; \n    });\n\n    ap.draw();\n    fm.draw();\n\n   window.setTimeout(arguments.callee.curry(i + 1), 16);\n  })(0);\n})();\n// vim:sw=2:ts=2\n"},"thumbnail":{"wide":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/p/p/R/ppRX_w.jpg","465":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/p/p/R/ppRX.jpg","100":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/p/p/R/ppRX_100.jpg"},"description_html":"ひこうき<br />\nカーソルキー対応","modified_date":"2010-11-21 21:02:32","uid":"ppRX","created_date":"2010-11-21 20:23:31","path":"ppRX","description":"ひこうき\nカーソルキー対応","statistic":{"forked":"14","favorite":"36","pageview":"13086"},"user":{"icon":"http://jsdo-static-contents.s3.amazonaws.com/images/icon/b/4/2/c/b42cc3dd3312505b680411b3ead08e2dbc4192e4_100.jpg","name":"crispy"},"url":"http://jsdo.it/crispy/ppRX","title":"aircraft"}