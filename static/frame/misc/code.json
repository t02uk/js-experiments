{"source":{"css":"body { background-color: #DDDDDD; font: 30px sans-serif; }","html":"<canvas id='world'></canvas>","lisence":"MIT","js":"\r\n(function() {\r\n\r\n  \r\n  Object.extend(Array.prototype, {\r\n    chain: function(f) {\r\n      var ret = _V(this[0]);\r\n      if(f(ret)) return ret;\r\n      \r\n      for(var i = 1, l = this.length; i < l; i++) {\r\n        ret = _V(this[i], ret);\r\n        if(f(ret)) return ret;\r\n      }\r\n      return ret;\r\n    },\r\n    \r\n    andThen: function() {\r\n      return this.chain(function(e) {return e === null;});\r\n    },\r\n\r\n    orThen: function() {\r\n      return this.chain(function(e) {return e !== null;});\r\n    }\r\n  });\r\n  \r\n  Object.extend(Number.prototype, {\r\n    toRadian: function() {\r\n      return 2.0 * Math.PI * this;\r\n    },\r\n    rand: function() {\r\n      return ~~this.randf();\r\n    },\r\n    randf: function() {\r\n      return this * Math.random();\r\n    },\r\n    sign: function() {\r\n      return this > 0 ?  1 :\r\n             this < 0 ? -1 : 0;\r\n    },\r\n    arize: function(n) {\r\n      if(n === 0) return [];\r\n      else if(n === 1) return [this];\r\n      else return new Array(n).fill(this);\r\n    }\r\n\r\n  });\r\n\r\n  Object.extend(ObjectRange.prototype, {\r\n    rand: function() {\r\n    return ~~(this.start + (this.end - this.start + 1).randf());\r\n    },\r\n    randf: function() {\r\n      return this.start + (this.end - this.start).randf();\r\n    }\r\n  });\r\n  \r\n  window._V = function(a, b) {\r\n    if(a instanceof Function) return (a(_V(b)));\r\n    else return a;\r\n  };\r\n\r\n  window.Geo = {\r\n    polygon: function(n, i) {\r\n      i = i || 1;\r\n      return $R(0, n).map(function(e) { return [0, 1].rotate(e.toRadian() * i / n);});\r\n    },\r\n    rect: function(centerize) {\r\n      if(centerize) return [\r\n        [-0.5, -0.5],\r\n        [ 0.5, -0.5],\r\n        [ 0.5,  0.5],\r\n        [-0.5,  0.5]\r\n      ];\r\n      else return [\r\n        [0, 0],\r\n        [1, 0],\r\n        [1, 1],\r\n        [0, 1]\r\n      ];\r\n    },\r\n    plane: function(centerize) {\r\n      if(centerize) return[\r\n        [-0.5, -0.5, 0],\r\n        [ 0.5, -0.5, 0],\r\n        [ 0.5,  0.5, 0],\r\n        [-0.5,  0.5, 0]\r\n      ];\r\n      else return[\r\n        [0, 0, 0],\r\n        [1, 0, 0],\r\n        [1, 1, 0],\r\n        [0, 1, 0]\r\n      ]\r\n    },\r\n  };\r\n\r\n  // exntend Number As Vector, Matrix ...\r\n  Object.extend(Array.prototype, {\r\n    fill: function(v) {\r\n      for(var i = 0, l = this.length; i < l; i++) this[i] = v;\r\n      return this;\r\n    },\r\n    randomSelect: function() {\r\n      return this[this.length.rand()];\r\n    },\r\n\t\tshuffle: function() {\r\n\t\t\tvar result = this.clone();\r\n\t\t\tfor(var i = result.length - 1; i > 0; i--) {\r\n\t\t\t\tvar idx1 = ~~(Math.random() * i);\r\n\t\t\t\tvar idx2 = i;\r\n\t\t\t\tif(idx1 !== idx2) {\r\n\t\t\t\t\tvar work = result[idx1];\r\n\t\t\t\t\tresult[idx1] = result[idx2];\r\n\t\t\t\t\tresult[idx2] = work;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t},\r\n    flatMap: function(f) {\r\n      var result = [];\r\n      this.each(function(e) {\r\n        if(e.flatMap) result = result.concat(e.flatMap(f));\r\n        else result = result.concat(f(e));\r\n      });\r\n      return result;\r\n    },\r\n    shallowFlatten: function() {\r\n      var result = [];\r\n      this.each(function(e) {\r\n        if(e instanceof Array) result = result.concat(e);\r\n        else result.push(e);\r\n      })\r\n      return result;\r\n    },\r\n    square: function() {\r\n      return this.inject(0, function(i, n) {\r\n        return i + n * n;\r\n      });\r\n    },\r\n    abs: function() {\r\n      return Math.sqrt(this.square());\r\n    },\r\n    distance: function(that) {\r\n      return this.sub(that).abs();\r\n    },\r\n    normalize: function(a) {\r\n      a = a || 1;\r\n      var abs = this.abs();\r\n      if(abs === 0.0) return this;\r\n      else return this.map(function(e) {\r\n        return e / abs * a;\r\n      });\r\n    },\r\n    add: function(that) {\r\n      return this.zip2(that, function(e) { return e[0] + e[1]; });\r\n    },\r\n    sub: function(that) {\r\n      return this.zip2(that, function(e) { return e[0] - e[1]; });\r\n    },\r\n    mul: function(that) {\r\n      if(typeof that === \"number\") return this.map(function(e) { return that * e; });\r\n      else if(this.length === 4 && this.all(function(e) { return e.length === 4; })\r\n           && that.length === 3 && that.all(function(e) { return typeof e === \"number\"; })) return this.mul43(that);\r\n      else if(this.length === 4 && this.all(function(e) { return e.length === 4; })\r\n           && that.length === 4 && that.all(function(e) { return e.length === 4; })) return this.mul44(that);\r\n      else return null;\r\n    },\r\n    mul43: function(that) {\r\n      return [\r\n        this[0][0] * that[0] + this[1][0] * that[1] + this[2][0] * that[2] + this[3][0],\r\n        this[0][1] * that[0] + this[1][1] * that[1] + this[2][1] * that[2] + this[3][1],\r\n        this[0][2] * that[0] + this[1][2] * that[1] + this[2][2] * that[2] + this[3][2],\r\n        this[0][3] * that[0] + this[1][3] * that[1] + this[2][3] * that[2] + this[3][3]\r\n      ];\r\n    },\r\n    mul44: function(that) {\r\n      return [\r\n        [\r\n          this[0][0] * that[0][0] + this[0][1] * that[1][0] + this[0][2] * that[2][0] + this[0][3] * that[3][0],\r\n          this[0][0] * that[0][1] + this[0][1] * that[1][1] + this[0][2] * that[2][1] + this[0][3] * that[3][1],\r\n          this[0][0] * that[0][2] + this[0][1] * that[1][2] + this[0][2] * that[2][2] + this[0][3] * that[3][2],\r\n          this[0][0] * that[0][3] + this[0][1] * that[1][3] + this[0][2] * that[2][3] + this[0][3] * that[3][3]\r\n        ],[\r\n          this[1][0] * that[0][0] + this[1][1] * that[1][0] + this[1][2] * that[2][0] + this[1][3] * that[3][0],\r\n          this[1][0] * that[0][1] + this[1][1] * that[1][1] + this[1][2] * that[2][1] + this[1][3] * that[3][1],\r\n          this[1][0] * that[0][2] + this[1][1] * that[1][2] + this[1][2] * that[2][2] + this[1][3] * that[3][2],\r\n          this[1][0] * that[0][3] + this[1][1] * that[1][3] + this[1][2] * that[2][3] + this[1][3] * that[3][3]\r\n        ],[\r\n          this[2][0] * that[0][0] + this[2][1] * that[1][0] + this[2][2] * that[2][0] + this[2][3] * that[3][0],\r\n          this[2][0] * that[0][1] + this[2][1] * that[1][1] + this[2][2] * that[2][1] + this[2][3] * that[3][1],\r\n          this[2][0] * that[0][2] + this[2][1] * that[1][2] + this[2][2] * that[2][2] + this[2][3] * that[3][2],\r\n          this[2][0] * that[0][3] + this[2][1] * that[1][3] + this[2][2] * that[2][3] + this[2][3] * that[3][3]\r\n        ],[\r\n          this[3][0] * that[0][0] + this[3][1] * that[1][0] + this[3][2] * that[2][0] + this[3][3] * that[3][0],\r\n          this[3][0] * that[0][1] + this[3][1] * that[1][1] + this[3][2] * that[2][1] + this[3][3] * that[3][1],\r\n          this[3][0] * that[0][2] + this[3][1] * that[1][2] + this[3][2] * that[2][2] + this[3][3] * that[3][2],\r\n          this[3][0] * that[0][3] + this[3][1] * that[1][3] + this[3][2] * that[2][3] + this[3][3] * that[3][3]\r\n        ]\r\n      ];\r\n    },\r\n    sum: function() {\r\n      return this.inject(0, function(i, e) { return i + e; });\r\n    },\r\n    average: function() {\r\n      if(this.length === 0) return 0;\r\n      else return this.sum() / this.length;\r\n    },\r\n    negative: function() {\r\n      return this.mul(-1);\r\n    },\r\n    dot: function(that) {\r\n      return this.zip2(that).inject(0, function(i, e) { return i + e[0] * e[1]; });\r\n    },\r\n    cross: function(that) {\r\n      if(this.length === 2 && that.length === 2) return this[0] * that[1] - this[1] * that[0];\r\n      else if(this.length === 3 && that.length === 3) return [\r\n        this[1] * that[2] - this[2] * that[1],\r\n        this[2] * that[0] - this[0] * that[2],\r\n        this[0] * that[1] - this[1] * that[0]\r\n      ];\r\n      else return null;\r\n    },\r\n    invert: function() {\r\n      if(this.length === 2) {\r\n        var det = this[0][0] * this[1][1] - this[0][1] * this[1][0];\r\n        if(det === 0) return null;\r\n        var reciprocal = 1 / det;\r\n\r\n        return [\r\n          [this[1][1] * reciprocal,\r\n          -this[0][1] * reciprocal],\r\n          [-this[1][0] * reciprocal,\r\n           this[0][0] * reciprocal]\r\n        ];\r\n      } else {\r\n        return null;\r\n      }\r\n    },\r\n    translate: function(a) {\r\n      if(!(a instanceof Array)) a = Array.prototype.slice.call(arguments);\r\n      \r\n      if(this[0] instanceof Array) return this.map(function(x) {\r\n        return x.zip2(a, function(e) {\r\n          return e[0] + e[1];\r\n        });\r\n      });\r\n      else return this.zip2(a, function(e) {\r\n        return e[0] + e[1];\r\n      });\r\n    },\r\n    rotate: function(radian) {\r\n      if(this.length === 0) return this;\r\n      else if(this[0] instanceof Array) return this.map(function(e) {return e.rotate(radian);});\r\n      else if(this.length === 2)\r\n        return [this[0] * Math.cos(radian) - this[1] * Math.sin(radian),\r\n                this[0] * Math.sin(radian) + this[1] * Math.cos(radian)];\r\n      else if(this.length === 3) return this;\r\n    },\r\n    rotatea: function(radian, axis) {\r\n      if(this.length === 3) {\r\n        var a = axis.normalize();\r\n        var  x = this[0],  y = this[1],  z = this[2];\r\n        var ax = axis[0], ay = axis[1], az = axis[2];\r\n        var sin = Math.sin(radian);\r\n        var cos = Math.cos(radian);\r\n        var rcs = 1 - cos;\r\n\r\n        return [\r\n            (ax * ax * rcs + cos) * x\r\n          + (ax * ay * rcs - az * sin) * y\r\n          + (az * ax * rcs + ay * sin) * z,\r\n\r\n            (ax * ay * rcs + az * sin) * x\r\n          + (ay * ay * rcs + cos) * y\r\n          + (ay * az * rcs - ax * sin) * z,\r\n\r\n            (az * ax * rcs - ay * sin) * x\r\n          + (ay * az * rcs + ax * sin) * y\r\n          + (az * az * rcs + cos) * z\r\n        ];\r\n      }\r\n      else return this;\r\n    },\r\n    rotatex: function(radian) {\r\n      if(this.length === 3) return [\r\n        this[0],\r\n        this[1] * Math.cos(radian) - this[2] * Math.sin(radian),\r\n        this[1] * Math.sin(radian) + this[2] * Math.cos(radian)\r\n      ];\r\n      else return this;\r\n    },\r\n    rotatey: function(radian) {\r\n      if(this.length === 3) return [\r\n        this[0] * Math.cos(radian) - this[2] * Math.sin(radian),\r\n        this[1],\r\n        this[0] * Math.sin(radian) + this[2] * Math.cos(radian)\r\n      ];\r\n      else return this;\r\n    },\r\n    rotatez: function(radian) {\r\n      if(this.length === 3) return [\r\n        this[0] * Math.cos(radian) - this[1] * Math.sin(radian),\r\n        this[0] * Math.sin(radian) + this[1] * Math.cos(radian),\r\n        this[2]\r\n      ];\r\n      else return this;\r\n    },\r\n    scale: function(a) {\r\n      if(!(a instanceof Array)) a = Array.prototype.slice.call(arguments);\r\n      if(this[0] instanceof Array) return this.map(function(x) {\r\n        return x.zip2(a, function(e) {\r\n          return e[0] * e[1];\r\n        });\r\n      });\r\n      else return this.zip2(a, function(e) {\r\n        return e[0] * e[1];\r\n      });\r\n    },\r\n    zip2: function(that, callback) {\r\n      that = that || [];\r\n      callback = callback || Prototype.K;\r\n      var result = new Array(Math.min(this.length, that.length));\r\n      for(var i = 0, l = result.length; i < l; i++) {\r\n        result[i] = (callback([this[i], that[i]]));\r\n      }\r\n      return result;\r\n    },\r\n    zipWithIndex: function(callback) {\r\n      callback = callback || function(){return $A(arguments);};\r\n      var i = 0;\r\n      return this.map(function(e) {\r\n        return callback(e, i++);\r\n      });\r\n    },\r\n    transpose: function() {\r\n      var len1 = this.length;\r\n      var len2 = this[0].length;\r\n      var result = new Array(len2);\r\n      for(var i = 0; i < len2; i++) {\r\n        result[i] = new Array(len1);\r\n        for(var j = 0; j < len1; j++) {\r\n          result[i][j] = this[j][i];\r\n        }\r\n      }\r\n      return result;\r\n    },\r\n    rgb: function() {\r\n      switch(this.length) {\r\n        case 3:\r\n          var r = this[0];\r\n          var g = this[1];\r\n          var b = this[2];\r\n          return \"rgb(\" + [~~r, ~~g, ~~b].join(\", \") + \")\";\r\n        case 4:\r\n          var r = this[0];\r\n          var g = this[1];\r\n          var b = this[2];\r\n          var a = this[3];\r\n          return \"rgba(\" + [~~r, ~~g, ~~b, a].join(\", \") + \")\";\r\n      }\r\n    },\r\n    hsv: function() {\r\n      var h = this[0];\r\n      var s = this[1];\r\n      var v = this[2];\r\n\r\n      var hi = ~~(h * 6);\r\n      var f = h * 6 - hi;\r\n\r\n      var p = v * (1 - s);\r\n      var q = v * (1 - f * s);\r\n      var t = v * (1 - (1 - f) * s);\r\n\r\n      var result = null;\r\n      switch(hi) {\r\n        case 0: result = [v * 0xff, t * 0xff, p * 0xff].rgb(); break;\r\n        case 1: result = [q * 0xff, v * 0xff, p * 0xff].rgb(); break;\r\n        case 2: result = [p * 0xff, v * 0xff, t * 0xff].rgb(); break;\r\n        case 3: result = [p * 0xff, q * 0xff, v * 0xff].rgb(); break;\r\n        case 4: result = [t * 0xff, p * 0xff, v * 0xff].rgb(); break;\r\n        case 5: result = [v * 0xff, p * 0xff, q * 0xff].rgb(); break;\r\n        default: break;\r\n      }\r\n      return result;\r\n    }\r\n  });\r\n\r\n\r\n  // Counter\r\n  var Counter = function(max) {\r\n    var count = 0;\r\n    return function() {\r\n      if(count > max) return null;\r\n      else return count++;\r\n    };\r\n  };\r\n  window.Counter = Counter;\r\n\r\n  var ImageDataWrapper = function(img) {\r\n    this.img = img;\r\n    this.width = img.width;\r\n    this.height = img.height;\r\n  };\r\n  ImageDataWrapper.prototype = {\r\n    toByte: function(p) {\r\n      if(p.length === 1) return p;\r\n      else return (~~(p[0] * this.width + p[1] * this.height * this.width)) * 4;\r\n    },\r\n    at: function(p, c) {\r\n      p = this.toByte(p);\r\n      if(c) {\r\n        this.img.data[p + 0] = c[0];\r\n        this.img.data[p + 1] = c[1];\r\n        this.img.data[p + 2] = c[2];\r\n        this.img.data[p + 3] = c[3] || 0xff;\r\n      }\r\n      else {\r\n        return [\r\n          this.img.data[p + 0],\r\n          this.img.data[p + 1],\r\n          this.img.data[p + 2]\r\n          //Array.prototype.slice.apply(this.img.data, p, p + 3)\r\n        ];\r\n      }\r\n    }\r\n  };\r\n\r\n  DCore = function() {\r\n\r\n    //return this.init(c, asSubtexture);\r\n    return DCore.prototype.init.apply(this, $A(arguments))\r\n  };\r\n  DCore.prototype = {\r\n    // world space\r\n    worldSize: 1.0,\r\n    near:  0.0,\r\n    far: 1.5,\r\n    left: -0.5,\r\n    right: 0.5,\r\n    top: 0.5,\r\n    bottom: -0.5,\r\n    viewAngle: 1.5,\r\n    \r\n    // device space\r\n    left2d: 0.0,\r\n    right2d: 1.0,\r\n    top2d: 0.0,\r\n    bottom2d: 1.0,\r\n    \r\n    // (deprecated) draw option\r\n    softclip: true,\r\n\r\n    // initialize the class\r\n    // c: canvas dom element\r\n    init: function(c, asSubtexture) {\r\n\r\n      var self = this;\r\n\r\n      this.asSubtexture = asSubtexture\r\n      self.canvas = c || document.getElementById('world');\r\n      self.ctx = self.canvas.getContext('2d');\r\n      self.ctxCtr = CanvasRenderingContext2D;\r\n      self.ctx.textBaseline = \"top\";\r\n\r\n      if(!asSubtexture) {\r\n        window.addEventListener(\"resize\", function() {\r\n          self.width = self.canvas.width = window.innerWidth;\r\n          self.height = self.canvas.height = window.innerHeight;\r\n          self.ctx.textBaseline = \"top\";\r\n          return arguments.callee;\r\n       }(), false);\r\n     } else {\r\n       self.width = self.canvas.width;\r\n       self.height = self.canvas.height;\r\n     }\r\n\r\n      // 3d \r\n      this.pos = [0, 0, 1];\r\n      this.upTo = [0, 1, 0];\r\n      this.gazeTo = [0, 0, 0];\r\n      \r\n      this.viewMatrix = new Array(4).fill(new Array(4).fill(0));\r\n\r\n      this.projMatrix = (function() {\r\n        var y = 1.0 / Math.tan(self.viewAngle / 2.0);\r\n        var x = y;\r\n        var z = self.far / (self.far - self.near);\r\n        var w = -z * self.near;\r\n\r\n        return [\r\n          [x, 0, 0, 0],\r\n          [0, y, 0, 0],\r\n          [0, 0, z, 1],\r\n          [0, 0, w, 0]\r\n        ];\r\n      })();\r\n\r\n      this.convMatrix = new Array(4).fill(new Array(4).fill(0));\r\n      this.convMatrixStack = [];\r\n\r\n      return this;\r\n    },\r\n    tap: function(func) {\r\n      func.call(this, this);\r\n      return this;\r\n    },\r\n    // generate pseudo texture\r\n    subTexture: function(width, height) {\r\n      var c = document.createElement(\"canvas\");\r\n      c.width = ~~(width) || 256;\r\n      c.height = ~~(height) || c.width;\r\n\r\n      return new DCore(c, true);\r\n    },\r\n    // return whether given parameter is instance of texture\r\n    isSubTexture: function(src) {\r\n      return src instanceof DCore && src.asSubtexture;\r\n    },\r\n    // return whether given coordinate is in bound of screen or not\r\n    isInBoundScr: function(p) {\r\n      p = this.toWorld2d(p);\r\n      return this.left2d <= p[0] && p[0] <= this.right2d\r\n          && this.top2d  <= p[1] && p[1] <= this.bottom2d;\r\n    },\r\n    // set drawing color r,g,b\r\n    rgb: function(r, g, b) {\r\n      if(r instanceof Array) {\r\n        return DCore.prototype.rgb.apply(this, r);\r\n      } else {\r\n        this.ctx.fillStyle = [r, g, b].rgb();\r\n        this.ctx.strokeStyle = [r, g, b].rgb();\r\n        return this;\r\n      }\r\n    },\r\n    // set drawing color h,s,v\r\n    hsv: function(h, s, v) {\r\n      if(h instanceof Array) {\r\n        return DCore.prototype.hsv.apply(this, h);\r\n      } else {\r\n        this.ctx.fillStyle = [h, s, v].hsv();\r\n        this.ctx.strokeStyle = [h, s, v].hsv();\r\n        return this;\r\n      }\r\n    },\r\n    // set drawing color h,s,l\r\n    hsl: function(h, s, l) {\r\n      if(h instanceof Array) {\r\n        return DCore.prototype.hsl.apply(this, h);\r\n      } else {\r\n        h = (~~(h * 360)) % 360;\r\n        s = (~~(s * 100)) + \"%\";\r\n        l = (~~(l * 100)) + \"%\";\r\n        this.ctx.fillStyle = \"hsl(\" + [h, s, l].join(\", \") + \")\";\r\n        this.ctx.strokeStyle = \"hsl(\" + [h, s, l].join(\", \") + \")\";\r\n        return this;\r\n      }\r\n    },\r\n    // p0: start of color stop\r\n    // p1: start of color stop\r\n    // css: color infos array\r\n    gradient: function(p0, p1, css) {\r\n      p0 = this.toScr(p0);\r\n      p1 = this.toScr(p1);\r\n      var grad = this.ctx.createLinearGradient(p0[0], p0[1], p1[0], p1[1]);\r\n      for(var i = 0; i < css.length; i++) {\r\n        var cs = css[i];\r\n        var k = cs[0];\r\n        var c = (cs[1] instanceof Array) ? cs[1].rgb() : cs[1];\r\n        grad.addColorStop(cs[0], c);\r\n      }\r\n      this.ctx.fillStyle = grad;\r\n      return this;\r\n    },\r\n    // set font\r\n    // type. ex) serif, sans-serif, cursive, fantasy, monospace\r\n    font: function(type, size, style) {\r\n      if(type instanceof Array) return DCore.prototype.font.apply(this, type);\r\n      if(typeof size === \"number\") size = this.toScr(size);\r\n      this.ctx.font = \r\n        [(style) ? style : \"\"\r\n        ,(!size) ? 16 : (size.toString().match(/[^0-9]$/)) ? size : size + \"pt\"\r\n        ,(type || \"Serif\")].join(\" \");\r\n      return this;\r\n    },\r\n    textAlign: function(align) {\r\n      this.ctx.textAlign = align;\r\n      return this;\r\n    },\r\n    textBaseline: function(align) {\r\n      this.ctx.textBaseline = align;\r\n      return this;\r\n    },\r\n    // set alpha value for drawing effect\r\n    alpha: function(alpha) { this.ctx.globalAlpha = alpha; return this; },\r\n    // set globalCompositeOperation parameter\r\n    blend: function(blend) { this.ctx.globalCompositeOperation = blend; return this; },\r\n    // fill background\r\n    fillBack: function() {\r\n      this.ctx.fillRect(0, 0, this.width, this.height);\r\n      return this;\r\n    },\r\n    // convert world coordinate to screen coordinate\r\n    toScr: function(p) {\r\n      if(!p.length) {\r\n        return p * this.width * 0.5;\r\n      }\r\n      // screen -> device\r\n      else if(p.length === 2) return [\r\n        (p[0] + this.left2d) * this.width,\r\n        (p[1] + this.top2d) * this.height\r\n      ];\r\n      // world -> screen\r\n      else if(p.length === 3) return this.toScr(this.toWorld2d(p).slice(0, 2));\r\n    },\r\n    scr2World2d: function(p) {\r\n      // scala value will accepted but not recomended\r\n      if(!p.length) return (p - this.left2d) / this.width;\r\n      // vector\r\n      else return [\r\n        (p[0] - this.left2d) / this.width,\r\n        (p[1] - this.top2d) / this.height\r\n      ];\r\n    },\r\n    toWorld2d: function(p) {\r\n      if(!p.length) return p;\r\n      else if(p.length === 2) return p;\r\n      else if(p.length === 3) {\r\n        var clipPos = this.convMatrix.mul43(p);\r\n\r\n        if(clipPos[3] > 0.0) {\r\n          var reciprocal = 1 / clipPos[3];\r\n          clipPos[0] *= reciprocal;\r\n          clipPos[1] *= reciprocal;\r\n          clipPos[2] *= reciprocal;\r\n          clipPos[3]  = 1.0;\r\n        } else {\r\n          clipPos[2] = -1;\r\n        }\r\n\r\n        this.backclip = clipPos[3] < 0;\r\n\r\n        return [\r\n          clipPos[0] - this.left,\r\n        -(clipPos[1] - this.top),\r\n          clipPos[2]\r\n        ];\r\n      }\r\n    },\r\n    toWorld2dParallel: function(ps, f) {\r\n      var result = new Array(ps.length);\r\n      for(var i = 0, l = ps.length; i < l; i++) {\r\n        var p = this.toWorld2d(ps[i]);\r\n        if(p[2] < 0) return null;\r\n        result[i] = p.slice(0, f ? 3 : 2);\r\n      }\r\n      return result;\r\n    },\r\n    // convert world coordinate to screen coordinate\r\n    // set camera position\r\n    //  p: posiiton of camera\r\n    //  g: gaze to \r\n    //  u: upto\r\n    gazeFrom: function(p, g, u) {\r\n      if(p) this.pos = p;\r\n      if(g) this.gazeTo = g;\r\n      if(u) this.upTo = u;\r\n\r\n      var z = this.gazeTo.sub(this.pos).normalize();\r\n      var x = this.upTo.cross(z).normalize();\r\n      var y = z.cross(x).normalize();\r\n\r\n      var p_x = -p.dot(x);\r\n      var p_y = -p.dot(y);\r\n      var p_z = -p.dot(z);\r\n\r\n      this.viewMatrix = [\r\n        [x[0], y[0], z[0], 0],\r\n        [x[1], y[1], z[1], 0],\r\n        [x[2], y[2], z[2], 0],\r\n        [p_x,  p_y,  p_z, 1]\r\n      ];\r\n\r\n      this.updateConvMatrix();\r\n\r\n      return this;\r\n    },\r\n    // push matrix\r\n    pushMatrix: function() {\r\n      if(this.convMatrixStack.length > 64) throw \"積みすぎ\";\r\n      this.convMatrixStack.push(this.convMatrix);\r\n    },\r\n    // pop matrix\r\n    popMatrix: function() {\r\n      if(this.convMatrixStack.length <= 0) throw \"積んでない\";\r\n      this.convMatrix = this.convMatrixStack.pop();\r\n    },\r\n    mulMatrix: function(m) {\r\n      this.convMatrix = m.mul(this.convMatrix);\r\n    },\r\n    scale: function(s) {\r\n      this.mulMatrix([\r\n        [s[0] ,  0,   0, 0],\r\n        [  0, s[1],   0, 0],\r\n        [  0,    0,s[2], 0],\r\n        [  0,    0,   0, 1]\r\n      ]);\r\n    },\r\n    translate: function(t) {\r\n      this.mulMatrix([\r\n        [  1,    0,   0, 0],\r\n        [  0,    1,   0, 0],\r\n        [  0,    0,   1, 0],\r\n        [t[0],t[1],t[2], 1]\r\n      ]);\r\n    },\r\n    // mul matrix\r\n    mulMatrix: function(m) {\r\n      this.convMatrix = this.convMatrix.mul(m);\r\n    },\r\n    // update matrix for converting 3 dimension coordinate\r\n    updateConvMatrix: function() {\r\n      if(!this.projMatrix) return;\r\n      if(!this.viewMatrix) return;\r\n\r\n      this.convMatrix = this.viewMatrix.mul44(this.projMatrix);\r\n    },\r\n    // draw rect\r\n    rect: function(p, wh) {\r\n      this.ctx.beginPath();\r\n      p = this.toScr(p);\r\n      wh = this.toScr(wh);\r\n      this.ctx.rect(\r\n        p[0], p[1],\r\n        wh[0], wh[1]\r\n      );\r\n      return this;\r\n    },\r\n    // clear rect\r\n    clear: function(p, wh) {\r\n      p = this.toScr(p || [0, 0]);\r\n      wh = this.toScr(wh || [1, 1]);\r\n      this.ctx.clearRect(\r\n        p[0], p[1],\r\n        wh[0], wh[1]\r\n      );\r\n      return this;\r\n    },\r\n    // draw line\r\n    //  ps: position list\r\n    line: function(ps) {\r\n      var ctx = this.ctx;\r\n      ctx.beginPath();\r\n\r\n      ps = this.toWorld2dParallel(ps);\r\n      if(!ps) return this;\r\n      \r\n      for(var i = 0, l = ps.length; i < l; i++) {\r\n        var p = this.toScr(ps[i]);\r\n        if(i === 0) ctx.moveTo(p[0], p[1]);\r\n        else ctx.lineTo(p[0], p[1]);\r\n      }\r\n      return this;\r\n    },\r\n    // draw quads\r\n    // ps: position list\r\n    quads: function(ps, unclose) {\r\n      var ctx = this.ctx;\r\n      ctx.beginPath();\r\n\r\n      ps = this.toWorld2dParallel(ps);\r\n      if(!ps) return this;\r\n      \r\n      for(var i = 0, l = ps.length; i < l; i++) {\r\n        var p = this.toScr(ps[i]);\r\n        if(i === 0) ctx.moveTo(p[0], p[1]);\r\n        else ctx.lineTo(p[0], p[1]);\r\n      }\r\n      if(!unclose) ctx.closePath();\r\n      return this;\r\n    },\r\n\t\t// draw loop\r\n\t\tloop: function(ps) {\r\n      var ctx = this.ctx;\r\n      ctx.beginPath();\r\n\r\n      ps = this.toWorld2dParallel(ps);\r\n      if(!ps) return this;\r\n      \r\n      for(var i = 0, l = ps.length; i < l; i++) {\r\n        var p = this.toScr(ps[i]);\r\n        if(i === 0) ctx.moveTo(p[0], p[1]);\r\n        else ctx.lineTo(p[0], p[1]);\r\n      }\r\n\t\t\tctx.lineTo(ps[0][0], ps[0][1]);\r\n      return this;\r\n\t\t},\r\n    // draw curved quads\r\n    //\r\n    curved: function(ps, unclose) {\r\n      var ctx = this.ctx;\r\n      ctx.beginPath();\r\n\r\n      for(var i = 0, l = ps.length; i < l; i++) {\r\n        var p = this.toScr(ps[i][0]);\r\n        if(i === 0) ctx.moveTo(p[0], p[1]);\r\n        else if(!ps[i][1]) ctx.lineTo(p[0], p[1]);\r\n        else { \r\n          var p2 = this.toScr(ps[++i][0]);\r\n          ctx.quadraticCurveTo(p[0], p[1], p2[0], p2[1]);\r\n        }\r\n      }\r\n      if(!unclose) ctx.closePath();\r\n      return this;\r\n    },\r\n    // draw circle\r\n    circle: function(_p, _radius, _startAngle, _endAngle) {\r\n      var p = this.toScr(_p);\r\n      var d = this.toWorld2d(_p);\r\n      var radius = (_p.length === 2) ? this.toScr(_radius) : this.toScr(_radius) / d[2];\r\n      var startAngle = _startAngle || 0.0;\r\n      var endAngle = _endAngle || Math.PI * 2.0;\r\n      this.ctx.beginPath();\r\n      this.ctx.arc(p[0], p[1], radius, startAngle, endAngle, false);\r\n      return this;\r\n    },\r\n    // draw luminous\r\n    luminous: function(_p, _r0, _r1, css) {\r\n      this.ctx.beginPath();\r\n      var p = this.toScr(_p);\r\n      var d = this.toWorld2d(_p);\r\n      var backclip = this.backclip;\r\n\r\n\r\n      if(_p.length === 2) {\r\n        var r0 = this.toScr(_r0);\r\n        var r1 = this.toScr(_r1);\r\n      } else {\r\n        var z = this.gazeTo.sub(this.pos).normalize();\r\n        var x = this.upTo.cross(z).normalize();\r\n        var r0 = this.toScr(_p.add(x.mul(_r0))).distance(this.toScr(_p));\r\n        var r1 = this.toScr(_p.add(x.mul(_r1))).distance(this.toScr(_p));\r\n        if(backclip) return this;\r\n      }\r\n\r\n      var grad = this.ctx.createRadialGradient(p[0], p[1], r0, p[0], p[1], r1);\r\n      for(var i = 0; i < css.length; i++) {\r\n        var cs = css[i];\r\n        var k = cs[0];\r\n        var c = (cs[1] instanceof Array) ? cs[1].rgb() : cs[1];\r\n        grad.addColorStop(cs[0], c);\r\n      }\r\n      this.ctx.fillStyle = grad;\r\n      this.ctx.arc(p[0], p[1], r1, 0, Math.PI * 2, false);\r\n      return this;\r\n    },\r\n    // fill\r\n    fill: function(){ this.ctx.fill(); return this; },\r\n    // stroke\r\n    stroke: function(){ this.ctx.stroke(); return this; },\r\n    // set line width\r\n    lineWidth: function(w){\r\n      var a = this.toScr(w);\r\n      if(isFinite(a)) {\r\n        this.ctx.lineWidth = a;\r\n      }\r\n\r\n      return this;\r\n    },\r\n    // scale\r\n    scale: function(s) {\r\n      if(!s) return this;\r\n      this.ctx.scale(s[0], s[1]);\r\n      return this;\r\n    },\r\n    // rotate\r\n    rotate: function(rad) {\r\n      if(!rad) return this;\r\n      this.ctx.rotate(rad);\r\n      return this;\r\n    },\r\n    // translate\r\n    translate: function(_p) {\r\n      if(!_p) return this;\r\n      var p = this.toScr(_p);\r\n      this.ctx.translate(p[0], p[1]);\r\n      return this;\r\n    },\r\n    // reset canvas coordinate space\r\n    reset: function() { \r\n      this.ctx.setTransform(1.0, 0.0, \r\n                            0.0, 1.0,\r\n                            0.0, 0.0);\r\n      return this;\r\n    },\r\n    // clip\r\n    clip: function() { this.ctx.clip(); return this; },\r\n    // save\r\n    save: function() { this.ctx.save(); return this; },\r\n    // restore\r\n    restore: function() { this.ctx.restore(); return this; },\r\n    // using\r\n    using: function(f) { this.save(); f(this); this.restore(); return this; },\r\n    // translate -> scale -> rotate (experiments)\r\n    tsr: function(p) {\r\n      var d = this;\r\n      \r\n      d.translate(p);\r\n      return function(s) {\r\n        d.scale(s);\r\n        return function(rad) {\r\n          return d.rotate(rad);\r\n        };\r\n      };\r\n    },\r\n    // a wrapper of canvas.drawImage\r\n    drawImage: function(img, _p1, _s1, _p2, _s2) {\r\n\r\n      var args = [img instanceof DCore ? img.canvas : img];\r\n\r\n      switch(arguments.length) {\r\n        case 1:   // drawImage(image); // un\r\n          args.push(this.toScr([0, 0]));\r\n          args.push(this.toScr([1, 1]));\r\n          break;\r\n        case 2:   // drawImage(image, p1[dx, dy]);\r\n          args.push(this.toScr(_p1));\r\n          args.push(this.toScr([1, 1]));\r\n          break;\r\n        case 3:   // drawImage(image, p1[dx, dy], s1[dw, dh]);\r\n          args.push(this.toScr(_p1));\r\n          args.push(this.toScr(_s1));\r\n          break;\r\n        case 5:   // drawImage(image, p1[sx, sy], s1[sw, sh], p2[dx, dy], s2[dw, dh])\r\n          args.push(_p1.scale([img.width, img.height]));\r\n          args.push(_s1.scale([img.width, img.height]));\r\n          args.push(this.toScr(_p2));\r\n          args.push(this.toScr(_s2));\r\n          break;\r\n        default:\r\n          throw \"引数おかしい\";\r\n          break;\r\n      }\r\n\r\n      this.ctxCtr.prototype.drawImage.apply(this.ctx, args.shallowFlatten());\r\n\r\n      return this;\r\n    },\r\n    transform: function(m11, m12, m21, m22, dx, dy) {\r\n      dx = this.toScr(dx);\r\n      dy = this.toScr(dy);\r\n\r\n      this.ctx.transform(m11, m12, m21, m22, dx, dy);\r\n      return this;\r\n    },\r\n    // ref\r\n    // 最速チュパカブラ研究会 - Canvasによる3Dテクスチャマッピングとパフォーマンスチューニング（仮題）\r\n    // http://d.hatena.ne.jp/gyuque/20090211#1234364019\r\n    //\r\n    // \r\n    transformTo: function(from, to, drawing) {\r\n      // check\r\n      if(!from) throw \"from is abnormal\";\r\n      if(!to) throw \"to is abnormal\";\r\n      if(from.length !== to.length) throw \"there is defferent between from and to length\";\r\n\r\n      var self = this;\r\n      from = from.clone();\r\n      to = self.toWorld2dParallel(to);\r\n\t\t\tif(!to) return this;\r\n\r\n      var pf1 = from.shift();\r\n      var pf2 = from.shift();\r\n\r\n      var pt1 = to.shift();\r\n      var pt2 = to.shift();\r\n\r\n\r\n      // a drawing methods like GL_TRIANGLE_FUN\r\n      from.zip2(to).inject([pf2, pt2], function(i, e) {\r\n        var pf2 = i[0];\r\n        var pt2 = i[1];\r\n\r\n        var pf3 = e[0];\r\n        var pt3 = e[1];\r\n\r\n        var vf1 = pf2.sub(pf1);\r\n        var vf2 = pf3.sub(pf1);\r\n\r\n        var vt1 = pt2.sub(pt1);\r\n        var vt2 = pt3.sub(pt1);\r\n\r\n        var inv = [\r\n          vf1, vf2\r\n        ].invert();\r\n        if(!inv) return;\r\n\r\n        var a = inv[0][0] * vt1[0] + inv[0][1] * vt2[0];\r\n        var c = inv[1][0] * vt1[0] + inv[1][1] * vt2[0];\r\n\r\n        var b = inv[0][0] * vt1[1] + inv[0][1] * vt2[1];\r\n        var d = inv[1][0] * vt1[1] + inv[1][1] * vt2[1];\r\n\r\n        var ef = pt1.sub([pf1[0] * a + pf1[1] * c,\r\n                          pf1[0] * b + pf1[1] * d]);\r\n        //var ef = pt1.sub(pf1);\r\n\r\n        // :<\r\n        self\r\n          .save()\r\n          .quads([pt1, pt2, pt3], true)\r\n          .clip()\r\n          .save()\r\n          .translate(ef)\r\n          .transform(a, b, c, d, 0, 0)\r\n\t\t\t\t;\r\n          //.tap(drawing.curry(self, to, from))\r\n\t\t\t\tdrawing(self, to, from);\r\n\t\t\t\tself\r\n          .restore()\r\n          .restore()\r\n        ;\r\n\r\n        return e;\r\n      });\r\n\r\n\r\n      return this;\r\n    },\r\n    // fillText\r\n    fillText: function(text, _p) {\r\n      var p = this.toScr(_p);\r\n      this.ctx.fillText(text, p[0], p[1]);\r\n      return this;\r\n    },\r\n    // strokeText\r\n    strokeText: function(text, _p) {\r\n      var p = this.toScr(_p);\r\n      this.ctx.strokeText(text, p[0], p[1]);\r\n      return this;\r\n    },\r\n    // measureText\r\n    measureText: function(text) {\r\n      var metrics = this.ctx.measureText(text);\r\n      return this.scr2World2d(metrics.width);\r\n    },\r\n    // getNativeImageData\r\n    getNativeImageData: function(p, s) {\r\n      p = this.toScr(p || [0, 0]);\r\n      s = this.toScr(s || [1, 1]);\r\n      return this.ctx.getImageData(p[0], p[1], s[0], s[1]);\r\n    },\r\n    // getImageData\r\n    getImageData: function(p, s) {\r\n      return new ImageDataWrapper(\r\n        this.getNativeImageData(p, s)\r\n      );\r\n    },\r\n  };\r\n  window.DCore = DCore;\r\n\r\n\r\n  function CSS3Helper() {\r\n  };\r\n  CSS3Helper.prototype = {\r\n\t\ttransformToByArray: function(element, wh, to) {\r\n      var w = wh[0];\r\n      var h = wh[1];\r\n      if(!w) throw \"failed to get width\";\r\n      if(!h) throw \"failed to get height\";\r\n\r\n      var pf1 = [0, 0];\r\n      var pf2 = [w, 0];\r\n      var pf3 = [0, h];\r\n\r\n      var pt1 = to[0];\r\n      var pt2 = to[1];\r\n      var pt3 = to[3];\r\n\r\n      var vf1 = pf2.sub(pf1);\r\n      var vf2 = pf3.sub(pf1);\r\n\r\n      var vt1 = pt2.sub(pt1);\r\n      var vt2 = pt3.sub(pt1);\r\n\r\n      var inv = [\r\n        vf1, vf2\r\n      ].invert();\r\n      if(!inv) return;\r\n\r\n      var a = inv[0][0] * vt1[0] + inv[0][1] * vt2[0];\r\n      var b = inv[0][0] * vt1[1] + inv[0][1] * vt2[1];\r\n      var x = inv[0][0] * vt1[2] + inv[0][1] * vt2[2];\r\n\r\n      var c = inv[1][0] * vt1[0] + inv[1][1] * vt2[0];\r\n      var d = inv[1][0] * vt1[1] + inv[1][1] * vt2[1];\r\n      var y = inv[1][0] * vt1[2] + inv[1][1] * vt2[2];\r\n\r\n      var t = pt1.sub([pf1[0] * a + pf1[1] * c,\r\n                       pf1[0] * b + pf1[1] * d,\r\n                       pf1[0] * x + pf1[1] * y]);\r\n\r\n      var r = [\r\n        [a, c, 0, t[0]],\r\n        [b, d, 0, t[1]],\r\n        [x, y, 1, t[2]],\r\n        [0, 0, 0, 1],\r\n      ];\r\n\r\n\t\t\treturn r;\r\n\t\t},\r\n    transformToByExp: function(element, wh, to) {\r\n\r\n\t\t\tvar r = this.transformToByArray(element, wh, to);\r\n\r\n      return \"-webkit-transform: matrix3d(\" + [\r\n        [r[0][0], r[1][0], r[2][0], r[3][0]].join(\",\"),\r\n        [r[0][1], r[1][1], r[2][1], r[3][1]].join(\",\"),\r\n        [r[0][2], r[1][2], r[2][2], r[3][2]].join(\",\"),\r\n        [r[0][3], r[1][3], r[2][3], r[3][3]].join(\",\"),\r\n      ].join(\", \") + \");\";\r\n    },\r\n  };\r\n  window.CSS3Helper = CSS3Helper;\r\n\r\n})();\r\n\r\n// vim:sw=2:ts=2\r\n"},"thumbnail":{"wide":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/9/f/D/9fDj_w.jpg","465":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/9/f/D/9fDj.jpg","100":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/9/f/D/9fDj_100.jpg"},"description_html":"500行以下の比較的小規模なアプリケーションに特化したライブラリ。<br />\r\n<br />\r\n特徴<br />\r\n・プロトタイプチェーンをがんがん破壊<br />\r\n・メソッドチェーンでなんでもつなげる<br />\r\n・それなりに関数型言語っぽいスタイルでかける","modified_date":"2014-05-03 21:20:57","uid":"9fDj","created_date":"2010-09-22 14:47:10","path":"misc","description":"500行以下の比較的小規模なアプリケーションに特化したライブラリ。\r\n\r\n特徴\r\n・プロトタイプチェーンをがんがん破壊\r\n・メソッドチェーンでなんでもつなげる\r\n・それなりに関数型言語っぽいスタイルでかける","statistic":{"forked":"0","favorite":"0","pageview":"2446"},"user":{"icon":"http://jsdo-static-contents.s3.amazonaws.com/images/icon/b/4/2/c/b42cc3dd3312505b680411b3ead08e2dbc4192e4_100.jpg","name":"crispy"},"url":"http://jsdo.it/crispy/misc","title":"misc"}