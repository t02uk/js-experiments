{"source":{"css":"* {\n  margin: 0px;\n  padding: 0px;\n}\nbody {\n  background: #336;\n}\ndiv {\n  border-top: dashed #aa3 2px;\n}\ncanvas {\n  position: relative;\n  left: 0px;\n  top: 0px;\n  width: 100%;\n  height: 95%;\n  /*overflow: hidden;*/\n}\n","html":"<canvas id=\"world\" width=\"465\" height=\"465\"></canvas>\n<div id=\"play\">Loading...</div>","lisence":"MIT","js":"function Player() {\n  var context = new webkitAudioContext();\n\n  var source = context.createBufferSource();\n  var gainNode = context.createGainNode();      //音量変えるノード\n  var analyserNode = context.createAnalyser();\n    \n  gainNode.gain.value = 0.5;\n\n  source.connect(gainNode);\n  gainNode.connect(analyserNode);           //destinationが最終的な出力\n  analyserNode.connect(context.destination);    //RealTimeAnalyserの出力は必要かどうか意見が求められているそう\n\n  var request = new XMLHttpRequest();\n  var url = \"http://jsrun.it/static/assets/sound/01/sound.ogg\";\n//  var url = \"http://wesaadmin.80code.com/zara.php?a=1\";\n    \n  request.open(\"GET\", url, true);\n  request.responseType = \"arraybuffer\";\n\n  request.onload = function() {\n    $(\"#play\").html(\"<input type='button' onclick='player.play()' value='Play'>\");\n  };\n  request.send();\n    \n  this.timeDomainData = new Uint8Array(analyserNode.frequencyBinCount);\n  this.source = source;\n  this.context = context;\n  this.analyserNode = analyserNode;\n  this.request = request;\n};\n\nPlayer.prototype = {\n  play: function() {\n    var source = this.source;\n    var context = this.context;\n    var analyserNode = this.analyserNode;\n    var request = this.request;\n    var timeDomainData = this.timeDomainData;\n    source.buffer = context.createBuffer(request.response, false);  //ArrayBufferからバッファを作成　第２引数をtrueにするとモノラルに\n    source.noteOn(context.currentTime);   //指定した時間に再生する　もし指定した時間がcontext.currentTimeより小さい場合はすぐ再生される\n    \n    var draw = this.draw();\n    setInterval(function(){\n      analyserNode.getByteTimeDomainData(timeDomainData);\n      draw(timeDomainData);\n    },50);\n  },\n  // 描画関数（初期化後に、描画用のクロージャを返す手抜き)\n  draw: function() {\n    var d = new DCore();\n    // 背景初期化\n    d\n     .blend(\"source-over\")\n     .alpha(1)\n     .rgb(0x33, 0x33, 0x66)\n     .fillBack()\n    ;\n\n    const ROOP_DENS = 16;\n    var roopMax = ~~(1024 / ROOP_DENS);\n    var roop = .0.arize(roopMax);\n    var c = 0;\n\n    return function(data) {\n      cp = [0.5, 0.5];\n      // ロープ\n      var roop = $R(0, roopMax).map(function(i) {\n        var power = (data[i] - 124) / 108;\n        return [0, power].rotate((i / (roopMax)).toRadian()).translate(cp);\n      })\n      // 背景初期化\n      d\n       .blend(\"source-over\")\n       .alpha(0.05)\n       .rgb(0x33, 0x33, 0x66)\n       .fillBack()\n      ;\n      // ロープ書く\n      d\n       .blend(\"source-over\")\n       .alpha(0.15)\n       .rgb(0x33, 0x33, 0x66)\n       .loop(roop)\n       .fill()\n       .blend(\"lighter\")\n       .alpha(0.4)\n       .rgb(0x99, 0xdd, 0xff)\n       .lineWidth(0.01)\n       .loop(roop)\n       .stroke()\n      ;\n      // 背景を回転しながらサイケデリックにコピー\n//      var from = Geo.rect();\n//      s = 1.10;\n//      var to = Geo.rect(true).scale([s, s]).rotate(Math.sin(Math.cos(c * 0.02) + c * 0.01) * 0.05 + c * 0.00001).translate([0.5, 0.5]);\n\n//      d\n//       .transformTo(from, to, function(d) {\n//         d\n//          .blend(\"source-over\")\n//          .alpha(0.8)\n//          .drawImage(d)\n//         ;\n//       });\n\td\n\t .save()\n\t .translate([0.5, 0.5])\n\t .scale([1.1, 1.1])\n\t .rotate(Math.sin(Math.cos(c * 0.02) + c * 0.01) * 0.05)\n\t .translate([-0.5, -0.5])\n\t .blend(\"source-over\")\n\t .alpha(0.8)\n\t .drawImage(d)\n\t .restore()\n\t;\n      c++;\n    };\n  }\n};\nvar player = new Player();\n"},"thumbnail":{"wide":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/k/v/A/kvAR_w.jpg","465":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/k/v/A/kvAR.jpg","100":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/k/v/A/kvAR_100.jpg"},"description_html":"めまぐるしい変化をアニメーションとして可視化するとうまく作れない気がする<br />\n<br />\n(追記) 音源を変更＋調整。","parent":{"thumbnail":{"wide":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/V/Y/z/VYzU_w.jpg","465":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/V/Y/z/VYzU.jpg","100":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/V/Y/z/VYzU_100.jpg"},"parent":{"thumbnail":{"wide":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/t/k/3/tk3X_w.jpg","465":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/t/k/3/tk3X.jpg","100":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/t/k/3/tk3X_100.jpg"},"parent":{"thumbnail":{"wide":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/3/A/Y/3AY7_w.jpg","465":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/3/A/Y/3AY7.jpg","100":"http://jsdo-static-contents.s3.amazonaws.com/images/capture/3/A/Y/3AY7_100.jpg"},"modified_date":"2011-08-14 10:58:41","uid":"3AY7","created_date":"2011-08-14 09:44:19","path":"3AY7","description":"Google Chromeでアドレスバーにabout:flags\nウェブ オーディオを有効にする\n\nChrome 13.0.782.112で確認","statistic":{"forked":"5","favorite":"1","pageview":"3201"},"user":{"icon":"http://jsdo-static-contents.s3.amazonaws.com/images/icon/f/f/0/0/ff00b9b087e2dce83fd40d4fed6646943de50edf_100.jpg","name":"ryoheycc"},"url":"http://jsdo.it/ryoheycc/3AY7","title":"Web Audio API Test+GainNode"},"modified_date":"2011-08-17 16:24:52","uid":"tk3X","created_date":"2011-08-16 21:58:22","path":"tk3X","description":"Google Chromeでアドレスバーにabout:flags\nウェブ オーディオを有効にする\n\nChrome 13.0.782.112で確認\n\nRealTimeAnalyser.getByteTimeDomainData()で波形を表示する\n\nボリュームを下げると波形が小さくなるのが一番の見所","statistic":{"forked":"17","favorite":"18","pageview":"10220"},"url":"http://jsdo.it/ryoheycc/tk3X","user":{"icon":"http://jsdo-static-contents.s3.amazonaws.com/images/icon/f/f/0/0/ff00b9b087e2dce83fd40d4fed6646943de50edf_100.jpg","name":"ryoheycc"},"title":" Web Audio APIで音楽のリアルタイム波形表示"},"modified_date":"2012-03-29 15:51:57","uid":"VYzU","created_date":"2012-03-27 21:04:26","path":"VYzU","description":"コーディングコンテスト Q vol.2 のエントリー用コードです。\nこのコードをフォークするとコンテストに参加できます。\nhttp://jsdo.it/event/q/vol2\n\nwonderflに投稿された以下の作品をHTML5、CSS、JavaScriptを駆使してリメイクしてください。\nhttp://wonderfl.net/c/5ddY\n\nGoogle Chrome の最新版で動作する事が条件になります。\n\nあなたなりのオリジナリティを評価します。\n自由に発想してチャレンジしてください！","statistic":{"forked":"53","favorite":"1","pageview":"15029"},"url":"http://jsdo.it/gryng02/VYzU","user":{"icon":"http://jsdo-static-contents.s3.amazonaws.com/images/icon/2/1/9/4/2194e16be994ab66d49a6e5acad51c57d05a899e_100.jpg","name":"gryng02"},"title":"Sound Visualizer"},"modified_date":"2012-04-12 23:33:07","uid":"kvAR","created_date":"2012-04-08 15:59:35","path":"kvAR","description":"めまぐるしい変化をアニメーションとして可視化するとうまく作れない気がする\n\n(追記) 音源を変更＋調整。","statistic":{"forked":"1","favorite":"2","pageview":"1610"},"url":"http://jsdo.it/crispy/kvAR","user":{"icon":"http://jsdo-static-contents.s3.amazonaws.com/images/icon/b/4/2/c/b42cc3dd3312505b680411b3ead08e2dbc4192e4_100.jpg","name":"crispy"},"title":"もやもや: Sound Visualizer"}