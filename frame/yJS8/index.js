// sorry but this script may contain many poor engRish


var timeline =
"0000000000000000000000000000000000000000000000000000000000000000" +
"0000000000000000000000000000000000000000000000000000000000000000" +
"0000000000000000000000000000000000000000000000000000000000000000" +
"0000000000000000000000000000000000000000000000000000000000000000" +
"0000000000000000000000000000000000000000000000000000000000000000" +
"0000000000000000000000000000000000000000000000000000000000000000" +
"0000000000000000000000000000000000000000000000000000000000000000" +
"0000000000000000000000000000000000000000000000000000000000000000" +
"0000000010000000000000001000000000000000100000000000000010000000" +
"0000000010000000000000001000000000000000100000000000000010000000" +
"0000000010000000000000001000000000000000100000000000000010000000" +
"0000000010000000000000001000100000000000100010000000000010001000" +
"0000000010000000000000001000000000000000100000000000000010000000" +
"1000000000000000000000001000000000000000100000000000000010000000" +
"0000000010000000000000001000000000000000100000000000000010001000" +
"0000000010000000000000001000100000000000100010000000000010001000" +
"0000000010000000000000001000000000000000100000000000000010000000" +
"0000000010000000000000001000000000000000100000000000000010000000" +
"0000000010000000000000001000000000000000100000000000000010000000" +
"0000000010000000000000001000100000000000100010000000000010001000" +
"0000000010000000000000001000000000000000100000000000000010000000" +
"0000000010000000100000001000000010000000100000000000000010000000" +
"0000000010000000000000001000000000000000100000000000000010000000" +
"1000000010000000000000000000000000000000000000000000000000000000" +
"1000000010000000100000001000000010000000100000001000000010000000" +
"1000000010002000300000003000200030002000300020003000000030002000" +
"1000000010000000100000001000000010000000100000001000000010000000" +
"1000000010002000300000003000300030002000300030003000000030003000" +
"1000000010000000100000001000000010000000100000001000000010000000" +
"1000000010002000300000003000200030002000300020002000000030002000" +
"1000000010000000100000001000000010000000100000001000000010000000" +
"1000000010002000300000003000300030002000300020000000000030002000" +
"1000000000000000100000000000000010000000000000001000000010000000" +
"1000000000002000300000002000200030002000200020003000000030002000" +
"1000000000000000100000000000000010000000000000001000000000000000" +
"1000000000002000300000002000300030002000200030003000000030003000" +
"1000000000000000100000000000000010000000000000001000000010000000" +
"0000000010002000200000003000200020002000300020002000000030002000" +
"1000000000000000100000000000000010000000100000001000000000000000" +
"3000000010002000300000003000300030002000200030003000000030003000" +
"0000000000000000000000000000000000000000000000000000000000000000" +
"0000000000002000200000002000200020002000200020002000000020002000" +
"0000000000000000000000000000000000000000000000000000000000000000" +
"0000000000002000200000002000200020002000200020002000000020002000" +
"0000000000000000000000000000000000000000000000000000000000000000" +
"0000000000002000200000002000200020002000200020002000000020002000" +
"0000000000000000000000000000000000000000000000000000000000000000" +
"0000000000000000000000000000000000000000000000000000000000000000" +
"0000000000000000000000000000000000000000000000000000000000000000" +
"1000000000001000100000000000100010000000000010001000000000001000" +
"1000000000001000100000000000100010000000000010001000000000001000" +
"1000000000001000100000000000100010000000000010001000000000001000" +
"1000000000001000100000000000100010000000000010001000000000001000" +
"1000000000001000100000000000100010000000000010001000000000001000" +
"1000000000001000100000000000100010000000000010001000000000001000" +
"1000000000001000100000000000100010000000000010001000000000001000" +
"2000000000000000000000000000000020000000000000000000000000000000" +
"3000000000001000100000000000100010000000000010001000000000001000" +
"1000000000001000100000000000100010000000000010001000000000001000" +
"1000000000001000100000000000100010000000000010001000000000001000" +
"1000000000001000100000000000100010000000000010001000000000001000" +
"1000000000001000100000000000100010000000000010001000000000001000" +
"1000000000001000100000000000100010000000000010001000000010001000" +
"1000000000001000100000000000100010000000000010001000000000001000" +
"1000000000000000000000000000000020000000000000000000000000001000" +
"3000000000001000100000000000100010000000000010001000000000001000" +
"1000000000001000100000000000100010000000000010001000000000001000" +
"1000000000001000100000000000100010000000000010001000000000001000" +
"1000000000001000100000000000100010000000000010001000000010001000" +
"1000000000001000100000000000100010000000000010001000000000001000" +
"1000000000001000100000000000100010000000000010001000000000001000" +
"1000000000001000100000000000100010000000000010001000000000001000" +
"1000000000001000100000001000100010000000000010001000000010001000" +
"1000000010000000100000001000000010000000100000001000000010000000" +
"1000000010000000100000001000000010000000100000000000000010000000" +
"1000000010000000100000001000000010000000100000001000000010000000" +
"1000000010000000100000001000100010000000100010001000000010001000" +
"1000000000001000100000000000100010000000000010001000000000001000" +
"1000000000001000100000000000100010000000000010001000000000001000" +
"1000000000001000100000000000100010000000000010001000100010001000" +
"1000000010001000100000001000100030001000100010001000100010001000" +
"1000000000001000100000000000100010000000000010001000000000001000" +
"1000000000003000300000002000300030002000200030003000000020003000" +
"1000000000001000100000000000100010000000000010001000000000001000" +
"1000000000003000300000002000300030002000200030003000000020003000" +
"1000000000001000100000000000100010000000000010001000000000001000" +
"1000000000003000300000002000300030002000200030003000000020003000" +
"1000000000001000100000000000100010000000000010001000000000001000" +
"1000000000003000300000002000300030002000200030003000000020003000" +
"0000000000000000000000000000000000000000000000000000000000000000" +
"0000000000002000200000002000200020002000200020002000000020002000" +
"0000000000000000000000000000000000000000000000000000000000000000" +
"0000000000002000200000002000200020002000200020002000000020002000" +
"0000000000000000000000000000000000000000000000000000000000000000" +
"0000000000000000000000000000000000000000000000000000000000000000" +
"0000000000000000000000000000000000000000000000000000000000000000" +
"0000000000000000000000000000000000000000000000000000000000000000" +
"0000000000000000000000000000000000000000000000000000000000000000" +
"0000000000000000000000000000000000000000000000000000000000000000" +
"0000000000000000000000000000000000000000000000000000000000000000" +
"0000000000000000000000000000000000000000000000000000000000000000" +
"0000000000000000000000000000000000000000000000000000000000000000"
;


window.onload = function() {


  var d = new DCore();

  // load video
  var media = document.createElement("video");
  media.setAttribute("src", "../movie/spectrum.mp4");
  media.setAttribute("autoplay", true);
  media.setAttribute("display", "none");

  // setting for video
  var vw = 256;
  var vh = 256;
  var bpm = 138;
  var ratio = vh / vw;
  var canplay = false;
  media.addEventListener("canplay", function(e) {
    canplay = true;
  });
  document.getElementById("outer").appendChild(media);
  media.width = vw;
  media.height = vh;

  function Cube() {

    // construct points
    var ps = [];
    ps = $R(0, 4, true).map(function(e) {
      return [1, 1, 1].rotatez(e.toRadian() * 0.25);
    });
    ps = ps.concat(ps.scale([1, 1, -1]));
    this.ps = ps;

    // construct faces
    var faces = [
      // near
      [ps[0], ps[1], ps[2], ps[3]],
      // far
      [ps[6], ps[5], ps[4], ps[7]],
      // left
      [ps[0], ps[3], ps[7], ps[4]],
      // right
      [ps[6], ps[2], ps[1], ps[5]],
      // top
      [ps[1], ps[0], ps[4], ps[5]],
      // bottom
      [ps[6], ps[7], ps[3], ps[2]],
    ];

    // rotate
    faces = faces.map(function(e){return e.invoke("rotatea", 0.8, [1, 0, 1]);});
    var bottomVertex = faces.shallowFlatten().sortBy(function(e) {
      return e[1];
    }).first();
    faces = faces.invoke("translate", [0, -bottomVertex[1], 0]);
    this.faces = faces;
    this.bottomVertex = bottomVertex;

    this.scale = 1;
    this.blightness = 1;

  };
  Cube.prototype = {
    act: function() {
      this.scale *= 0.8;
      this.scale += 0.2;
      this.blightness *= 0.9;
      this.blightness += 0.1;
    },
    beat: function() {
      this.scale += 0.1;
    },
    shine: function() {
      this.blightness += 0.2;
    },
    draw: function() {
      var self = this;
      var s = this.scale;
      var faces = this.faces.invoke("scale", s.arize(3));

      // first, reflection
      faces.invoke("scale", [1, -1, 1]).zipWithIndex(function(e, i) {

        var a = d.toWorld2dParallel(e);
        // in back of camera
        if(!a) return false;
        // background face culling
        if(a[2].sub(a[1]).cross(a[1].sub(a[0])) <= 0) return false;

        // draw
        d
         .blend("source-over")
         .alpha(0.3)
         .rgb(0x66, 0x66, 0x66)
         .quads(e)
         .lineWidth(0.01)
         .stroke()
        ;

        d.transformTo(Geo.rect(), e, function(d) {
          d.drawImage(media);
        });
      })

      // second, shaddow
      faces.invoke("scale", [1, 0, 1]).zipWithIndex(function(e, i) {
        d.hsv(0.7, 0.8, 0.6 + (self.blightness - 1))
         .blend("source-over")
         .alpha(0.1)
         .quads(e)
         .fill();
      });

      // and face
      faces.zipWithIndex(function(e, i) {

        var a = d.toWorld2dParallel(e);
        // in back of camera
        if(!a) return false;
        // background face culling
        if(a[1].sub(a[0]).cross(a[2].sub(a[1])) <= 0) return false;

        // draw
        d
         .blend("source-over")
         .alpha(0.85)
         .rgb(0x66, 0x66, 0x66)
         .quads(e)
         .lineWidth(0.015)
         .stroke()
        ;

        d.transformTo(Geo.rect(), e, function(d) {
          d.drawImage(media);
        });
      })
    }
  };


  var cube = new Cube();

  // here is main loop
  var preMeasureDet = 0;
  (function(c) {

    if(!canplay) {
      // fillback
      d
       .rgb(0xff, 0xff, 0xff)
       .fillBack()
      ;

      var letters = "loading";
      letters.split("").zipWithIndex(function(letter, i) {

        var s = 0.1;
        var from = Geo.rect().scale([s / 2, s]);
        var to = Geo.rect().scale([s / 2, s]);

        var rad = (i.toRadian() + c / 8) / letters.length;

        to = to
          .translate([0.0, -0.3])
          .rotate(rad)
          .translate([0.5, 0.5])
        ;

        // draw circle
        d
         .circle([-s, -0.3 + s / 2].rotate(rad).translate([0.5, 0.5]), s / 4.0)
         .rgb(0xfa, 0xe8, 0xe8)
         .fill()
         .rgb(0xee, 0xcc, 0xee)
         .stroke()
        ;

        // draw l o a d i n g
        d
         .transformTo(from, to, function(d) {
           d
            .font("monospace", s)
            .textAlign("top")
            .textBaseline("left")
            .rgb(0xd3, 0x6d, 0xdd)
            .fillText(letter, [0, 0])
           ;
         });
        ;
      });

    } else {

      // ground, sky
      d
       .blend("source-over")
       .alpha(1.0)
       .rgb(0xd3, 0xd6, 0xdd)
       .fillBack()
       .rgb(0xbb, 0xbb, 0xcc)
       .quads(Geo.rect().scale([1, 0.4]))
       .fill()
      ;

      // sky

      // set camera
      d.gazeFrom(
        [0, 4, 6].rotatey(c/100),
        [cube.bottomVertex[0], 2.5, cube.bottomVertex[2]],
        [0, 1, 0]
      );

      // caluculate current measure
      var time = media.currentTime - 1.723;
      var measureDet = ~~(bpm / 60 / 4 * time * 64);

      // measureDet changed
      if(time > 0 && measureDet !== preMeasureDet) {
        var s = timeline.substring(preMeasureDet, measureDet);

        // kick
        if(s.match(/(1|3)/)) {
          cube.beat();
        }
        // tyaka
        if(s.match(/(2|3)/)) {
          cube.shine();
        }
      }
      preMeasureDet = measureDet;

      // draw cube
      cube.act();
      cube.draw();

    }

    window.setTimeout(arguments.callee.curry(c+1), 33);
  })(0);


}
// vim:
